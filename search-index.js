var searchIndex = JSON.parse('{\
"leptess":{"doc":"Productive and safe Rust bindings/wrappers for Leptonica â€¦","tn":["capi","LIBLEPT_MAJOR_VERSION","LIBLEPT_MINOR_VERSION","LIBLEPT_PATCH_VERSION","_STDIO_H","_FEATURES_H","_DEFAULT_SOURCE","__GLIBC_USE_ISOC2X","__USE_ISOC11","__USE_ISOC99","__USE_ISOC95","__USE_POSIX_IMPLICITLY","_POSIX_SOURCE","_POSIX_C_SOURCE","__USE_POSIX","__USE_POSIX2","__USE_POSIX199309","__USE_POSIX199506","__USE_XOPEN2K","__USE_XOPEN2K8","_ATFILE_SOURCE","__USE_MISC","__USE_ATFILE","__USE_FORTIFY_LEVEL","__GLIBC_USE_DEPRECATED_GETS","__GLIBC_USE_DEPRECATED_SCANF","_STDC_PREDEF_H","__STDC_IEC_559__","__STDC_IEC_559_COMPLEX__","__STDC_ISO_10646__","__GNU_LIBRARY__","__GLIBC__","__GLIBC_MINOR__","_SYS_CDEFS_H","__glibc_c99_flexarr_available","__WORDSIZE","__WORDSIZE_TIME64_COMPAT32","__SYSCALL_WORDSIZE","__LONG_DOUBLE_USES_FLOAT128","__HAVE_GENERIC_SELECTION","__GLIBC_USE_LIB_EXT2","__GLIBC_USE_IEC_60559_BFP_EXT","__GLIBC_USE_IEC_60559_BFP_EXT_C2X","__GLIBC_USE_IEC_60559_FUNCS_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X","__GLIBC_USE_IEC_60559_TYPES_EXT","__GNUC_VA_LIST","_BITS_TYPES_H","__TIMESIZE","_BITS_TYPESIZES_H","__OFF_T_MATCHES_OFF64_T","__INO_T_MATCHES_INO64_T","__RLIM_T_MATCHES_RLIM64_T","__STATFS_MATCHES_STATFS64","__FD_SETSIZE","_BITS_TIME64_H","_____fpos_t_defined","____mbstate_t_defined","_____fpos64_t_defined","____FILE_defined","__FILE_defined","__struct_FILE_defined","_IO_EOF_SEEN","_IO_ERR_SEEN","_IO_USER_LOCK","_IOFBF","_IOLBF","_IONBF","BUFSIZ","EOF","SEEK_SET","SEEK_CUR","SEEK_END","P_tmpdir","_BITS_STDIO_LIM_H","L_tmpnam","TMP_MAX","FILENAME_MAX","L_ctermid","FOPEN_MAX","_STDLIB_H","WNOHANG","WUNTRACED","WSTOPPED","WEXITED","WCONTINUED","WNOWAIT","__WNOTHREAD","__WALL","__WCLONE","__ENUM_IDTYPE_T","__W_CONTINUED","__WCOREFLAG","__HAVE_FLOAT128","__HAVE_DISTINCT_FLOAT128","__HAVE_FLOAT64X","__HAVE_FLOAT64X_LONG_DOUBLE","__HAVE_FLOAT16","__HAVE_FLOAT32","__HAVE_FLOAT64","__HAVE_FLOAT32X","__HAVE_FLOAT128X","__HAVE_DISTINCT_FLOAT16","__HAVE_DISTINCT_FLOAT32","__HAVE_DISTINCT_FLOAT64","__HAVE_DISTINCT_FLOAT32X","__HAVE_DISTINCT_FLOAT64X","__HAVE_DISTINCT_FLOAT128X","__HAVE_FLOATN_NOT_TYPEDEF","__ldiv_t_defined","__lldiv_t_defined","RAND_MAX","EXIT_FAILURE","EXIT_SUCCESS","_SYS_TYPES_H","__clock_t_defined","__clockid_t_defined","__time_t_defined","__timer_t_defined","_BITS_STDINT_INTN_H","__BIT_TYPES_DEFINED__","_ENDIAN_H","_BITS_ENDIAN_H","__LITTLE_ENDIAN","__BIG_ENDIAN","__PDP_ENDIAN","_BITS_ENDIANNESS_H","__BYTE_ORDER","__FLOAT_WORD_ORDER","LITTLE_ENDIAN","BIG_ENDIAN","PDP_ENDIAN","BYTE_ORDER","_BITS_BYTESWAP_H","_BITS_UINTN_IDENTITY_H","_SYS_SELECT_H","__FD_ZERO_STOS","__sigset_t_defined","__timeval_defined","_STRUCT_TIMESPEC","FD_SETSIZE","_BITS_PTHREADTYPES_COMMON_H","_THREAD_SHARED_TYPES_H","_BITS_PTHREADTYPES_ARCH_H","__SIZEOF_PTHREAD_MUTEX_T","__SIZEOF_PTHREAD_ATTR_T","__SIZEOF_PTHREAD_RWLOCK_T","__SIZEOF_PTHREAD_BARRIER_T","__SIZEOF_PTHREAD_MUTEXATTR_T","__SIZEOF_PTHREAD_COND_T","__SIZEOF_PTHREAD_CONDATTR_T","__SIZEOF_PTHREAD_RWLOCKATTR_T","__SIZEOF_PTHREAD_BARRIERATTR_T","_THREAD_MUTEX_INTERNAL_H","__PTHREAD_MUTEX_HAVE_PREV","__have_pthread_attr_t","_ALLOCA_H","_STDINT_H","_BITS_WCHAR_H","_BITS_STDINT_UINTN_H","INT8_MIN","INT16_MIN","INT32_MIN","INT8_MAX","INT16_MAX","INT32_MAX","UINT8_MAX","UINT16_MAX","UINT32_MAX","INT_LEAST8_MIN","INT_LEAST16_MIN","INT_LEAST32_MIN","INT_LEAST8_MAX","INT_LEAST16_MAX","INT_LEAST32_MAX","UINT_LEAST8_MAX","UINT_LEAST16_MAX","UINT_LEAST32_MAX","INT_FAST8_MIN","INT_FAST16_MIN","INT_FAST32_MIN","INT_FAST8_MAX","INT_FAST16_MAX","INT_FAST32_MAX","UINT_FAST8_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","INTPTR_MIN","INTPTR_MAX","UINTPTR_MAX","PTRDIFF_MIN","PTRDIFF_MAX","SIG_ATOMIC_MIN","SIG_ATOMIC_MAX","SIZE_MAX","WINT_MIN","WINT_MAX","HAVE_LIBJPEG","HAVE_LIBTIFF","HAVE_LIBPNG","HAVE_LIBZ","HAVE_LIBGIF","HAVE_LIBUNGIF","HAVE_LIBWEBP","HAVE_LIBWEBP_ANIM","HAVE_LIBJP2K","USE_BMPIO","USE_PNMIO","USE_JP2KHEADER","USE_PDFIO","USE_PSIO","HAVE_FMEMOPEN","HAVE_FSTATAT","UNDEF","TRUE","FALSE","NUMA_VERSION_NUMBER","DNA_VERSION_NUMBER","SARRAY_VERSION_NUMBER","USE_INLINE_ACCESSORS","DEWARP_VERSION_NUMBER","GPLOT_VERSION_NUMBER","NUM_GPLOT_STYLES","NUM_GPLOT_OUTPUTS","JB_TEMPLATE_EXT","JB_DATA_EXT","SEL_VERSION_NUMBER","KERNEL_VERSION_NUMBER","PIX_SRC","PIX_DST","PIX_CLR","PIX_SET","PIX_PAINT","PIX_MASK","PIX_XOR","PIXAA_VERSION_NUMBER","PIXA_VERSION_NUMBER","BOXA_VERSION_NUMBER","BOXAA_VERSION_NUMBER","PTA_VERSION_NUMBER","FPIX_VERSION_NUMBER","DPIX_VERSION_NUMBER","PIXACOMP_VERSION_NUMBER","RECOG_VERSION_NUMBER","size_t","va_list","__gnuc_va_list","__u_char","__u_short","__u_int","__u_long","__int8_t","__uint8_t","__int16_t","__uint16_t","__int32_t","__uint32_t","__int64_t","__uint64_t","__int_least8_t","__uint_least8_t","__int_least16_t","__uint_least16_t","__int_least32_t","__uint_least32_t","__int_least64_t","__uint_least64_t","__quad_t","__u_quad_t","__intmax_t","__uintmax_t","__dev_t","__uid_t","__gid_t","__ino_t","__ino64_t","__mode_t","__nlink_t","__off_t","__off64_t","__pid_t","__fsid_t","__val","__clock_t","__rlim_t","__rlim64_t","__id_t","__time_t","__useconds_t","__suseconds_t","__daddr_t","__key_t","__clockid_t","__timer_t","__blksize_t","__blkcnt_t","__blkcnt64_t","__fsblkcnt_t","__fsblkcnt64_t","__fsfilcnt_t","__fsfilcnt64_t","__fsword_t","__ssize_t","__syscall_slong_t","__syscall_ulong_t","__loff_t","__caddr_t","__intptr_t","__socklen_t","__sig_atomic_t","__mbstate_t","__count","__value","__mbstate_t__bindgen_ty_1","__wch","__wchb","_G_fpos_t","__pos","__state","__fpos_t","_G_fpos64_t","__pos","__state","__fpos64_t","__FILE","FILE","_IO_marker","_IO_codecvt","_IO_wide_data","_IO_lock_t","_IO_FILE","_flags","_IO_read_ptr","_IO_read_end","_IO_read_base","_IO_write_base","_IO_write_ptr","_IO_write_end","_IO_buf_base","_IO_buf_end","_IO_save_base","_IO_backup_base","_IO_save_end","_markers","_chain","_fileno","_flags2","_old_offset","_cur_column","_vtable_offset","_shortbuf","_lock","_offset","_codecvt","_wide_data","_freeres_list","_freeres_buf","__pad5","_mode","_unused2","off_t","ssize_t","fpos_t","stdin","stdout","stderr","remove","rename","renameat","tmpfile","tmpnam","tmpnam_r","tempnam","fclose","fflush","fflush_unlocked","fopen","freopen","fdopen","fmemopen","open_memstream","setbuf","setvbuf","setbuffer","setlinebuf","fprintf","printf","sprintf","vfprintf","vprintf","vsprintf","snprintf","vsnprintf","vdprintf","dprintf","fscanf","scanf","sscanf","fscanf1","scanf1","sscanf1","vfscanf","vscanf","vsscanf","vfscanf1","vscanf1","vsscanf1","fgetc","getc","getchar","getc_unlocked","getchar_unlocked","fgetc_unlocked","fputc","putc","putchar","fputc_unlocked","putc_unlocked","putchar_unlocked","getw","putw","fgets","__getdelim","getdelim","getline","fputs","puts","ungetc","fread","fwrite","fread_unlocked","fwrite_unlocked","fseek","ftell","rewind","fseeko","ftello","fgetpos","fsetpos","clearerr","feof","ferror","clearerr_unlocked","feof_unlocked","ferror_unlocked","perror","sys_nerr","sys_errlist","fileno","fileno_unlocked","popen","pclose","ctermid","flockfile","ftrylockfile","funlockfile","__uflow","__overflow","wchar_t","idtype_t_P_ALL","idtype_t_P_PID","idtype_t_P_PGID","idtype_t","_Float32","_Float64","_Float32x","_Float64x","div_t","quot","rem","ldiv_t","quot","rem","lldiv_t","quot","rem","__ctype_get_mb_cur_max","atof","atoi","atol","atoll","strtod","strtof","strtold","strtol","strtoul","strtoq","strtouq","strtoll","strtoull","l64a","a64l","u_char","u_short","u_int","u_long","quad_t","u_quad_t","fsid_t","loff_t","ino_t","dev_t","gid_t","mode_t","nlink_t","uid_t","pid_t","id_t","daddr_t","caddr_t","key_t","clock_t","clockid_t","time_t","timer_t","ulong","ushort","uint","u_int8_t","u_int16_t","u_int32_t","u_int64_t","register_t","__sigset_t","__val","sigset_t","timeval","tv_sec","tv_usec","timespec","tv_sec","tv_nsec","suseconds_t","__fd_mask","fd_set","__fds_bits","fd_mask","select","pselect","blksize_t","blkcnt_t","fsblkcnt_t","fsfilcnt_t","__pthread_internal_list","__prev","__next","__pthread_list_t","__pthread_internal_slist","__next","__pthread_slist_t","__pthread_mutex_s","__lock","__count","__owner","__nusers","__kind","__spins","__elision","__list","__pthread_rwlock_arch_t","__readers","__writers","__wrphase_futex","__writers_futex","__pad3","__pad4","__cur_writer","__shared","__rwelision","__pad1","__pad2","__flags","__pthread_cond_s","__bindgen_anon_1","__bindgen_anon_2","__g_refs","__g_size","__g1_orig_size","__wrefs","__g_signals","__pthread_cond_s__bindgen_ty_1","__wseq","__wseq32","__pthread_cond_s__bindgen_ty_1__bindgen_ty_1","__low","__high","__pthread_cond_s__bindgen_ty_2","__g1_start","__g1_start32","__pthread_cond_s__bindgen_ty_2__bindgen_ty_1","__low","__high","pthread_t","pthread_mutexattr_t","__size","__align","pthread_condattr_t","__size","__align","pthread_key_t","pthread_once_t","pthread_attr_t","__size","__align","pthread_mutex_t","__data","__size","__align","pthread_cond_t","__data","__size","__align","pthread_rwlock_t","__data","__size","__align","pthread_rwlockattr_t","__size","__align","pthread_spinlock_t","pthread_barrier_t","__size","__align","pthread_barrierattr_t","__size","__align","random","srandom","initstate","setstate","random_data","fptr","rptr","state","rand_type","rand_deg","rand_sep","end_ptr","random_r","srandom_r","initstate_r","setstate_r","rand","srand","rand_r","drand48","erand48","lrand48","nrand48","mrand48","jrand48","srand48","seed48","lcong48","drand48_data","__x","__old_x","__c","__init","__a","drand48_r","erand48_r","lrand48_r","nrand48_r","mrand48_r","jrand48_r","srand48_r","seed48_r","lcong48_r","malloc","calloc","realloc","reallocarray","free","alloca","valloc","posix_memalign","aligned_alloc","abort","atexit","at_quick_exit","on_exit","exit","quick_exit","_Exit","getenv","putenv","setenv","unsetenv","clearenv","mktemp","mkstemp","mkstemps","mkdtemp","system","realpath","__compar_fn_t","bsearch","qsort","abs","labs","llabs","div","ldiv","lldiv","ecvt","fcvt","gcvt","qecvt","qfcvt","qgcvt","ecvt_r","fcvt_r","qecvt_r","qfcvt_r","mblen","mbtowc","wctomb","mbstowcs","wcstombs","rpmatch","getsubopt","getloadavg","int_least8_t","int_least16_t","int_least32_t","int_least64_t","uint_least8_t","uint_least16_t","uint_least32_t","uint_least64_t","int_fast8_t","int_fast16_t","int_fast32_t","int_fast64_t","uint_fast8_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","intmax_t","uintmax_t","l_intptr_t","l_uintptr_t","l_ok","l_int8","l_uint8","l_int16","l_uint16","l_int32","l_uint32","l_float32","l_float64","l_int64","l_uint64","LeptDebugOK","L_NOT_FOUND","L_FOUND","_bindgen_ty_1","UNIX_PATH_SEPCHAR","WIN_PATH_SEPCHAR","_bindgen_ty_2","L_TIMER","L_WallTimer","start_sec","start_usec","stop_sec","stop_usec","L_WALLTIMER","L_SEVERITY_EXTERNAL","L_SEVERITY_ALL","L_SEVERITY_DEBUG","L_SEVERITY_INFO","L_SEVERITY_WARNING","L_SEVERITY_ERROR","L_SEVERITY_NONE","_bindgen_ty_3","LeptMsgSeverity","Numa","nalloc","n","refcount","startx","delx","array","NUMA","Numaa","nalloc","n","numa","NUMAA","L_Dna","nalloc","n","refcount","startx","delx","array","L_DNA","L_Dnaa","nalloc","n","dna","L_DNAA","L_DnaHash","nbuckets","initsize","dna","L_DNAHASH","Sarray","nalloc","n","refcount","array","SARRAY","L_Bytea","nalloc","size","refcount","data","L_BYTEA","L_LINEAR_INTERP","L_QUADRATIC_INTERP","_bindgen_ty_4","L_CONTINUED_BORDER","L_SLOPE_BORDER","L_MIRRORED_BORDER","_bindgen_ty_5","L_INTEGER_VALUE","L_FLOAT_VALUE","_bindgen_ty_6","L_ByteBuffer","nalloc","n","nwritten","array","L_BBUFFER","L_Heap","nalloc","n","array","direction","L_HEAP","DoubleLinkedList","prev","next","data","DLLIST","L_Ptra","nalloc","imax","nactual","array","L_PTRA","L_Ptraa","nalloc","ptra","L_PTRAA","L_NO_COMPACTION","L_COMPACTION","_bindgen_ty_7","L_AUTO_DOWNSHIFT","L_MIN_DOWNSHIFT","L_FULL_DOWNSHIFT","_bindgen_ty_8","L_HANDLE_ONLY","L_REMOVE","_bindgen_ty_9","L_Queue","nalloc","nhead","nelem","array","stack","L_QUEUE","L_INT_TYPE","L_UINT_TYPE","L_FLOAT_TYPE","_bindgen_ty_10","Rb_Type","itype","utype","ftype","ptype","RB_TYPE","L_Rbtree","root","keytype","L_RBTREE","L_AMAP","L_ASET","L_Rbtree_Node","key","value","left","right","parent","color","L_RBTREE_NODE","L_AMAP_NODE","L_ASET_NODE","L_Stack","nalloc","n","array","auxstack","L_STACK","SPLIT_ON_LEADING_WHITE","SPLIT_ON_BLANK_LINE","SPLIT_ON_BOTH","_bindgen_ty_11","L_Bmf","pixa","size","directory","baseline1","baseline2","baseline3","lineheight","kernwidth","spacewidth","vertlinesep","fonttab","baselinetab","widthtab","L_BMF","CCB_LOCAL_COORDS","CCB_GLOBAL_COORDS","_bindgen_ty_12","CCB_SAVE_ALL_PTS","CCB_SAVE_TURNING_PTS","_bindgen_ty_13","CCBord","pix","boxa","start","refcount","local","global","step","splocal","spglobal","CCBORD","CCBorda","pix","w","h","n","nalloc","ccb","CCBORDA","L_Dewarpa","nalloc","maxpage","dewarp","dewarpcache","namodels","napages","redfactor","sampling","minlines","maxdist","max_linecurv","min_diff_linecurv","max_diff_linecurv","max_edgeslope","max_edgecurv","max_diff_edgecurv","useboth","check_columns","modelsready","L_DEWARPA","L_Dewarp","dewa","pixs","sampvdispar","samphdispar","sampydispar","fullvdispar","fullhdispar","fullydispar","namidys","nacurves","w","h","pageno","sampling","redfactor","minlines","nlines","mincurv","maxcurv","leftslope","rightslope","leftcurv","rightcurv","nx","ny","hasref","refpage","vsuccess","hsuccess","ysuccess","vvalid","hvalid","skip_horiz","debug","L_DEWARP","GPLOT_STYLE_GPLOT_LINES","GPLOT_STYLE_GPLOT_POINTS","GPLOT_STYLE_GPLOT_IMPULSES","GPLOT_STYLE_GPLOT_LINESPOINTS","GPLOT_STYLE_GPLOT_DOTS","GPLOT_STYLE","GPLOT_OUTPUT_GPLOT_NONE","GPLOT_OUTPUT_GPLOT_PNG","GPLOT_OUTPUT_GPLOT_PS","GPLOT_OUTPUT_GPLOT_EPS","GPLOT_OUTPUT_GPLOT_LATEX","GPLOT_OUTPUT_GPLOT_PNM","GPLOT_OUTPUT","GPLOT_SCALING_GPLOT_LINEAR_SCALE","GPLOT_SCALING_GPLOT_LOG_SCALE_X","GPLOT_SCALING_GPLOT_LOG_SCALE_Y","GPLOT_SCALING_GPLOT_LOG_SCALE_X_Y","GPLOT_SCALING","gplotstylenames","gplotfileoutputs","GPlot","rootname","cmdname","cmddata","datanames","plotdata","plotlabels","plotstyles","nplots","outname","outformat","scaling","title","xlabel","ylabel","GPLOT","IFF_UNKNOWN","IFF_BMP","IFF_JFIF_JPEG","IFF_PNG","IFF_TIFF","IFF_TIFF_PACKBITS","IFF_TIFF_RLE","IFF_TIFF_G3","IFF_TIFF_G4","IFF_TIFF_LZW","IFF_TIFF_ZIP","IFF_PNM","IFF_PS","IFF_GIF","IFF_JP2","IFF_WEBP","IFF_LPDF","IFF_TIFF_JPEG","IFF_DEFAULT","IFF_SPIX","_bindgen_ty_14","BMP_ID","TIFF_BIGEND_ID","TIFF_LITTLEEND_ID","_bindgen_ty_15","L_JPEG_READ_LUMINANCE","L_JPEG_FAIL_ON_BAD_DATA","_bindgen_ty_16","L_DEFAULT_ENCODE","L_JPEG_ENCODE","L_G4_ENCODE","L_FLATE_ENCODE","L_JP2K_ENCODE","_bindgen_ty_17","L_Compressed_Data","type_","datacomp","nbytescomp","data85","nbytes85","cmapdata85","cmapdatahex","ncolors","w","h","bps","spp","minisblack","predictor","nbytes","res","L_COMP_DATA","L_FIRST_IMAGE","L_NEXT_IMAGE","L_LAST_IMAGE","_bindgen_ty_18","L_Pdf_Data","title","n","ncmap","cida","id","obj1","obj2","obj3","obj4","obj5","poststream","trailer","xy","wh","mediabox","saprex","sacmap","objsize","objloc","xrefloc","L_PDF_DATA","JbClasser","safiles","method","components","maxwidth","maxheight","npages","baseindex","nacomps","sizehaus","rankhaus","thresh","weightfactor","naarea","w","h","nclass","keep_pixaa","pixaa","pixat","pixatd","dahash","nafgt","ptac","ptact","naclass","napage","ptaul","ptall","JBCLASSER","JbData","pix","npages","w","h","nclass","latticew","latticeh","naclass","napage","ptaul","JBDATA","JB_RANKHAUS","JB_CORRELATION","_bindgen_ty_19","JB_CONN_COMPS","JB_CHARACTERS","JB_WORDS","_bindgen_ty_20","Sel","sy","sx","cy","cx","data","name","SEL","Sela","n","nalloc","sel","SELA","L_Kernel","sy","sx","cy","cx","data","L_KERNEL","SYMMETRIC_MORPH_BC","ASYMMETRIC_MORPH_BC","_bindgen_ty_21","SEL_DONT_CARE","SEL_HIT","SEL_MISS","_bindgen_ty_22","L_RUN_OFF","L_RUN_ON","_bindgen_ty_23","L_HORIZ","L_VERT","L_BOTH_DIRECTIONS","_bindgen_ty_24","L_MORPH_DILATE","L_MORPH_ERODE","L_MORPH_OPEN","L_MORPH_CLOSE","L_MORPH_HMT","_bindgen_ty_25","L_LINEAR_SCALE","L_LOG_SCALE","_bindgen_ty_26","L_TOPHAT_WHITE","L_TOPHAT_BLACK","_bindgen_ty_27","L_ARITH_ADD","L_ARITH_SUBTRACT","L_ARITH_MULTIPLY","L_ARITH_DIVIDE","L_UNION","L_INTERSECTION","L_SUBTRACTION","L_EXCLUSIVE_OR","_bindgen_ty_28","L_CHOOSE_MIN","L_CHOOSE_MAX","L_CHOOSE_MAXDIFF","L_CHOOSE_MIN_BOOST","L_CHOOSE_MAX_BOOST","_bindgen_ty_29","L_BOUNDARY_BG","L_BOUNDARY_FG","_bindgen_ty_30","L_COMPARE_XOR","L_COMPARE_SUBTRACT","L_COMPARE_ABS_DIFF","_bindgen_ty_31","L_MAX_DIFF_FROM_AVERAGE_2","L_MAX_MIN_DIFF_FROM_2","L_MAX_DIFF","_bindgen_ty_32","ADDED_BORDER","Pix","w","h","d","spp","wpl","refcount","xres","yres","informat","special","text","colormap","data","PIX","PixColormap","array","depth","nalloc","n","PIXCMAP","RGBA_Quad","blue","green","red","alpha","RGBA_QUAD","COLOR_RED","COLOR_GREEN","COLOR_BLUE","L_ALPHA_CHANNEL","_bindgen_ty_33","L_RED_SHIFT","L_GREEN_SHIFT","L_BLUE_SHIFT","L_ALPHA_SHIFT","L_DRAW_RED","L_DRAW_GREEN","L_DRAW_BLUE","L_DRAW_SPECIFIED","L_DRAW_RGB","L_DRAW_RANDOM","_bindgen_ty_34","L_RED_WEIGHT","L_GREEN_WEIGHT","L_BLUE_WEIGHT","REMOVE_CMAP_TO_BINARY","REMOVE_CMAP_TO_GRAYSCALE","REMOVE_CMAP_TO_FULL_COLOR","REMOVE_CMAP_WITH_ALPHA","REMOVE_CMAP_BASED_ON_SRC","_bindgen_ty_35","Pixa","n","nalloc","refcount","pix","boxa","PIXA","Pixaa","n","nalloc","pixa","boxa","PIXAA","Box","x","y","w","h","refcount","BOX","Boxa","n","nalloc","refcount","box_","BOXA","Boxaa","n","nalloc","boxa","BOXAA","Pta","n","nalloc","refcount","x","y","PTA","Ptaa","n","nalloc","pta","PTAA","Pixacc","w","h","offset","pix","PIXACC","PixTiling","pix","nx","ny","w","h","xoverlap","yoverlap","strip","PIXTILING","FPix","w","h","wpl","refcount","xres","yres","data","FPIX","FPixa","n","nalloc","refcount","fpix","FPIXA","DPix","w","h","wpl","refcount","xres","yres","data","DPIX","PixComp","w","h","d","xres","yres","comptype","text","cmapflag","data","size","PIXC","PixaComp","n","nalloc","offset","pixc","boxa","PIXAC","L_NOCOPY","L_INSERT","L_COPY","L_CLONE","L_COPY_CLONE","_bindgen_ty_36","L_SHELL_SORT","L_BIN_SORT","_bindgen_ty_37","L_SORT_INCREASING","L_SORT_DECREASING","_bindgen_ty_38","L_SORT_BY_X","L_SORT_BY_Y","L_SORT_BY_RIGHT","L_SORT_BY_BOT","L_SORT_BY_WIDTH","L_SORT_BY_HEIGHT","L_SORT_BY_MIN_DIMENSION","L_SORT_BY_MAX_DIMENSION","L_SORT_BY_PERIMETER","L_SORT_BY_AREA","L_SORT_BY_ASPECT_RATIO","_bindgen_ty_39","L_BLEND_WITH_INVERSE","L_BLEND_TO_WHITE","L_BLEND_TO_BLACK","L_BLEND_GRAY","L_BLEND_GRAY_WITH_INVERSE","_bindgen_ty_40","L_PAINT_LIGHT","L_PAINT_DARK","_bindgen_ty_41","L_SET_PIXELS","L_CLEAR_PIXELS","L_FLIP_PIXELS","_bindgen_ty_42","L_SELECT_IF_LT","L_SELECT_IF_GT","L_SELECT_IF_LTE","L_SELECT_IF_GTE","_bindgen_ty_43","L_SELECT_BY_WIDTH","L_SELECT_BY_HEIGHT","L_SELECT_BY_MAX_DIMENSION","L_SELECT_BY_AREA","L_SELECT_BY_PERIMETER","_bindgen_ty_44","L_SELECT_WIDTH","L_SELECT_HEIGHT","L_SELECT_XVAL","L_SELECT_YVAL","L_SELECT_IF_EITHER","L_SELECT_IF_BOTH","_bindgen_ty_45","L_CHECK_WIDTH","L_CHECK_HEIGHT","L_CHECK_BOTH","_bindgen_ty_46","L_SELECT_RED","L_SELECT_GREEN","L_SELECT_BLUE","L_SELECT_MIN","L_SELECT_MAX","L_SELECT_AVERAGE","L_SELECT_HUE","L_SELECT_SATURATION","_bindgen_ty_47","L_LS_BYTE","L_MS_BYTE","L_AUTO_BYTE","L_CLIP_TO_FF","L_LS_TWO_BYTES","L_MS_TWO_BYTES","L_CLIP_TO_FFFF","_bindgen_ty_48","L_ROTATE_AREA_MAP","L_ROTATE_SHEAR","L_ROTATE_SAMPLING","_bindgen_ty_49","L_BRING_IN_WHITE","L_BRING_IN_BLACK","_bindgen_ty_50","L_SHEAR_ABOUT_CORNER","L_SHEAR_ABOUT_CENTER","_bindgen_ty_51","L_TR_SC_RO","L_SC_RO_TR","L_RO_TR_SC","L_TR_RO_SC","L_RO_SC_TR","L_SC_TR_RO","_bindgen_ty_52","L_FILL_WHITE","L_FILL_BLACK","_bindgen_ty_53","L_SET_WHITE","L_SET_BLACK","_bindgen_ty_54","L_GET_WHITE_VAL","L_GET_BLACK_VAL","_bindgen_ty_55","L_WHITE_IS_MAX","L_BLACK_IS_MAX","_bindgen_ty_56","DEFAULT_CLIP_LOWER_1","DEFAULT_CLIP_UPPER_1","DEFAULT_CLIP_LOWER_2","DEFAULT_CLIP_UPPER_2","_bindgen_ty_57","L_MANHATTAN_DISTANCE","L_EUCLIDEAN_DISTANCE","_bindgen_ty_58","L_NEGATIVE","L_NON_NEGATIVE","L_POSITIVE","L_NON_POSITIVE","L_ZERO","L_ALL","_bindgen_ty_59","L_MEAN_ABSVAL","L_MEDIAN_VAL","L_MODE_VAL","L_MODE_COUNT","L_ROOT_MEAN_SQUARE","L_STANDARD_DEVIATION","L_VARIANCE","_bindgen_ty_60","L_CHOOSE_CONSECUTIVE","L_CHOOSE_SKIP_BY","_bindgen_ty_61","L_TEXT_ORIENT_UNKNOWN","L_TEXT_ORIENT_UP","L_TEXT_ORIENT_LEFT","L_TEXT_ORIENT_DOWN","L_TEXT_ORIENT_RIGHT","_bindgen_ty_62","L_HORIZONTAL_EDGES","L_VERTICAL_EDGES","L_ALL_EDGES","_bindgen_ty_63","L_HORIZONTAL_LINE","L_POS_SLOPE_LINE","L_VERTICAL_LINE","L_NEG_SLOPE_LINE","L_OBLIQUE_LINE","_bindgen_ty_64","L_PORTRAIT_MODE","L_LANDSCAPE_MODE","_bindgen_ty_65","L_FROM_LEFT","L_FROM_RIGHT","L_FROM_TOP","L_FROM_BOT","L_SCAN_NEGATIVE","L_SCAN_POSITIVE","L_SCAN_BOTH","L_SCAN_HORIZONTAL","L_SCAN_VERTICAL","_bindgen_ty_66","L_ADJUST_SKIP","L_ADJUST_LEFT","L_ADJUST_RIGHT","L_ADJUST_LEFT_AND_RIGHT","L_ADJUST_TOP","L_ADJUST_BOT","L_ADJUST_TOP_AND_BOT","L_ADJUST_CHOOSE_MIN","L_ADJUST_CHOOSE_MAX","L_SET_LEFT","L_SET_RIGHT","L_SET_TOP","L_SET_BOT","L_GET_LEFT","L_GET_RIGHT","L_GET_TOP","L_GET_BOT","_bindgen_ty_67","L_USE_MINSIZE","L_USE_MAXSIZE","L_SUB_ON_LOC_DIFF","L_SUB_ON_SIZE_DIFF","L_USE_CAPPED_MIN","L_USE_CAPPED_MAX","_bindgen_ty_68","L_COMBINE","L_REMOVE_SMALL","_bindgen_ty_69","L_GEOMETRIC_UNION","L_GEOMETRIC_INTERSECTION","L_LARGEST_AREA","L_SMALLEST_AREA","_bindgen_ty_70","L_USE_ALL_BOXES","L_USE_SAME_PARITY_BOXES","_bindgen_ty_71","L_UPPER_LEFT","L_UPPER_RIGHT","L_LOWER_LEFT","L_LOWER_RIGHT","L_BOX_CENTER","_bindgen_ty_72","L_WARP_TO_LEFT","L_WARP_TO_RIGHT","_bindgen_ty_73","L_LINEAR_WARP","L_QUADRATIC_WARP","_bindgen_ty_74","L_INTERPOLATED","L_SAMPLED","_bindgen_ty_75","L_THIN_FG","L_THIN_BG","_bindgen_ty_76","L_HORIZONTAL_RUNS","L_VERTICAL_RUNS","_bindgen_ty_77","L_SOBEL_EDGE","L_TWO_SIDED_EDGE","_bindgen_ty_78","L_SUBPIXEL_ORDER_RGB","L_SUBPIXEL_ORDER_BGR","L_SUBPIXEL_ORDER_VRGB","L_SUBPIXEL_ORDER_VBGR","_bindgen_ty_79","L_HS_HISTO","L_HV_HISTO","L_SV_HISTO","_bindgen_ty_80","L_INCLUDE_REGION","L_EXCLUDE_REGION","_bindgen_ty_81","L_ADD_ABOVE","L_ADD_BELOW","L_ADD_LEFT","L_ADD_RIGHT","L_ADD_AT_TOP","L_ADD_AT_BOT","L_ADD_AT_LEFT","L_ADD_AT_RIGHT","_bindgen_ty_82","L_PLOT_AT_TOP","L_PLOT_AT_MID_HORIZ","L_PLOT_AT_BOT","L_PLOT_AT_LEFT","L_PLOT_AT_MID_VERT","L_PLOT_AT_RIGHT","_bindgen_ty_83","L_USE_INNER","L_USE_OUTER","_bindgen_ty_84","L_DISPLAY_WITH_XZGV","L_DISPLAY_WITH_XLI","L_DISPLAY_WITH_XV","L_DISPLAY_WITH_IV","L_DISPLAY_WITH_OPEN","_bindgen_ty_85","L_NO_CHROMA_SAMPLING_JPEG","_bindgen_ty_86","L_CLIP_TO_ZERO","L_TAKE_ABSVAL","_bindgen_ty_87","L_LESS_THAN_ZERO","L_EQUAL_TO_ZERO","L_GREATER_THAN_ZERO","_bindgen_ty_88","L_ADD_TRAIL_SLASH","L_REMOVE_TRAIL_SLASH","_bindgen_ty_89","alloc_fn","dealloc_fn","L_Recog","scalew","scaleh","linew","templ_use","maxarraysize","setsize","threshold","maxyshift","charset_type","charset_size","min_nopad","num_samples","minwidth_u","maxwidth_u","minheight_u","maxheight_u","minwidth","maxwidth","ave_done","train_done","max_wh_ratio","max_ht_ratio","min_splitw","max_splith","sa_text","dna_tochar","centtab","sumtab","pixaa_u","ptaa_u","naasum_u","pixaa","ptaa","naasum","pixa_u","pta_u","nasum_u","pixa","pta","nasum","pixa_tr","pixadb_ave","pixa_id","pixdb_ave","pixdb_range","pixadb_boot","pixadb_split","bmf","bmf_size","did","rch","rcha","L_RECOG","L_Rch","index","score","text","sample","xloc","yloc","width","L_RCH","L_Rcha","naindex","nascore","satext","nasample","naxloc","nayloc","nawidth","L_RCHA","L_Rdid","pixs","counta","delya","narray","size","setwidth","nasum","namoment","fullarrays","beta","gamma","trellisscore","trellistempl","natempl","naxloc","nadely","nawidth","boxa","nascore","natempl_r","nasample_r","naxloc_r","nadely_r","nawidth_r","nascore_r","L_RDID","L_UNKNOWN","L_ARABIC_NUMERALS","L_LC_ROMAN_NUMERALS","L_UC_ROMAN_NUMERALS","L_LC_ALPHA","L_UC_ALPHA","_bindgen_ty_90","L_USE_ALL_TEMPLATES","L_USE_AVERAGE_TEMPLATES","_bindgen_ty_91","L_RegParams","fp","testname","tempfile","mode","index","success","display","tstart","L_REGPARAMS","L_REG_GENERATE","L_REG_COMPARE","L_REG_DISPLAY","_bindgen_ty_92","L_StrCode","fileno","ifunc","function","data","descr","n","L_STRCODE","L_STR_TYPE","L_STR_NAME","L_STR_READER","L_STR_MEMREADER","_bindgen_ty_93","L_Sudoku","num","locs","current","init","state","nguess","finished","failure","L_SUDOKU","L_SUDOKU_INIT","L_SUDOKU_STATE","_bindgen_ty_94","L_WShed","pixs","pixm","mindepth","pixlab","pixt","lines8","linem1","linelab32","linet1","pixad","ptas","nasi","nash","namh","nalevels","nseeds","nother","lut","links","arraysize","debug","L_WSHED","pixCleanBackgroundToWhite","pixBackgroundNormSimple","pixBackgroundNorm","pixBackgroundNormMorph","pixBackgroundNormGrayArray","pixBackgroundNormRGBArrays","pixBackgroundNormGrayArrayMorph","pixBackgroundNormRGBArraysMorph","pixGetBackgroundGrayMap","pixGetBackgroundRGBMap","pixGetBackgroundGrayMapMorph","pixGetBackgroundRGBMapMorph","pixFillMapHoles","pixExtendByReplication","pixSmoothConnectedRegions","pixGetInvBackgroundMap","pixApplyInvBackgroundGrayMap","pixApplyInvBackgroundRGBMap","pixApplyVariableGrayMap","pixGlobalNormRGB","pixGlobalNormNoSatRGB","pixThresholdSpreadNorm","pixBackgroundNormFlex","pixContrastNorm","pixMinMaxTiles","pixSetLowContrast","pixLinearTRCTiled","pixAffineSampledPta","pixAffineSampled","pixAffinePta","pixAffine","pixAffinePtaColor","pixAffineColor","pixAffinePtaGray","pixAffineGray","pixAffinePtaWithAlpha","getAffineXformCoeffs","affineInvertXform","affineXformSampledPt","affineXformPt","linearInterpolatePixelColor","linearInterpolatePixelGray","gaussjordan","pixAffineSequential","createMatrix2dTranslate","createMatrix2dScale","createMatrix2dRotate","ptaTranslate","ptaScale","ptaRotate","boxaTranslate","boxaScale","boxaRotate","ptaAffineTransform","boxaAffineTransform","l_productMatVec","l_productMat2","l_productMat3","l_productMat4","l_getDataBit","l_setDataBit","l_clearDataBit","l_setDataBitVal","l_getDataDibit","l_setDataDibit","l_clearDataDibit","l_getDataQbit","l_setDataQbit","l_clearDataQbit","l_getDataByte","l_setDataByte","l_getDataTwoBytes","l_setDataTwoBytes","l_getDataFourBytes","l_setDataFourBytes","barcodeDispatchDecoder","barcodeFormatIsSupported","pixFindBaselines","pixDeskewLocal","pixGetLocalSkewTransform","pixGetLocalSkewAngles","bbufferCreate","bbufferDestroy","bbufferDestroyAndSaveData","bbufferRead","bbufferReadStream","bbufferExtendArray","bbufferWrite","bbufferWriteStream","pixBilateral","pixBilateralGray","pixBilateralExact","pixBilateralGrayExact","pixBlockBilateralExact","makeRangeKernel","pixBilinearSampledPta","pixBilinearSampled","pixBilinearPta","pixBilinear","pixBilinearPtaColor","pixBilinearColor","pixBilinearPtaGray","pixBilinearGray","pixBilinearPtaWithAlpha","getBilinearXformCoeffs","bilinearXformSampledPt","bilinearXformPt","pixOtsuAdaptiveThreshold","pixOtsuThreshOnBackgroundNorm","pixMaskedThreshOnBackgroundNorm","pixSauvolaBinarizeTiled","pixSauvolaBinarize","pixThresholdByConnComp","pixThresholdByHisto","pixExpandBinaryReplicate","pixExpandBinaryPower2","pixReduceBinary2","pixReduceRankBinaryCascade","pixReduceRankBinary2","makeSubsampleTab2x","pixBlend","pixBlendMask","pixBlendGray","pixBlendGrayInverse","pixBlendColor","pixBlendColorByChannel","pixBlendGrayAdapt","pixFadeWithGray","pixBlendHardLight","pixBlendCmap","pixBlendWithGrayMask","pixBlendBackgroundToColor","pixMultiplyByColor","pixAlphaBlendUniform","pixAddAlphaToBlend","pixSetAlphaOverWhite","pixLinearEdgeFade","bmfCreate","bmfDestroy","bmfGetPix","bmfGetWidth","bmfGetBaseline","pixaGetFont","pixaSaveFont","pixReadStreamBmp","pixReadMemBmp","pixWriteStreamBmp","pixWriteMemBmp","l_bootnum_gen1","l_bootnum_gen2","l_bootnum_gen3","l_bootnum_gen4","boxCreate","boxCreateValid","boxCopy","boxClone","boxDestroy","boxGetGeometry","boxSetGeometry","boxGetSideLocations","boxSetSideLocations","boxGetRefcount","boxChangeRefcount","boxIsValid","boxaCreate","boxaCopy","boxaDestroy","boxaAddBox","boxaExtendArray","boxaExtendArrayToSize","boxaGetCount","boxaGetValidCount","boxaGetBox","boxaGetValidBox","boxaFindInvalidBoxes","boxaGetBoxGeometry","boxaIsFull","boxaReplaceBox","boxaInsertBox","boxaRemoveBox","boxaRemoveBoxAndSave","boxaSaveValid","boxaInitFull","boxaClear","boxaaCreate","boxaaCopy","boxaaDestroy","boxaaAddBoxa","boxaaExtendArray","boxaaExtendArrayToSize","boxaaGetCount","boxaaGetBoxCount","boxaaGetBoxa","boxaaGetBox","boxaaInitFull","boxaaExtendWithInit","boxaaReplaceBoxa","boxaaInsertBoxa","boxaaRemoveBoxa","boxaaAddBox","boxaaReadFromFiles","boxaaRead","boxaaReadStream","boxaaReadMem","boxaaWrite","boxaaWriteStream","boxaaWriteMem","boxaRead","boxaReadStream","boxaReadMem","boxaWriteDebug","boxaWrite","boxaWriteStream","boxaWriteStderr","boxaWriteMem","boxPrintStreamInfo","boxContains","boxIntersects","boxaContainedInBox","boxaContainedInBoxCount","boxaContainedInBoxa","boxaIntersectsBox","boxaIntersectsBoxCount","boxaClipToBox","boxaCombineOverlaps","boxaCombineOverlapsInPair","boxOverlapRegion","boxBoundingRegion","boxOverlapFraction","boxOverlapArea","boxaHandleOverlaps","boxOverlapDistance","boxSeparationDistance","boxCompareSize","boxContainsPt","boxaGetNearestToPt","boxaGetNearestToLine","boxaFindNearestBoxes","boxaGetNearestByDirection","boxGetCenter","boxIntersectByLine","boxClipToRectangle","boxClipToRectangleParams","boxRelocateOneSide","boxaAdjustSides","boxaAdjustBoxSides","boxAdjustSides","boxaSetSide","boxSetSide","boxaAdjustWidthToTarget","boxaAdjustHeightToTarget","boxEqual","boxaEqual","boxSimilar","boxaSimilar","boxaJoin","boxaaJoin","boxaSplitEvenOdd","boxaMergeEvenOdd","boxaTransform","boxTransform","boxaTransformOrdered","boxTransformOrdered","boxaRotateOrth","boxRotateOrth","boxaShiftWithPta","boxaSort","boxaBinSort","boxaSortByIndex","boxaSort2d","boxaSort2dByIndex","boxaExtractAsNuma","boxaExtractAsPta","boxaExtractCorners","boxaGetRankVals","boxaGetMedianVals","boxaGetAverageSize","boxaaGetExtent","boxaaFlattenToBoxa","boxaaFlattenAligned","boxaEncapsulateAligned","boxaaTranspose","boxaaAlignBox","pixMaskConnComp","pixMaskBoxa","pixPaintBoxa","pixSetBlackOrWhiteBoxa","pixPaintBoxaRandom","pixBlendBoxaRandom","pixDrawBoxa","pixDrawBoxaRandom","boxaaDisplay","pixaDisplayBoxaa","pixSplitIntoBoxa","pixSplitComponentIntoBoxa","makeMosaicStrips","boxaCompareRegions","pixSelectLargeULComp","boxaSelectLargeULBox","boxaSelectRange","boxaaSelectRange","boxaSelectBySize","boxaMakeSizeIndicator","boxaSelectByArea","boxaMakeAreaIndicator","boxaSelectByWHRatio","boxaMakeWHRatioIndicator","boxaSelectWithIndicator","boxaPermutePseudorandom","boxaPermuteRandom","boxaSwapBoxes","boxaConvertToPta","ptaConvertToBoxa","boxConvertToPta","ptaConvertToBox","boxaGetExtent","boxaGetCoverage","boxaaSizeRange","boxaSizeRange","boxaLocationRange","boxaGetSizes","boxaGetArea","boxaDisplayTiled","boxaSmoothSequenceMedian","boxaWindowedMedian","boxaModifyWithBoxa","boxaConstrainSize","boxaReconcileEvenOddHeight","boxaReconcilePairWidth","boxaSizeConsistency1","boxaSizeConsistency2","boxaReconcileAllByMedian","boxaReconcileSidesByMedian","boxaReconcileSizeByMedian","boxaPlotSides","boxaPlotSizes","boxaFillSequence","boxaSizeVariation","boxaMedianDimensions","l_byteaCreate","l_byteaInitFromMem","l_byteaInitFromFile","l_byteaInitFromStream","l_byteaCopy","l_byteaDestroy","l_byteaGetSize","l_byteaGetData","l_byteaCopyData","l_byteaAppendData","l_byteaAppendString","l_byteaJoin","l_byteaSplit","l_byteaFindEachSequence","l_byteaWrite","l_byteaWriteStream","ccbaCreate","ccbaDestroy","ccbCreate","ccbDestroy","ccbaAddCcb","ccbaGetCount","ccbaGetCcb","pixGetAllCCBorders","pixGetOuterBordersPtaa","pixGetOuterBorder","ccbaGenerateGlobalLocs","ccbaGenerateStepChains","ccbaStepChainsToPixCoords","ccbaGenerateSPGlobalLocs","ccbaGenerateSinglePath","getCutPathForHole","ccbaDisplayBorder","ccbaDisplaySPBorder","ccbaDisplayImage1","ccbaDisplayImage2","ccbaWrite","ccbaWriteStream","ccbaRead","ccbaReadStream","ccbaWriteSVG","ccbaWriteSVGString","pixaThinConnected","pixThinConnected","pixThinConnectedBySet","selaMakeThinSets","pixFindCheckerboardCorners","makeCheckerboardCornerSela","jbCorrelation","jbRankHaus","jbWordsInTextlines","pixGetWordsInTextlines","pixGetWordBoxesInTextlines","pixFindWordAndCharacterBoxes","boxaExtractSortedPattern","numaaCompareImagesByBoxes","pixColorContent","pixColorMagnitude","pixMaskOverColorPixels","pixMaskOverGrayPixels","pixMaskOverColorRange","pixColorFraction","pixFindColorRegions","pixNumSignificantGrayColors","pixColorsForQuantization","pixNumColors","pixConvertRGBToCmap","pixGetMostPopulatedColors","pixSimpleColorQuantize","pixGetRGBHistogram","makeRGBIndexTables","getRGBFromIndex","pixHasHighlightRed","pixColorGrayRegions","pixColorGray","pixColorGrayMasked","pixSnapColor","pixSnapColorCmap","pixLinearMapToTargetColor","pixelLinearMapToTargetColor","pixShiftByComponent","pixelShiftByComponent","pixelFractionalShift","pixcmapCreate","pixcmapCreateRandom","pixcmapCreateLinear","pixcmapCopy","pixcmapDestroy","pixcmapIsValid","pixcmapAddColor","pixcmapAddRGBA","pixcmapAddNewColor","pixcmapAddNearestColor","pixcmapUsableColor","pixcmapAddBlackOrWhite","pixcmapSetBlackAndWhite","pixcmapGetCount","pixcmapGetFreeCount","pixcmapGetDepth","pixcmapGetMinDepth","pixcmapClear","pixcmapGetColor","pixcmapGetColor32","pixcmapGetRGBA","pixcmapGetRGBA32","pixcmapResetColor","pixcmapSetAlpha","pixcmapGetIndex","pixcmapHasColor","pixcmapIsOpaque","pixcmapIsBlackAndWhite","pixcmapCountGrayColors","pixcmapGetRankIntensity","pixcmapGetNearestIndex","pixcmapGetNearestGrayIndex","pixcmapGetDistanceToColor","pixcmapGetRangeValues","pixcmapGrayToColor","pixcmapColorToGray","pixcmapConvertTo4","pixcmapConvertTo8","pixcmapRead","pixcmapReadStream","pixcmapReadMem","pixcmapWrite","pixcmapWriteStream","pixcmapWriteMem","pixcmapToArrays","pixcmapToRGBTable","pixcmapSerializeToMemory","pixcmapDeserializeFromMemory","pixcmapConvertToHex","pixcmapGammaTRC","pixcmapContrastTRC","pixcmapShiftIntensity","pixcmapShiftByComponent","pixColorMorph","pixOctreeColorQuant","pixOctreeColorQuantGeneral","makeRGBToIndexTables","getOctcubeIndexFromRGB","pixOctreeQuantByPopulation","pixOctreeQuantNumColors","pixOctcubeQuantMixedWithGray","pixFixedOctcubeQuant256","pixFewColorsOctcubeQuant1","pixFewColorsOctcubeQuant2","pixFewColorsOctcubeQuantMixed","pixFixedOctcubeQuantGenRGB","pixQuantFromCmap","pixOctcubeQuantFromCmap","pixOctcubeHistogram","pixcmapToOctcubeLUT","pixRemoveUnusedColors","pixNumberOccupiedOctcubes","pixMedianCutQuant","pixMedianCutQuantGeneral","pixMedianCutQuantMixed","pixFewColorsMedianCutQuantMixed","pixMedianCutHisto","pixColorSegment","pixColorSegmentCluster","pixAssignToNearestColor","pixColorSegmentClean","pixColorSegmentRemoveColors","pixConvertRGBToHSV","pixConvertHSVToRGB","convertRGBToHSV","convertHSVToRGB","pixcmapConvertRGBToHSV","pixcmapConvertHSVToRGB","pixConvertRGBToHue","pixConvertRGBToSaturation","pixConvertRGBToValue","pixMakeRangeMaskHS","pixMakeRangeMaskHV","pixMakeRangeMaskSV","pixMakeHistoHS","pixMakeHistoHV","pixMakeHistoSV","pixFindHistoPeaksHSV","displayHSVColorRange","pixConvertRGBToYUV","pixConvertYUVToRGB","convertRGBToYUV","convertYUVToRGB","pixcmapConvertRGBToYUV","pixcmapConvertYUVToRGB","pixConvertRGBToXYZ","fpixaConvertXYZToRGB","convertRGBToXYZ","convertXYZToRGB","fpixaConvertXYZToLAB","fpixaConvertLABToXYZ","convertXYZToLAB","convertLABToXYZ","pixConvertRGBToLAB","fpixaConvertLABToRGB","convertRGBToLAB","convertLABToRGB","pixEqual","pixEqualWithAlpha","pixEqualWithCmap","cmapEqual","pixUsesCmapColor","pixCorrelationBinary","pixDisplayDiffBinary","pixCompareBinary","pixCompareGrayOrRGB","pixCompareGray","pixCompareRGB","pixCompareTiled","pixCompareRankDifference","pixTestForSimilarity","pixGetDifferenceStats","pixGetDifferenceHistogram","pixGetPerceptualDiff","pixGetPSNR","pixaComparePhotoRegionsByHisto","pixComparePhotoRegionsByHisto","pixGenPhotoHistos","pixPadToCenterCentroid","pixCentroid8","pixDecideIfPhotoImage","compareTilesByHisto","pixCompareGrayByHisto","pixCropAlignedToCentroid","l_compressGrayHistograms","l_uncompressGrayHistograms","pixCompareWithTranslation","pixBestCorrelation","pixConnComp","pixConnCompPixa","pixConnCompBB","pixCountConnComp","nextOnPixelInRaster","pixSeedfillBB","pixSeedfill4BB","pixSeedfill8BB","pixSeedfill","pixSeedfill4","pixSeedfill8","convertFilesTo1bpp","pixBlockconv","pixBlockconvGray","pixBlockconvAccum","pixBlockconvGrayUnnormalized","pixBlockconvTiled","pixBlockconvGrayTile","pixWindowedStats","pixWindowedMean","pixWindowedMeanSquare","pixWindowedVariance","pixMeanSquareAccum","pixBlockrank","pixBlocksum","pixCensusTransform","pixConvolve","pixConvolveSep","pixConvolveRGB","pixConvolveRGBSep","fpixConvolve","fpixConvolveSep","pixConvolveWithBias","l_setConvolveSampling","pixAddGaussianNoise","gaussDistribSampling","pixCorrelationScore","pixCorrelationScoreThresholded","pixCorrelationScoreSimple","pixCorrelationScoreShifted","dewarpCreate","dewarpCreateRef","dewarpDestroy","dewarpaCreate","dewarpaCreateFromPixacomp","dewarpaDestroy","dewarpaDestroyDewarp","dewarpaInsertDewarp","dewarpaGetDewarp","dewarpaSetCurvatures","dewarpaUseBothArrays","dewarpaSetCheckColumns","dewarpaSetMaxDistance","dewarpRead","dewarpReadStream","dewarpReadMem","dewarpWrite","dewarpWriteStream","dewarpWriteMem","dewarpaRead","dewarpaReadStream","dewarpaReadMem","dewarpaWrite","dewarpaWriteStream","dewarpaWriteMem","dewarpBuildPageModel","dewarpFindVertDisparity","dewarpFindHorizDisparity","dewarpGetTextlineCenters","dewarpRemoveShortLines","dewarpFindHorizSlopeDisparity","dewarpBuildLineModel","dewarpaModelStatus","dewarpaApplyDisparity","dewarpaApplyDisparityBoxa","dewarpMinimize","dewarpPopulateFullRes","dewarpSinglePage","dewarpSinglePageInit","dewarpSinglePageRun","dewarpaListPages","dewarpaSetValidModels","dewarpaInsertRefModels","dewarpaStripRefModels","dewarpaRestoreModels","dewarpaInfo","dewarpaModelStats","dewarpaShowArrays","dewarpDebug","dewarpShowResults","l_dnaCreate","l_dnaCreateFromIArray","l_dnaCreateFromDArray","l_dnaMakeSequence","l_dnaDestroy","l_dnaCopy","l_dnaClone","l_dnaEmpty","l_dnaAddNumber","l_dnaInsertNumber","l_dnaRemoveNumber","l_dnaReplaceNumber","l_dnaGetCount","l_dnaSetCount","l_dnaGetDValue","l_dnaGetIValue","l_dnaSetValue","l_dnaShiftValue","l_dnaGetIArray","l_dnaGetDArray","l_dnaGetRefcount","l_dnaChangeRefcount","l_dnaGetParameters","l_dnaSetParameters","l_dnaCopyParameters","l_dnaRead","l_dnaReadStream","l_dnaWrite","l_dnaWriteStream","l_dnaaCreate","l_dnaaCreateFull","l_dnaaTruncate","l_dnaaDestroy","l_dnaaAddDna","l_dnaaGetCount","l_dnaaGetDnaCount","l_dnaaGetNumberCount","l_dnaaGetDna","l_dnaaReplaceDna","l_dnaaGetValue","l_dnaaAddNumber","l_dnaaRead","l_dnaaReadStream","l_dnaaWrite","l_dnaaWriteStream","l_dnaJoin","l_dnaaFlattenToDna","l_dnaConvertToNuma","numaConvertToDna","l_dnaUnionByAset","l_dnaRemoveDupsByAset","l_dnaIntersectionByAset","l_asetCreateFromDna","l_dnaDiffAdjValues","l_dnaHashCreate","l_dnaHashDestroy","l_dnaHashGetCount","l_dnaHashGetTotalCount","l_dnaHashGetDna","l_dnaHashAdd","l_dnaHashCreateFromDna","l_dnaRemoveDupsByHash","l_dnaMakeHistoByHash","l_dnaIntersectionByHash","l_dnaFindValByHash","pixMorphDwa_2","pixFMorphopGen_2","fmorphopgen_low_2","pixSobelEdgeFilter","pixTwoSidedEdgeFilter","pixMeasureEdgeSmoothness","pixGetEdgeProfile","pixGetLastOffPixelInRun","pixGetLastOnPixelInRun","encodeBase64","decodeBase64","encodeAscii85","decodeAscii85","reformatPacked64","pixGammaTRC","pixGammaTRCMasked","pixGammaTRCWithAlpha","numaGammaTRC","pixContrastTRC","pixContrastTRCMasked","numaContrastTRC","pixEqualizeTRC","numaEqualizeTRC","pixTRCMap","pixTRCMapGeneral","pixUnsharpMasking","pixUnsharpMaskingGray","pixUnsharpMaskingFast","pixUnsharpMaskingGrayFast","pixUnsharpMaskingGray1D","pixUnsharpMaskingGray2D","pixModifyHue","pixModifySaturation","pixMeasureSaturation","pixModifyBrightness","pixMosaicColorShiftRGB","pixColorShiftRGB","pixDarkenGray","pixMultConstantColor","pixMultMatrixColor","pixHalfEdgeByBandpass","fhmtautogen","fhmtautogen1","fhmtautogen2","pixHMTDwa_1","pixFHMTGen_1","fhmtgen_low_1","pixItalicWords","pixOrientCorrect","pixOrientDetect","makeOrientDecision","pixUpDownDetect","pixUpDownDetectGeneral","pixOrientDetectDwa","pixUpDownDetectDwa","pixUpDownDetectGeneralDwa","pixMirrorDetect","pixMirrorDetectDwa","pixFlipFHMTGen","fmorphautogen","fmorphautogen1","fmorphautogen2","pixMorphDwa_1","pixFMorphopGen_1","fmorphopgen_low_1","fpixCreate","fpixCreateTemplate","fpixClone","fpixCopy","fpixResizeImageData","fpixDestroy","fpixGetDimensions","fpixSetDimensions","fpixGetWpl","fpixSetWpl","fpixGetRefcount","fpixChangeRefcount","fpixGetResolution","fpixSetResolution","fpixCopyResolution","fpixGetData","fpixSetData","fpixGetPixel","fpixSetPixel","fpixaCreate","fpixaCopy","fpixaDestroy","fpixaAddFPix","fpixaGetCount","fpixaChangeRefcount","fpixaGetFPix","fpixaGetFPixDimensions","fpixaGetData","fpixaGetPixel","fpixaSetPixel","dpixCreate","dpixCreateTemplate","dpixClone","dpixCopy","dpixResizeImageData","dpixDestroy","dpixGetDimensions","dpixSetDimensions","dpixGetWpl","dpixSetWpl","dpixGetRefcount","dpixChangeRefcount","dpixGetResolution","dpixSetResolution","dpixCopyResolution","dpixGetData","dpixSetData","dpixGetPixel","dpixSetPixel","fpixRead","fpixReadStream","fpixReadMem","fpixWrite","fpixWriteStream","fpixWriteMem","fpixEndianByteSwap","dpixRead","dpixReadStream","dpixReadMem","dpixWrite","dpixWriteStream","dpixWriteMem","dpixEndianByteSwap","fpixPrintStream","pixConvertToFPix","pixConvertToDPix","fpixConvertToPix","fpixDisplayMaxDynamicRange","fpixConvertToDPix","dpixConvertToPix","dpixConvertToFPix","fpixGetMin","fpixGetMax","dpixGetMin","dpixGetMax","fpixScaleByInteger","dpixScaleByInteger","fpixLinearCombination","fpixAddMultConstant","dpixLinearCombination","dpixAddMultConstant","fpixSetAllArbitrary","dpixSetAllArbitrary","fpixAddBorder","fpixRemoveBorder","fpixAddMirroredBorder","fpixAddContinuedBorder","fpixAddSlopeBorder","fpixRasterop","fpixRotateOrth","fpixRotate180","fpixRotate90","fpixFlipLR","fpixFlipTB","fpixAffinePta","fpixAffine","fpixProjectivePta","fpixProjective","linearInterpolatePixelFloat","fpixThresholdToPix","pixComponentFunction","pixReadStreamGif","pixReadMemGif","pixWriteStreamGif","pixWriteMemGif","gplotCreate","gplotDestroy","gplotAddPlot","gplotSetScaling","gplotMakeOutputPix","gplotMakeOutput","gplotGenCommandFile","gplotGenDataFiles","gplotSimple1","gplotSimple2","gplotSimpleN","gplotSimplePix1","gplotSimplePix2","gplotSimplePixN","gplotSimpleXY1","gplotSimpleXY2","gplotSimpleXYN","gplotGeneralPix1","gplotGeneralPix2","gplotGeneralPixN","gplotRead","gplotWrite","generatePtaLine","generatePtaWideLine","generatePtaBox","generatePtaBoxa","generatePtaHashBox","generatePtaHashBoxa","generatePtaaBoxa","generatePtaaHashBoxa","generatePtaPolyline","generatePtaGrid","convertPtaLineTo4cc","generatePtaFilledCircle","generatePtaFilledSquare","generatePtaLineFromPt","locatePtRadially","pixRenderPlotFromNuma","makePlotPtaFromNuma","pixRenderPlotFromNumaGen","makePlotPtaFromNumaGen","pixRenderPta","pixRenderPtaArb","pixRenderPtaBlend","pixRenderLine","pixRenderLineArb","pixRenderLineBlend","pixRenderBox","pixRenderBoxArb","pixRenderBoxBlend","pixRenderBoxa","pixRenderBoxaArb","pixRenderBoxaBlend","pixRenderHashBox","pixRenderHashBoxArb","pixRenderHashBoxBlend","pixRenderHashMaskArb","pixRenderHashBoxa","pixRenderHashBoxaArb","pixRenderHashBoxaBlend","pixRenderPolyline","pixRenderPolylineArb","pixRenderPolylineBlend","pixRenderGridArb","pixRenderRandomCmapPtaa","pixRenderPolygon","pixFillPolygon","pixRenderContours","fpixAutoRenderContours","fpixRenderContours","pixGeneratePtaBoundary","pixErodeGray","pixDilateGray","pixOpenGray","pixCloseGray","pixErodeGray3","pixDilateGray3","pixOpenGray3","pixCloseGray3","pixDitherToBinary","pixDitherToBinarySpec","ditherToBinaryLineLow","pixThresholdToBinary","thresholdToBinaryLineLow","pixVarThresholdToBinary","pixAdaptThresholdToBinary","pixAdaptThresholdToBinaryGen","pixGenerateMaskByValue","pixGenerateMaskByBand","pixDitherTo2bpp","pixDitherTo2bppSpec","pixThresholdTo2bpp","pixThresholdTo4bpp","pixThresholdOn8bpp","pixThresholdGrayArb","makeGrayQuantIndexTable","makeGrayQuantTableArb","pixGenerateMaskByBand32","pixGenerateMaskByDiscr32","pixGrayQuantFromHisto","pixGrayQuantFromCmap","lheapCreate","lheapDestroy","lheapAdd","lheapRemove","lheapGetCount","lheapGetElement","lheapSort","lheapSortStrictOrder","lheapPrint","jbRankHausInit","jbCorrelationInit","jbCorrelationInitWithoutComponents","jbAddPages","jbAddPage","jbAddPageComponents","jbClassifyRankHaus","pixHaustest","pixRankHaustest","jbClassifyCorrelation","jbGetComponents","pixWordMaskByDilation","pixWordBoxesByDilation","jbAccumulateComposites","jbTemplatesFromComposites","jbClasserCreate","jbClasserDestroy","jbDataSave","jbDataDestroy","jbDataWrite","jbDataRead","jbDataRender","jbGetULCorners","jbGetLLCorners","readHeaderJp2k","freadHeaderJp2k","readHeaderMemJp2k","fgetJp2kResolution","pixReadJp2k","pixReadStreamJp2k","pixWriteJp2k","pixWriteStreamJp2k","pixReadMemJp2k","pixWriteMemJp2k","pixReadJpeg","pixReadStreamJpeg","readHeaderJpeg","freadHeaderJpeg","fgetJpegResolution","fgetJpegComment","pixWriteJpeg","pixWriteStreamJpeg","pixReadMemJpeg","readHeaderMemJpeg","readResolutionMemJpeg","pixWriteMemJpeg","pixSetChromaSampling","kernelCreate","kernelDestroy","kernelCopy","kernelGetElement","kernelSetElement","kernelGetParameters","kernelSetOrigin","kernelGetSum","kernelGetMinMax","kernelNormalize","kernelInvert","create2dFloatArray","kernelRead","kernelReadStream","kernelWrite","kernelWriteStream","kernelCreateFromString","kernelCreateFromFile","kernelCreateFromPix","kernelDisplayInPix","parseStringForNumbers","makeFlatKernel","makeGaussianKernel","makeGaussianKernelSep","makeDoGKernel","getImagelibVersions","listDestroy","listAddToHead","listAddToTail","listInsertBefore","listInsertAfter","listRemoveElement","listRemoveFromHead","listRemoveFromTail","listFindElement","listFindTail","listGetCount","listReverse","listJoin","l_amapCreate","l_amapFind","l_amapInsert","l_amapDelete","l_amapDestroy","l_amapGetFirst","l_amapGetNext","l_amapGetLast","l_amapGetPrev","l_amapSize","l_asetCreate","l_asetFind","l_asetInsert","l_asetDelete","l_asetDestroy","l_asetGetFirst","l_asetGetNext","l_asetGetLast","l_asetGetPrev","l_asetSize","generateBinaryMaze","pixSearchBinaryMaze","pixSearchGrayMaze","pixDilate","pixErode","pixHMT","pixOpen","pixClose","pixCloseSafe","pixOpenGeneralized","pixCloseGeneralized","pixDilateBrick","pixErodeBrick","pixOpenBrick","pixCloseBrick","pixCloseSafeBrick","selectComposableSels","selectComposableSizes","pixDilateCompBrick","pixErodeCompBrick","pixOpenCompBrick","pixCloseCompBrick","pixCloseSafeCompBrick","resetMorphBoundaryCondition","getMorphBorderPixelColor","pixExtractBoundary","pixMorphSequenceMasked","pixMorphSequenceByComponent","pixaMorphSequenceByComponent","pixMorphSequenceByRegion","pixaMorphSequenceByRegion","pixUnionOfMorphOps","pixIntersectionOfMorphOps","pixSelectiveConnCompFill","pixRemoveMatchedPattern","pixDisplayMatchedPattern","pixaExtendByMorph","pixaExtendByScaling","pixSeedfillMorph","pixRunHistogramMorph","pixTophat","pixHDome","pixFastTophat","pixMorphGradient","pixaCentroids","pixCentroid","pixDilateBrickDwa","pixErodeBrickDwa","pixOpenBrickDwa","pixCloseBrickDwa","pixDilateCompBrickDwa","pixErodeCompBrickDwa","pixOpenCompBrickDwa","pixCloseCompBrickDwa","pixDilateCompBrickExtendDwa","pixErodeCompBrickExtendDwa","pixOpenCompBrickExtendDwa","pixCloseCompBrickExtendDwa","getExtendedCompositeParameters","pixMorphSequence","pixMorphCompSequence","pixMorphSequenceDwa","pixMorphCompSequenceDwa","morphSequenceVerify","pixGrayMorphSequence","pixColorMorphSequence","numaCreate","numaCreateFromIArray","numaCreateFromFArray","numaCreateFromString","numaDestroy","numaCopy","numaClone","numaEmpty","numaAddNumber","numaInsertNumber","numaRemoveNumber","numaReplaceNumber","numaGetCount","numaSetCount","numaGetFValue","numaGetIValue","numaSetValue","numaShiftValue","numaGetIArray","numaGetFArray","numaGetRefcount","numaChangeRefcount","numaGetParameters","numaSetParameters","numaCopyParameters","numaConvertToSarray","numaRead","numaReadStream","numaReadMem","numaWriteDebug","numaWrite","numaWriteStream","numaWriteStderr","numaWriteMem","numaaCreate","numaaCreateFull","numaaTruncate","numaaDestroy","numaaAddNuma","numaaGetCount","numaaGetNumaCount","numaaGetNumberCount","numaaGetPtrArray","numaaGetNuma","numaaReplaceNuma","numaaGetValue","numaaAddNumber","numaaRead","numaaReadStream","numaaReadMem","numaaWrite","numaaWriteStream","numaaWriteMem","numaArithOp","numaLogicalOp","numaInvert","numaSimilar","numaAddToNumber","numaGetMin","numaGetMax","numaGetSum","numaGetPartialSums","numaGetSumOnInterval","numaHasOnlyIntegers","numaSubsample","numaMakeDelta","numaMakeSequence","numaMakeConstant","numaMakeAbsValue","numaAddBorder","numaAddSpecifiedBorder","numaRemoveBorder","numaCountNonzeroRuns","numaGetNonzeroRange","numaGetCountRelativeToZero","numaClipToInterval","numaMakeThresholdIndicator","numaUniformSampling","numaReverse","numaLowPassIntervals","numaThresholdEdges","numaGetSpanValues","numaGetEdgeValues","numaInterpolateEqxVal","numaInterpolateArbxVal","numaInterpolateEqxInterval","numaInterpolateArbxInterval","numaFitMax","numaDifferentiateInterval","numaIntegrateInterval","numaSortGeneral","numaSortAutoSelect","numaSortIndexAutoSelect","numaChooseSortType","numaSort","numaBinSort","numaGetSortIndex","numaGetBinSortIndex","numaSortByIndex","numaIsSorted","numaSortPair","numaInvertMap","numaPseudorandomSequence","numaRandomPermutation","numaGetRankValue","numaGetMedian","numaGetBinnedMedian","numaGetMeanDevFromMedian","numaGetMedianDevFromMedian","numaGetMode","numaJoin","numaaJoin","numaaFlattenToNuma","numaErode","numaDilate","numaOpen","numaClose","numaTransform","numaSimpleStats","numaWindowedStats","numaWindowedMean","numaWindowedMeanSquare","numaWindowedVariance","numaWindowedMedian","numaConvertToInt","numaMakeHistogram","numaMakeHistogramAuto","numaMakeHistogramClipped","numaRebinHistogram","numaNormalizeHistogram","numaGetStatsUsingHistogram","numaGetHistogramStats","numaGetHistogramStatsOnInterval","numaMakeRankFromHistogram","numaHistogramGetRankFromVal","numaHistogramGetValFromRank","numaDiscretizeRankAndIntensity","numaGetRankBinValues","numaSplitDistribution","grayHistogramsToEMD","numaEarthMoverDistance","grayInterHistogramStats","numaFindPeaks","numaFindExtrema","numaFindLocForThreshold","numaCountReversals","numaSelectCrossingThreshold","numaCrossingsByThreshold","numaCrossingsByPeaks","numaEvalBestHaarParameters","numaEvalHaarSum","genConstrainedNumaInRange","pixGetRegionsBinary","pixGenHalftoneMask","pixGenerateHalftoneMask","pixGenTextlineMask","pixGenTextblockMask","pixFindPageForeground","pixSplitIntoCharacters","pixSplitComponentWithProfile","pixExtractTextlines","pixExtractRawTextlines","pixCountTextColumns","pixDecideIfText","pixFindThreshFgExtent","pixDecideIfTable","pixPrepare1bpp","pixEstimateBackground","pixFindLargeRectangles","pixFindLargestRectangle","pixFindRectangleInCC","pixAutoPhotoinvert","pixSetSelectCmap","pixColorGrayRegionsCmap","pixColorGrayCmap","pixColorGrayMaskedCmap","addColorizedGrayToCmap","pixSetSelectMaskedCmap","pixSetMaskedCmap","parseForProtos","partifyFiles","partifyPixac","boxaGetWhiteblocks","boxaPruneSortedOnOverlap","convertFilesToPdf","saConvertFilesToPdf","saConvertFilesToPdfData","selectDefaultPdfEncoding","convertUnscaledFilesToPdf","saConvertUnscaledFilesToPdf","saConvertUnscaledFilesToPdfData","convertUnscaledToPdfData","pixaConvertToPdf","pixaConvertToPdfData","convertToPdf","convertImageDataToPdf","convertToPdfData","convertImageDataToPdfData","pixConvertToPdf","pixWriteStreamPdf","pixWriteMemPdf","convertSegmentedFilesToPdf","convertNumberedMasksToBoxaa","convertToPdfSegmented","pixConvertToPdfSegmented","convertToPdfDataSegmented","pixConvertToPdfDataSegmented","concatenatePdf","saConcatenatePdf","ptraConcatenatePdf","concatenatePdfToData","saConcatenatePdfToData","pixConvertToPdfData","ptraConcatenatePdfToData","convertTiffMultipageToPdf","l_generateCIDataForPdf","l_generateFlateDataPdf","l_generateJpegData","l_generateJpegDataMem","l_generateCIData","pixGenerateCIData","l_generateFlateData","l_generateG4Data","cidConvertToPdfData","l_CIDataDestroy","l_pdfSetG4ImageMask","l_pdfSetDateAndVersion","setPixMemoryManager","pixCreate","pixCreateNoInit","pixCreateTemplate","pixCreateTemplateNoInit","pixCreateWithCmap","pixCreateHeader","pixClone","pixDestroy","pixCopy","pixResizeImageData","pixCopyColormap","pixSizesEqual","pixTransferAllData","pixSwapAndDestroy","pixGetWidth","pixSetWidth","pixGetHeight","pixSetHeight","pixGetDepth","pixSetDepth","pixGetDimensions","pixSetDimensions","pixCopyDimensions","pixGetSpp","pixSetSpp","pixCopySpp","pixGetWpl","pixSetWpl","pixGetRefcount","pixChangeRefcount","pixGetXRes","pixSetXRes","pixGetYRes","pixSetYRes","pixGetResolution","pixSetResolution","pixCopyResolution","pixScaleResolution","pixGetInputFormat","pixSetInputFormat","pixCopyInputFormat","pixSetSpecial","pixGetText","pixSetText","pixAddText","pixCopyText","pixGetColormap","pixSetColormap","pixDestroyColormap","pixGetData","pixSetData","pixExtractData","pixFreeData","pixGetLinePtrs","pixPrintStreamInfo","pixGetPixel","pixSetPixel","pixGetRGBPixel","pixSetRGBPixel","pixSetCmapPixel","pixGetRandomPixel","pixClearPixel","pixFlipPixel","setPixelLow","pixGetBlackOrWhiteVal","pixClearAll","pixSetAll","pixSetAllGray","pixSetAllArbitrary","pixSetBlackOrWhite","pixSetComponentArbitrary","pixClearInRect","pixSetInRect","pixSetInRectArbitrary","pixBlendInRect","pixSetPadBits","pixSetPadBitsBand","pixSetOrClearBorder","pixSetBorderVal","pixSetBorderRingVal","pixSetMirroredBorder","pixCopyBorder","pixAddBorder","pixAddBlackOrWhiteBorder","pixAddBorderGeneral","pixRemoveBorder","pixRemoveBorderGeneral","pixRemoveBorderToSize","pixAddMirroredBorder","pixAddRepeatedBorder","pixAddMixedBorder","pixAddContinuedBorder","pixShiftAndTransferAlpha","pixDisplayLayersRGBA","pixCreateRGBImage","pixGetRGBComponent","pixSetRGBComponent","pixGetRGBComponentCmap","pixCopyRGBComponent","composeRGBPixel","composeRGBAPixel","extractRGBValues","extractRGBAValues","extractMinMaxComponent","pixGetRGBLine","setLineDataVal","pixEndianByteSwapNew","pixEndianByteSwap","lineEndianByteSwap","pixEndianTwoByteSwapNew","pixEndianTwoByteSwap","pixGetRasterData","pixAlphaIsOpaque","pixSetupByteProcessing","pixCleanupByteProcessing","l_setAlphaMaskBorder","pixSetMasked","pixSetMaskedGeneral","pixCombineMasked","pixCombineMaskedGeneral","pixPaintThroughMask","pixCopyWithBoxa","pixPaintSelfThroughMask","pixMakeMaskFromVal","pixMakeMaskFromLUT","pixMakeArbMaskFromRGB","pixSetUnderTransparency","pixMakeAlphaFromMask","pixGetColorNearMaskBoundary","pixDisplaySelectedPixels","pixInvert","pixOr","pixAnd","pixXor","pixSubtract","pixZero","pixForegroundFraction","pixaCountPixels","pixCountPixels","pixCountPixelsInRect","pixCountByRow","pixCountByColumn","pixCountPixelsByRow","pixCountPixelsByColumn","pixCountPixelsInRow","pixGetMomentByColumn","pixThresholdPixelSum","makePixelSumTab8","makePixelCentroidTab8","pixAverageByRow","pixAverageByColumn","pixAverageInRect","pixAverageInRectRGB","pixVarianceByRow","pixVarianceByColumn","pixVarianceInRect","pixAbsDiffByRow","pixAbsDiffByColumn","pixAbsDiffInRect","pixAbsDiffOnLine","pixCountArbInRect","pixMirroredTiling","pixFindRepCloseTile","pixGetGrayHistogram","pixGetGrayHistogramMasked","pixGetGrayHistogramInRect","pixGetGrayHistogramTiled","pixGetColorHistogram","pixGetColorHistogramMasked","pixGetCmapHistogram","pixGetCmapHistogramMasked","pixGetCmapHistogramInRect","pixCountRGBColors","pixGetColorAmapHistogram","amapGetCountForColor","pixGetRankValue","pixGetRankValueMaskedRGB","pixGetRankValueMasked","pixGetPixelAverage","pixGetPixelStats","pixGetAverageMaskedRGB","pixGetAverageMasked","pixGetAverageTiledRGB","pixGetAverageTiled","pixRowStats","pixColumnStats","pixGetRangeValues","pixGetExtremeValue","pixGetMaxValueInRect","pixGetBinnedComponentRange","pixGetRankColorArray","pixGetBinnedColor","pixDisplayColorArray","pixRankBinByStrip","pixaGetAlignedStats","pixaExtractColumnFromEachPix","pixGetRowStats","pixGetColumnStats","pixSetPixelColumn","pixThresholdForFgBg","pixSplitDistributionFgBg","pixaFindDimensions","pixFindAreaPerimRatio","pixaFindPerimToAreaRatio","pixFindPerimToAreaRatio","pixaFindPerimSizeRatio","pixFindPerimSizeRatio","pixaFindAreaFraction","pixFindAreaFraction","pixaFindAreaFractionMasked","pixFindAreaFractionMasked","pixaFindWidthHeightRatio","pixaFindWidthHeightProduct","pixFindOverlapFraction","pixFindRectangleComps","pixConformsToRectangle","pixClipRectangles","pixClipRectangle","pixClipMasked","pixCropToMatch","pixCropToSize","pixResizeToMatch","pixSelectComponentBySize","pixFilterComponentBySize","pixMakeSymmetricMask","pixMakeFrameMask","pixMakeCoveringOfRectangles","pixFractionFgInMask","pixClipToForeground","pixTestClipToForeground","pixClipBoxToForeground","pixScanForForeground","pixClipBoxToEdges","pixScanForEdge","pixExtractOnLine","pixAverageOnLine","pixAverageIntensityProfile","pixReversalProfile","pixWindowedVarianceOnLine","pixMinMaxNearLine","pixRankRowTransform","pixRankColumnTransform","pixaCreate","pixaCreateFromPix","pixaCreateFromBoxa","pixaSplitPix","pixaDestroy","pixaCopy","pixaAddPix","pixaAddBox","pixaExtendArrayToSize","pixaGetCount","pixaChangeRefcount","pixaGetPix","pixaGetPixDimensions","pixaGetBoxa","pixaGetBoxaCount","pixaGetBox","pixaGetBoxGeometry","pixaSetBoxa","pixaGetPixArray","pixaVerifyDepth","pixaVerifyDimensions","pixaIsFull","pixaCountText","pixaSetText","pixaGetLinePtrs","pixaWriteStreamInfo","pixaReplacePix","pixaInsertPix","pixaRemovePix","pixaRemovePixAndSave","pixaRemoveSelected","pixaInitFull","pixaClear","pixaJoin","pixaInterleave","pixaaJoin","pixaaCreate","pixaaCreateFromPixa","pixaaDestroy","pixaaAddPixa","pixaaExtendArray","pixaaAddPix","pixaaAddBox","pixaaGetCount","pixaaGetPixa","pixaaGetBoxa","pixaaGetPix","pixaaVerifyDepth","pixaaVerifyDimensions","pixaaIsFull","pixaaInitFull","pixaaReplacePixa","pixaaClear","pixaaTruncate","pixaRead","pixaReadStream","pixaReadMem","pixaWriteDebug","pixaWrite","pixaWriteStream","pixaWriteMem","pixaReadBoth","pixaaReadFromFiles","pixaaRead","pixaaReadStream","pixaaReadMem","pixaaWrite","pixaaWriteStream","pixaaWriteMem","pixaccCreate","pixaccCreateFromPix","pixaccDestroy","pixaccFinal","pixaccGetPix","pixaccGetOffset","pixaccAdd","pixaccSubtract","pixaccMultConst","pixaccMultConstAccumulate","pixSelectBySize","pixaSelectBySize","pixaMakeSizeIndicator","pixSelectByPerimToAreaRatio","pixaSelectByPerimToAreaRatio","pixSelectByPerimSizeRatio","pixaSelectByPerimSizeRatio","pixSelectByAreaFraction","pixaSelectByAreaFraction","pixSelectByWidthHeightRatio","pixaSelectByWidthHeightRatio","pixaSelectByNumConnComp","pixaSelectWithIndicator","pixRemoveWithIndicator","pixAddWithIndicator","pixaSelectWithString","pixaRenderComponent","pixaSort","pixaBinSort","pixaSortByIndex","pixaSort2dByIndex","pixaSelectRange","pixaaSelectRange","pixaaScaleToSize","pixaaScaleToSizeVar","pixaScaleToSize","pixaScaleToSizeRel","pixaScale","pixaScaleBySampling","pixaRotate","pixaRotateOrth","pixaTranslate","pixaAddBorderGeneral","pixaaFlattenToPixa","pixaaSizeRange","pixaSizeRange","pixaClipToPix","pixaClipToForeground","pixaGetRenderingDepth","pixaHasColor","pixaAnyColormaps","pixaGetDepthInfo","pixaConvertToSameDepth","pixaEqual","pixaSetFullSizeBoxa","pixaDisplay","pixaDisplayRandomCmap","pixaDisplayLinearly","pixaDisplayOnLattice","pixaDisplayUnsplit","pixaDisplayTiled","pixaDisplayTiledInRows","pixaDisplayTiledInColumns","pixaDisplayTiledAndScaled","pixaDisplayTiledWithText","pixaDisplayTiledByIndex","pixaaDisplay","pixaaDisplayByPixa","pixaaDisplayTiledAndScaled","pixaConvertTo1","pixaConvertTo8","pixaConvertTo8Colormap","pixaConvertTo32","pixaConstrainedSelect","pixaSelectToPdf","pixaMakeFromTiledPixa","pixaMakeFromTiledPix","pixGetTileCount","pixaDisplayMultiTiled","pixaSplitIntoFiles","convertToNUpFiles","convertToNUpPixa","pixaConvertToNUpPixa","pixaCompareInPdf","pmsCreate","pmsDestroy","pmsCustomAlloc","pmsCustomDealloc","pmsGetAlloc","pmsGetLevelForAlloc","pmsGetLevelForDealloc","pmsLogInfo","pixAddConstantGray","pixMultConstantGray","pixAddGray","pixSubtractGray","pixMultiplyGray","pixThresholdToValue","pixInitAccumulate","pixFinalAccumulate","pixFinalAccumulateThreshold","pixAccumulate","pixMultConstAccumulate","pixAbsDifference","pixAddRGB","pixMinOrMax","pixMaxDynamicRange","pixMaxDynamicRangeRGB","linearScaleRGBVal","logScaleRGBVal","makeLogBase2Tab","getLogBase2","pixcompCreateFromPix","pixcompCreateFromString","pixcompCreateFromFile","pixcompDestroy","pixcompCopy","pixcompGetDimensions","pixcompGetParameters","pixcompDetermineFormat","pixCreateFromPixcomp","pixacompCreate","pixacompCreateWithInit","pixacompCreateFromPixa","pixacompCreateFromFiles","pixacompCreateFromSA","pixacompDestroy","pixacompAddPix","pixacompAddPixcomp","pixacompReplacePix","pixacompReplacePixcomp","pixacompAddBox","pixacompGetCount","pixacompGetPixcomp","pixacompGetPix","pixacompGetPixDimensions","pixacompGetBoxa","pixacompGetBoxaCount","pixacompGetBox","pixacompGetBoxGeometry","pixacompGetOffset","pixacompSetOffset","pixaCreateFromPixacomp","pixacompJoin","pixacompInterleave","pixacompRead","pixacompReadStream","pixacompReadMem","pixacompWrite","pixacompWriteStream","pixacompWriteMem","pixacompConvertToPdf","pixacompConvertToPdfData","pixacompFastConvertToPdfData","pixacompWriteStreamInfo","pixcompWriteStreamInfo","pixacompDisplayTiledAndScaled","pixacompWriteFiles","pixcompWriteFile","pixThreshold8","pixRemoveColormapGeneral","pixRemoveColormap","pixAddGrayColormap8","pixAddMinimalGrayColormap8","pixConvertRGBToLuminance","pixConvertRGBToGray","pixConvertRGBToGrayFast","pixConvertRGBToGrayMinMax","pixConvertRGBToGraySatBoost","pixConvertRGBToGrayArb","pixConvertRGBToBinaryArb","pixConvertGrayToColormap","pixConvertGrayToColormap8","pixColorizeGray","pixConvertRGBToColormap","pixConvertCmapTo1","pixQuantizeIfFewColors","pixConvert16To8","pixConvertGrayToFalseColor","pixUnpackBinary","pixConvert1To16","pixConvert1To32","pixConvert1To2Cmap","pixConvert1To2","pixConvert1To4Cmap","pixConvert1To4","pixConvert1To8Cmap","pixConvert1To8","pixConvert2To8","pixConvert4To8","pixConvert8To16","pixConvertTo2","pixConvert8To2","pixConvertTo4","pixConvert8To4","pixConvertTo1Adaptive","pixConvertTo1","pixConvertTo1BySampling","pixConvertTo8","pixConvertTo8BySampling","pixConvertTo8Colormap","pixConvertTo16","pixConvertTo32","pixConvertTo32BySampling","pixConvert8To32","pixConvertTo8Or32","pixConvert24To32","pixConvert32To24","pixConvert32To16","pixConvert32To8","pixRemoveAlpha","pixAddAlphaTo1bpp","pixConvertLossless","pixConvertForPSWrap","pixConvertToSubpixelRGB","pixConvertGrayToSubpixelRGB","pixConvertColorToSubpixelRGB","l_setNeutralBoostVal","pixConnCompTransform","pixConnCompAreaTransform","pixConnCompIncrInit","pixConnCompIncrAdd","pixGetSortedNeighborValues","pixLocToColorTransform","pixTilingCreate","pixTilingDestroy","pixTilingGetCount","pixTilingGetSize","pixTilingGetTile","pixTilingNoStripOnPaint","pixTilingPaintTile","pixReadStreamPng","readHeaderPng","freadHeaderPng","readHeaderMemPng","fgetPngResolution","isPngInterlaced","fgetPngColormapInfo","pixWritePng","pixWriteStreamPng","pixSetZlibCompression","l_pngSetReadStrip16To8","pixReadMemPng","pixWriteMemPng","pixReadStreamPnm","readHeaderPnm","freadHeaderPnm","pixWriteStreamPnm","pixWriteStreamAsciiPnm","pixWriteStreamPam","pixReadMemPnm","readHeaderMemPnm","pixWriteMemPnm","pixWriteMemPam","pixProjectiveSampledPta","pixProjectiveSampled","pixProjectivePta","pixProjective","pixProjectivePtaColor","pixProjectiveColor","pixProjectivePtaGray","pixProjectiveGray","pixProjectivePtaWithAlpha","getProjectiveXformCoeffs","projectiveXformSampledPt","projectiveXformPt","convertFilesToPS","sarrayConvertFilesToPS","convertFilesFittedToPS","sarrayConvertFilesFittedToPS","writeImageCompressedToPSFile","convertSegmentedPagesToPS","pixWriteSegmentedPageToPS","pixWriteMixedToPS","convertToPSEmbed","pixaWriteCompressedToPS","pixWriteCompressedToPS","pixWritePSEmbed","pixWriteStreamPS","pixWriteStringPS","generateUncompressedPS","convertJpegToPSEmbed","convertJpegToPS","convertG4ToPSEmbed","convertG4ToPS","convertTiffMultipageToPS","convertFlateToPSEmbed","convertFlateToPS","pixWriteMemPS","getResLetterPage","getResA4Page","l_psWriteBoundingBox","ptaCreate","ptaCreateFromNuma","ptaDestroy","ptaCopy","ptaCopyRange","ptaClone","ptaEmpty","ptaAddPt","ptaInsertPt","ptaRemovePt","ptaGetRefcount","ptaChangeRefcount","ptaGetCount","ptaGetPt","ptaGetIPt","ptaSetPt","ptaGetArrays","ptaRead","ptaReadStream","ptaReadMem","ptaWriteDebug","ptaWrite","ptaWriteStream","ptaWriteMem","ptaaCreate","ptaaDestroy","ptaaAddPta","ptaaGetCount","ptaaGetPta","ptaaGetPt","ptaaInitFull","ptaaReplacePta","ptaaAddPt","ptaaTruncate","ptaaRead","ptaaReadStream","ptaaReadMem","ptaaWriteDebug","ptaaWrite","ptaaWriteStream","ptaaWriteMem","ptaSubsample","ptaJoin","ptaaJoin","ptaReverse","ptaTranspose","ptaCyclicPerm","ptaSelectRange","ptaGetBoundingRegion","ptaGetRange","ptaGetInsideBox","pixFindCornerPixels","ptaContainsPt","ptaTestIntersection","ptaTransform","ptaPtInsidePolygon","l_angleBetweenVectors","ptaGetMinMax","ptaSelectByValue","ptaCropToMask","ptaGetLinearLSF","ptaGetQuadraticLSF","ptaGetCubicLSF","ptaGetQuarticLSF","ptaNoisyLinearLSF","ptaNoisyQuadraticLSF","applyLinearFit","applyQuadraticFit","applyCubicFit","applyQuarticFit","pixPlotAlongPta","ptaGetPixelsFromPix","pixGenerateFromPta","ptaGetBoundaryPixels","ptaaGetBoundaryPixels","ptaaIndexLabeledPixels","ptaGetNeighborPixLocs","numaConvertToPta1","numaConvertToPta2","ptaConvertToNuma","pixDisplayPta","pixDisplayPtaaPattern","pixDisplayPtaPattern","ptaReplicatePattern","pixDisplayPtaa","ptaSort","ptaGetSortIndex","ptaSortByIndex","ptaaSortByIndex","ptaGetRankValue","ptaSort2d","ptaEqual","ptaUnionByAset","ptaRemoveDupsByAset","ptaIntersectionByAset","l_asetCreateFromPta","ptaUnionByHash","ptaRemoveDupsByHash","ptaIntersectionByHash","ptaFindPtByHash","l_dnaHashCreateFromPta","ptraCreate","ptraDestroy","ptraAdd","ptraInsert","ptraRemove","ptraRemoveLast","ptraReplace","ptraSwap","ptraCompactArray","ptraReverse","ptraJoin","ptraGetMaxIndex","ptraGetActualCount","ptraGetPtrToItem","ptraaCreate","ptraaDestroy","ptraaGetSize","ptraaInsertPtra","ptraaGetPtra","ptraaFlattenToPtra","pixQuadtreeMean","pixQuadtreeVariance","pixMeanInRectangle","pixVarianceInRectangle","boxaaQuadtreeRegions","quadtreeGetParent","quadtreeGetChildren","quadtreeMaxLevels","fpixaDisplayQuadtree","lqueueCreate","lqueueDestroy","lqueueAdd","lqueueRemove","lqueueGetCount","lqueuePrint","pixRankFilter","pixRankFilterRGB","pixRankFilterGray","pixMedianFilter","pixRankFilterWithScaling","l_rbtreeCreate","l_rbtreeLookup","l_rbtreeInsert","l_rbtreeDelete","l_rbtreeDestroy","l_rbtreeGetFirst","l_rbtreeGetNext","l_rbtreeGetLast","l_rbtreeGetPrev","l_rbtreeGetCount","l_rbtreePrint","pixProcessBarcodes","pixExtractBarcodes","pixReadBarcodes","pixReadBarcodeWidths","pixLocateBarcodes","pixDeskewBarcode","pixExtractBarcodeWidths1","pixExtractBarcodeWidths2","pixExtractBarcodeCrossings","numaQuantizeCrossingsByWidth","numaQuantizeCrossingsByWindow","pixaReadFiles","pixaReadFilesSA","pixRead","pixReadWithHint","pixReadIndexed","pixReadStream","pixReadHeader","findFileFormat","findFileFormatStream","findFileFormatBuffer","fileFormatIsTiff","pixReadMem","pixReadHeaderMem","writeImageFileInfo","ioFormatTest","recogCreateFromRecog","recogCreateFromPixa","recogCreateFromPixaNoFinish","recogCreate","recogDestroy","recogGetCount","recogSetParams","recogGetClassIndex","recogStringToIndex","recogGetClassString","l_convertCharstrToInt","recogRead","recogReadStream","recogReadMem","recogWrite","recogWriteStream","recogWriteMem","recogExtractPixa","recogDecode","recogCreateDid","recogDestroyDid","recogDidExists","recogGetDid","recogSetChannelParams","recogIdentifyMultiple","recogSplitIntoCharacters","recogCorrelationBestRow","recogCorrelationBestChar","recogIdentifyPixa","recogIdentifyPix","recogSkipIdentify","rchaDestroy","rchDestroy","rchaExtract","rchExtract","recogProcessToIdentify","recogExtractNumbers","showExtractNumbers","recogTrainLabeled","recogProcessLabeled","recogAddSample","recogModifyTemplate","recogAverageSamples","pixaAccumulateSamples","recogTrainingFinished","recogFilterPixaBySize","recogSortPixaByClass","recogRemoveOutliers1","pixaRemoveOutliers1","recogRemoveOutliers2","pixaRemoveOutliers2","recogTrainFromBoot","recogPadDigitTrainingSet","recogIsPaddingNeeded","recogAddDigitPadTemplates","recogMakeBootDigitRecog","recogMakeBootDigitTemplates","recogShowContent","recogDebugAverages","recogShowAverageTemplates","recogShowMatchesInRange","recogShowMatch","regTestSetup","regTestCleanup","regTestCompareValues","regTestCompareStrings","regTestComparePix","regTestCompareSimilarPix","regTestCheckFile","regTestCompareFiles","regTestWritePixAndCheck","regTestWriteDataAndCheck","regTestGenLocalFilename","pixRasterop","pixRasteropVip","pixRasteropHip","pixTranslate","pixRasteropIP","pixRasteropFullImage","rasteropUniLow","rasteropLow","rasteropVipLow","rasteropHipLow","pixRotate","pixEmbedForRotation","pixRotateBySampling","pixRotateBinaryNice","pixRotateWithAlpha","pixRotateAM","pixRotateAMColor","pixRotateAMGray","pixRotateAMCorner","pixRotateAMColorCorner","pixRotateAMGrayCorner","pixRotateAMColorFast","pixRotateOrth","pixRotate180","pixRotate90","pixFlipLR","pixFlipTB","pixRotateShear","pixRotate2Shear","pixRotate3Shear","pixRotateShearIP","pixRotateShearCenter","pixRotateShearCenterIP","pixStrokeWidthTransform","pixRunlengthTransform","pixFindHorizontalRuns","pixFindVerticalRuns","pixFindMaxRuns","pixFindMaxHorizontalRunOnLine","pixFindMaxVerticalRunOnLine","runlengthMembershipOnLine","makeMSBitLocTab","sarrayCreate","sarrayCreateInitialized","sarrayCreateWordsFromString","sarrayCreateLinesFromString","sarrayDestroy","sarrayCopy","sarrayClone","sarrayAddString","sarrayRemoveString","sarrayReplaceString","sarrayClear","sarrayGetCount","sarrayGetArray","sarrayGetString","sarrayGetRefcount","sarrayChangeRefcount","sarrayToString","sarrayToStringRange","sarrayJoin","sarrayAppendRange","sarrayPadToSameSize","sarrayConvertWordsToLines","sarraySplitString","sarraySelectBySubstring","sarraySelectByRange","sarrayParseRange","sarrayRead","sarrayReadStream","sarrayReadMem","sarrayWrite","sarrayWriteStream","sarrayWriteMem","sarrayAppend","getNumberedPathnamesInDirectory","getSortedPathnamesInDirectory","convertSortedToNumberedPathnames","getFilenamesInDirectory","sarraySort","sarraySortByIndex","stringCompareLexical","sarrayUnionByAset","sarrayRemoveDupsByAset","sarrayIntersectionByAset","l_asetCreateFromSarray","sarrayRemoveDupsByHash","sarrayIntersectionByHash","sarrayFindStringByHash","l_dnaHashCreateFromSarray","sarrayGenerateIntegers","sarrayLookupCSKV","pixScale","pixScaleToSizeRel","pixScaleToSize","pixScaleToResolution","pixScaleGeneral","pixScaleLI","pixScaleColorLI","pixScaleColor2xLI","pixScaleColor4xLI","pixScaleGrayLI","pixScaleGray2xLI","pixScaleGray4xLI","pixScaleGray2xLIThresh","pixScaleGray2xLIDither","pixScaleGray4xLIThresh","pixScaleGray4xLIDither","pixScaleBySampling","pixScaleBySamplingToSize","pixScaleByIntSampling","pixScaleRGBToGrayFast","pixScaleRGBToBinaryFast","pixScaleGrayToBinaryFast","pixScaleSmooth","pixScaleSmoothToSize","pixScaleRGBToGray2","pixScaleAreaMap","pixScaleAreaMap2","pixScaleAreaMapToSize","pixScaleBinary","pixScaleToGray","pixScaleToGrayFast","pixScaleToGray2","pixScaleToGray3","pixScaleToGray4","pixScaleToGray6","pixScaleToGray8","pixScaleToGray16","pixScaleToGrayMipmap","pixScaleMipmap","pixExpandReplicate","pixScaleGrayMinMax","pixScaleGrayMinMax2","pixScaleGrayRankCascade","pixScaleGrayRank2","pixScaleAndTransferAlpha","pixScaleWithAlpha","pixSeedfillBinary","pixSeedfillBinaryRestricted","pixHolesByFilling","pixFillClosedBorders","pixExtractBorderConnComps","pixRemoveBorderConnComps","pixFillBgFromBorder","pixFillHolesToBoundingRect","pixSeedfillGray","pixSeedfillGrayInv","pixSeedfillGraySimple","pixSeedfillGrayInvSimple","pixSeedfillGrayBasin","pixDistanceFunction","pixSeedspread","pixLocalExtrema","pixSelectedLocalExtrema","pixFindEqualValues","pixSelectMinInConnComp","pixRemoveSeededComponents","selaCreate","selaDestroy","selCreate","selDestroy","selCopy","selCreateBrick","selCreateComb","create2dIntArray","selaAddSel","selaGetCount","selaGetSel","selGetName","selSetName","selaFindSelByName","selGetElement","selSetElement","selGetParameters","selSetOrigin","selGetTypeAtOrigin","selaGetBrickName","selaGetCombName","getCompositeParameters","selaGetSelnames","selFindMaxTranslations","selRotateOrth","selaRead","selaReadStream","selRead","selReadStream","selaWrite","selaWriteStream","selWrite","selWriteStream","selCreateFromString","selPrintToString","selaCreateFromFile","selCreateFromPta","selCreateFromPix","selReadFromColorImage","selCreateFromColorPix","selaCreateFromColorPixa","selDisplayInPix","selaDisplayInPix","selaAddBasic","selaAddHitMiss","selaAddDwaLinear","selaAddDwaCombs","selaAddCrossJunctions","selaAddTJunctions","sela4ccThin","sela8ccThin","sela4and8ccThin","selMakePlusSign","pixGenerateSelWithRuns","pixGenerateSelRandom","pixGenerateSelBoundary","pixGetRunCentersOnLine","pixGetRunsOnLine","pixSubsampleBoundaryPixels","adjacentOnPixelInRaster","pixDisplayHitMissSel","pixHShear","pixVShear","pixHShearCorner","pixVShearCorner","pixHShearCenter","pixVShearCenter","pixHShearIP","pixVShearIP","pixHShearLI","pixVShearLI","pixDeskewBoth","pixDeskew","pixFindSkewAndDeskew","pixDeskewGeneral","pixFindSkew","pixFindSkewSweep","pixFindSkewSweepAndSearch","pixFindSkewSweepAndSearchScore","pixFindSkewSweepAndSearchScorePivot","pixFindSkewOrthogonalRange","pixFindDifferentialSquareSum","pixFindNormalizedSquareSum","pixReadStreamSpix","readHeaderSpix","freadHeaderSpix","sreadHeaderSpix","pixWriteStreamSpix","pixReadMemSpix","pixWriteMemSpix","pixSerializeToMemory","pixDeserializeFromMemory","lstackCreate","lstackDestroy","lstackAdd","lstackRemove","lstackGetCount","lstackPrint","strcodeCreate","strcodeCreateFromFile","strcodeGenerate","strcodeFinalize","l_getStructStrFromFile","pixFindStrokeLength","pixFindStrokeWidth","pixaFindStrokeWidth","pixaModifyStrokeWidth","pixModifyStrokeWidth","pixaSetStrokeWidth","pixSetStrokeWidth","sudokuReadFile","sudokuReadString","sudokuCreate","sudokuDestroy","sudokuSolve","sudokuTestUniqueness","sudokuGenerate","sudokuOutput","pixAddSingleTextblock","pixAddTextlines","pixSetTextblock","pixSetTextline","pixaAddTextNumber","pixaAddTextlines","pixaAddPixWithText","bmfGetLineStrings","bmfGetWordWidths","bmfGetStringWidth","splitStringToParagraphs","pixReadTiff","pixReadStreamTiff","pixWriteTiff","pixWriteTiffCustom","pixWriteStreamTiff","pixWriteStreamTiffWA","pixReadFromMultipageTiff","pixaReadMultipageTiff","pixaWriteMultipageTiff","writeMultipageTiff","writeMultipageTiffSA","fprintTiffInfo","tiffGetCount","getTiffResolution","readHeaderTiff","freadHeaderTiff","readHeaderMemTiff","findTiffCompression","extractG4DataFromFile","pixReadMemTiff","pixReadMemFromMultipageTiff","pixaReadMemMultipageTiff","pixaWriteMemMultipageTiff","pixWriteMemTiff","pixWriteMemTiffCustom","setMsgSeverity","returnErrorInt","returnErrorFloat","returnErrorPtr","leptSetStderrHandler","lept_stderr","filesAreIdentical","convertOnLittleEnd16","convertOnBigEnd16","convertOnLittleEnd32","convertOnBigEnd32","fileCorruptByDeletion","fileCorruptByMutation","fileReplaceBytes","genRandomIntegerInRange","lept_roundftoi","l_hashStringToUint64","l_hashPtToUint64","l_hashFloat64ToUint64","findNextLargerPrime","lept_isPrime","convertIntToGrayCode","convertGrayCodeToInt","getLeptonicaVersion","startTimer","stopTimer","startTimerNested","stopTimerNested","l_getCurrentTime","startWallTimer","stopWallTimer","l_getFormattedDate","stringNew","stringCopy","stringCopySegment","stringReplace","stringLength","stringCat","stringConcatNew","stringJoin","stringJoinIP","stringReverse","strtokSafe","stringSplitOnToken","stringCheckForChars","stringRemoveChars","stringReplaceEachSubstr","stringReplaceSubstr","stringFindEachSubstr","stringFindSubstr","arrayReplaceEachSequence","arrayFindEachSequence","arrayFindSequence","reallocNew","l_binaryRead","l_binaryReadStream","l_binaryReadSelect","l_binaryReadSelectStream","l_binaryWrite","nbytesInFile","fnbytesInFile","l_binaryCopy","l_binaryCompare","fileCopy","fileConcatenate","fileAppendString","fopenReadStream","fopenWriteStream","fopenReadFromMemory","fopenWriteWinTempfile","lept_fopen","lept_fclose","lept_calloc","lept_free","lept_mkdir","lept_rmdir","lept_direxists","lept_rm_match","lept_rm","lept_rmfile","lept_mv","lept_cp","callSystemDebug","splitPathAtDirectory","splitPathAtExtension","pathJoin","appendSubdirs","convertSepCharsInPath","genPathname","makeTempDirname","modifyTrailingSlash","l_makeTempFilename","extractNumberFromFilename","pixSimpleCaptcha","pixRandomHarmonicWarp","pixWarpStereoscopic","pixStretchHorizontal","pixStretchHorizontalSampled","pixStretchHorizontalLI","pixQuadraticVShear","pixQuadraticVShearSampled","pixQuadraticVShearLI","pixStereoFromPair","wshedCreate","wshedDestroy","wshedApply","wshedBasins","wshedRenderFill","wshedRenderColors","pixaWriteWebPAnim","pixaWriteStreamWebPAnim","pixaWriteMemWebPAnim","pixReadStreamWebP","pixReadMemWebP","readHeaderWebP","readHeaderMemWebP","pixWriteWebP","pixWriteStreamWebP","pixWriteMemWebP","l_jpegSetQuality","setLeptDebugOK","pixaWriteFiles","pixWriteDebug","pixWrite","pixWriteAutoFormat","pixWriteStream","pixWriteImpliedFormat","pixChooseOutputFormat","getImpliedFileFormat","pixGetAutoFormat","getFormatExtension","pixWriteMem","l_fileDisplay","pixDisplay","pixDisplayWithTitle","pixMakeColorSquare","l_chooseDisplayProg","changeFormatForMissingLib","pixDisplayWrite","pixSaveTiled","pixSaveTiledOutline","pixSaveTiledWithText","zlibCompress","zlibUncompress","__builtin_va_list","__va_list_tag","gp_offset","fp_offset","overflow_arg_area","reg_save_area","size_t","__off_t","__off64_t","FILE","_IO_lock_t","TessResultRenderer","TessBaseAPI","TessPageIterator","TessResultIterator","TessMutableIterator","TessChoiceIterator","TessOcrEngineMode_OEM_TESSERACT_ONLY","TessOcrEngineMode_OEM_LSTM_ONLY","TessOcrEngineMode_OEM_TESSERACT_LSTM_COMBINED","TessOcrEngineMode_OEM_DEFAULT","TessOcrEngineMode","TessPageSegMode_PSM_OSD_ONLY","TessPageSegMode_PSM_AUTO_OSD","TessPageSegMode_PSM_AUTO_ONLY","TessPageSegMode_PSM_AUTO","TessPageSegMode_PSM_SINGLE_COLUMN","TessPageSegMode_PSM_SINGLE_BLOCK_VERT_TEXT","TessPageSegMode_PSM_SINGLE_BLOCK","TessPageSegMode_PSM_SINGLE_LINE","TessPageSegMode_PSM_SINGLE_WORD","TessPageSegMode_PSM_CIRCLE_WORD","TessPageSegMode_PSM_SINGLE_CHAR","TessPageSegMode_PSM_SPARSE_TEXT","TessPageSegMode_PSM_SPARSE_TEXT_OSD","TessPageSegMode_PSM_RAW_LINE","TessPageSegMode_PSM_COUNT","TessPageSegMode","TessPageIteratorLevel_RIL_BLOCK","TessPageIteratorLevel_RIL_PARA","TessPageIteratorLevel_RIL_TEXTLINE","TessPageIteratorLevel_RIL_WORD","TessPageIteratorLevel_RIL_SYMBOL","TessPageIteratorLevel","TessPolyBlockType_PT_UNKNOWN","TessPolyBlockType_PT_FLOWING_TEXT","TessPolyBlockType_PT_HEADING_TEXT","TessPolyBlockType_PT_PULLOUT_TEXT","TessPolyBlockType_PT_EQUATION","TessPolyBlockType_PT_INLINE_EQUATION","TessPolyBlockType_PT_TABLE","TessPolyBlockType_PT_VERTICAL_TEXT","TessPolyBlockType_PT_CAPTION_TEXT","TessPolyBlockType_PT_FLOWING_IMAGE","TessPolyBlockType_PT_HEADING_IMAGE","TessPolyBlockType_PT_PULLOUT_IMAGE","TessPolyBlockType_PT_HORZ_LINE","TessPolyBlockType_PT_VERT_LINE","TessPolyBlockType_PT_NOISE","TessPolyBlockType_PT_COUNT","TessPolyBlockType","TessOrientation_ORIENTATION_PAGE_UP","TessOrientation_ORIENTATION_PAGE_RIGHT","TessOrientation_ORIENTATION_PAGE_DOWN","TessOrientation_ORIENTATION_PAGE_LEFT","TessOrientation","TessParagraphJustification_JUSTIFICATION_UNKNOWN","TessParagraphJustification_JUSTIFICATION_LEFT","TessParagraphJustification_JUSTIFICATION_CENTER","TessParagraphJustification_JUSTIFICATION_RIGHT","TessParagraphJustification","TessWritingDirection_WRITING_DIRECTION_LEFT_TO_RIGHT","TessWritingDirection_WRITING_DIRECTION_RIGHT_TO_LEFT","TessWritingDirection_WRITING_DIRECTION_TOP_TO_BOTTOM","TessWritingDirection","TessTextlineOrder_TEXTLINE_ORDER_LEFT_TO_RIGHT","TessTextlineOrder_TEXTLINE_ORDER_RIGHT_TO_LEFT","TessTextlineOrder_TEXTLINE_ORDER_TOP_TO_BOTTOM","TessTextlineOrder","ETEXT_DESC","TessCancelFunc","TessProgressFunc","TessVersion","TessDeleteText","TessDeleteTextArray","TessDeleteIntArray","TessTextRendererCreate","TessHOcrRendererCreate","TessHOcrRendererCreate2","TessAltoRendererCreate","TessTsvRendererCreate","TessPDFRendererCreate","TessUnlvRendererCreate","TessBoxTextRendererCreate","TessLSTMBoxRendererCreate","TessWordStrBoxRendererCreate","TessDeleteResultRenderer","TessResultRendererInsert","TessResultRendererNext","TessResultRendererBeginDocument","TessResultRendererAddImage","TessResultRendererEndDocument","TessResultRendererExtention","TessResultRendererTitle","TessResultRendererImageNum","TessBaseAPICreate","TessBaseAPIDelete","TessBaseAPIGetOpenCLDevice","TessBaseAPISetInputName","TessBaseAPIGetInputName","TessBaseAPISetInputImage","TessBaseAPIGetInputImage","TessBaseAPIGetSourceYResolution","TessBaseAPIGetDatapath","TessBaseAPISetOutputName","TessBaseAPISetVariable","TessBaseAPISetDebugVariable","TessBaseAPIGetIntVariable","TessBaseAPIGetBoolVariable","TessBaseAPIGetDoubleVariable","TessBaseAPIGetStringVariable","TessBaseAPIPrintVariables","TessBaseAPIPrintVariablesToFile","TessBaseAPIInit1","TessBaseAPIInit2","TessBaseAPIInit3","TessBaseAPIInit4","TessBaseAPIGetInitLanguagesAsString","TessBaseAPIGetLoadedLanguagesAsVector","TessBaseAPIGetAvailableLanguagesAsVector","TessBaseAPIInitLangMod","TessBaseAPIInitForAnalysePage","TessBaseAPIReadConfigFile","TessBaseAPIReadDebugConfigFile","TessBaseAPISetPageSegMode","TessBaseAPIGetPageSegMode","TessBaseAPIRect","TessBaseAPIClearAdaptiveClassifier","TessBaseAPISetImage","TessBaseAPISetImage2","TessBaseAPISetSourceResolution","TessBaseAPISetRectangle","TessBaseAPIGetThresholdedImage","TessBaseAPIGetRegions","TessBaseAPIGetTextlines","TessBaseAPIGetTextlines1","TessBaseAPIGetStrips","TessBaseAPIGetWords","TessBaseAPIGetConnectedComponents","TessBaseAPIGetComponentImages","TessBaseAPIGetComponentImages1","TessBaseAPIGetThresholdedImageScaleFactor","TessBaseAPIAnalyseLayout","TessBaseAPIRecognize","TessBaseAPIRecognizeForChopTest","TessBaseAPIProcessPages","TessBaseAPIProcessPage","TessBaseAPIGetIterator","TessBaseAPIGetMutableIterator","TessBaseAPIGetUTF8Text","TessBaseAPIGetHOCRText","TessBaseAPIGetAltoText","TessBaseAPIGetTsvText","TessBaseAPIGetBoxText","TessBaseAPIGetLSTMBoxText","TessBaseAPIGetWordStrBoxText","TessBaseAPIGetUNLVText","TessBaseAPIMeanTextConf","TessBaseAPIAllWordConfidences","TessBaseAPIAdaptToWordStr","TessBaseAPIClear","TessBaseAPIEnd","TessBaseAPIIsValidWord","TessBaseAPIGetTextDirection","TessBaseAPIGetUnichar","TessBaseAPISetMinOrientationMargin","TessPageIteratorDelete","TessPageIteratorCopy","TessPageIteratorBegin","TessPageIteratorNext","TessPageIteratorIsAtBeginningOf","TessPageIteratorIsAtFinalElement","TessPageIteratorBoundingBox","TessPageIteratorBlockType","TessPageIteratorGetBinaryImage","TessPageIteratorGetImage","TessPageIteratorBaseline","TessPageIteratorOrientation","TessPageIteratorParagraphInfo","TessResultIteratorDelete","TessResultIteratorCopy","TessResultIteratorGetPageIterator","TessResultIteratorGetPageIteratorConst","TessResultIteratorGetChoiceIterator","TessResultIteratorNext","TessResultIteratorGetUTF8Text","TessResultIteratorConfidence","TessResultIteratorWordRecognitionLanguage","TessResultIteratorWordFontAttributes","TessResultIteratorWordIsFromDictionary","TessResultIteratorWordIsNumeric","TessResultIteratorSymbolIsSuperscript","TessResultIteratorSymbolIsSubscript","TessResultIteratorSymbolIsDropcap","TessChoiceIteratorDelete","TessChoiceIteratorNext","TessChoiceIteratorGetUTF8Text","TessChoiceIteratorConfidence","TessMonitorCreate","TessMonitorDelete","TessMonitorSetCancelFunc","TessMonitorSetCancelThis","TessMonitorGetCancelThis","TessMonitorSetProgressFunc","TessMonitorGetProgress","TessMonitorSetDeadlineMSecs","kPointsPerInch","kMinCredibleResolution","kMaxCredibleResolution","kResolutionEstimationFactor","leptonica","Pix","raw","Box","get_w","get_h","PixError","ReadFrom","InvalidUtf8Path","InvalidPathNulByte","source","MemoryTooLarge","source","pix_read","pix_read_mem","Boxa","raw","get_n","get_box","BoxaRefIterator","tesseract","MAX_CREDIBLE_RESOLUTION","MIN_CREDIBLE_RESOLUTION","TessInitError","code","TessSetVariableError","TessApi","raw","new","set_image","get_image_dimensions","get_source_y_resolution","set_source_resolution","recognize","set_rectangle","get_utf8_text","get_hocr_text","get_alto_text","get_tsv_text","get_lstm_box_text","get_word_str_box_text","mean_text_conf","get_regions","get_component_images","Variable","ClassifyNumCpLevels","TextordDotmatrixGap","TextordDebugBlock","TextordPitchRange","TextordWordsVetoPower","TextordTabfindShowStrokewidths","PitsyncLinearVersion","PitsyncFakeDepth","OldblHoledLosscount","TextordSkewsmoothOffset","TextordSkewsmoothOffset2","TextordTestX","TextordTestY","TextordMinBlobsInRow","TextordSplineMinblobs","TextordSplineMedianwin","TextordMaxBlobOverlaps","TextordMinXheight","TextordLmsLineTrials","TextordTabfindShowImages","TextordFpChopError","EdgesMaxChildrenPerOutline","EdgesMaxChildrenLayers","EdgesChildrenPerGrandchild","EdgesChildrenCountLimit","EdgesMinNonhole","EdgesPathareaRatio","DevanagariSplitDebuglevel","TextordTabfindShowPartitions","TextordDebugTabfind","TextordDebugBugs","TextordTestregionLeft","TextordTestregionTop","TextordTestregionRight","TextordTestregionBottom","EditorImageXpos","EditorImageYpos","EditorImageMenuheight","EditorImageWordBbColor","EditorImageBlobBbColor","EditorImageTextColor","EditorDbwinXpos","EditorDbwinYpos","EditorDbwinHeight","EditorDbwinWidth","EditorWordXpos","EditorWordYpos","EditorWordHeight","EditorWordWidth","WordrecDisplaySplits","PolyDebug","PolyWideObjectsBetter","WordrecDisplayAllBlobs","WordrecBlobPause","TextordFpChopping","TextordForceMakePropWords","TextordChopperTest","TextordRestoreUnderlines","TextordShowInitialWords","TextordShowNewWords","TextordShowFixedWords","TextordBlocksallFixed","TextordBlocksallProp","TextordBlocksallTesting","TextordTestMode","TextordPitchScalebigwords","TextordAllProp","TextordDebugPitchTest","TextordDisablePitchTest","TextordFastPitchTest","TextordDebugPitchMetric","TextordShowRowCuts","TextordShowPageCuts","TextordPitchCheat","TextordBlockndocFixed","TextordShowTables","TextordTablefindShowMark","TextordTablefindShowStats","TextordTablefindRecognizeTables","TextordTabfindShowInitialtabs","TextordTabfindShowFinaltabs","TextordTabfindOnlyStrokewidths","TextordReallyOldXheight","TextordOldblDebug","TextordDebugBaselines","TextordOldblParadef","TextordOldblSplitSplines","TextordOldblMergeParts","OldblCorrfix","OldblXhfix","TextordOcropusMode","TextordHeavyNr","TextordShowInitialRows","TextordShowParallelRows","TextordShowExpandedRows","TextordShowFinalRows","TextordShowFinalBlobs","TextordTestLandscape","TextordParallelBaselines","TextordStraightBaselines","TextordOldBaselines","TextordOldXheight","TextordFixXheightBug","TextordFixMakerowBug","TextordDebugXheights","TextordBiasedSkewcalc","TextordInterpolatingSkew","TextordNewInitialXheight","TextordDebugBlob","GapmapDebug","GapmapUseEnds","GapmapNoIsolatedQuanta","EdgesUseNewOutlineComplexity","EdgesDebug","EdgesChildrenFix","TextordShowFixedCuts","DevanagariSplitDebugimage","TextordTabfindShowInitialPartitions","TextordTabfindShowRejectBlobs","TextordTabfindShowColumns","TextordTabfindShowBlocks","TextordTabfindFindTables","TextordSpaceSizeIsVariable","TextordDebugPrintable","EquationdetectSaveBiImage","EquationdetectSaveSptImage","EquationdetectSaveSeedImage","EquationdetectSaveMergedImage","StreamFilelist","DebugFile","Dotproduct","ClassifyFontName","FxDebugfile","EditorImageWinName","EditorDbwinName","EditorWordName","DocumentTitle","ClassifyPicoFeatureLength","ClassifyNormAdjMidpoint","ClassifyNormAdjCurl","ClassifyMinSlope","ClassifyMaxSlope","ClassifyCpAnglePadLoose","ClassifyCpAnglePadMedium","ClassifyCpAnglePadTight","ClassifyCpEndPadLoose","ClassifyCpEndPadMedium","ClassifyCpEndPadTight","ClassifyCpSidePadLoose","ClassifyCpSidePadMedium","ClassifyCpSidePadTight","ClassifyPpAnglePad","ClassifyPpEndPad","ClassifyPpSidePad","TextordUnderlineOffset","TextordWordstatsSmoothFactor","TextordWidthSmoothFactor","TextordWordsWidthIle","TextordWordsMaxspace","TextordWordsDefaultMaxspace","TextordWordsDefaultMinspace","TextordWordsMinMinspace","TextordWordsDefaultNonspace","TextordWordsInitialLower","TextordWordsInitialUpper","TextordWordsMinlarge","TextordWordsPitchsdThreshold","TextordWordsDefFixed","TextordWordsDefProp","TextordPitchRowsimilarity","WordsInitialLower","WordsInitialUpper","WordsDefaultPropNonspace","WordsDefaultFixedSpace","WordsDefaultFixedLimit","TextordWordsDefiniteSpread","TextordSpacesizeRatiofp","TextordSpacesizeRatioprop","TextordFpiqrRatio","TextordMaxPitchIqr","TextordFpMinWidth","TextordProjectionScale","TextordBalanceFactor","TextordTabvectorVerticalGapFraction","TextordTabvectorVerticalBoxRatio","PitsyncJoinedEdge","PitsyncOffsetFreecutFraction","OldblXhfract","OldblDotErrorSize","TextordOldblJumplimit","TextordSplineShiftFraction","TextordSplineOutlierFraction","TextordSkewIle","TextordSkewLag","TextordLinespaceIqrlimit","TextordWidthLimit","TextordChopWidth","TextordExpansionFactor","TextordOverlapX","TextordMinxh","TextordMinLinesize","TextordExcessBlobsize","TextordOccupancyThreshold","TextordUnderlineWidth","TextordMinBlobHeightFraction","TextordXheightModeFraction","TextordAscheightModeFraction","TextordDescheightModeFraction","TextordAscxRatioMin","TextordAscxRatioMax","TextordDescxRatioMin","TextordDescxRatioMax","TextordXheightErrorMargin","GapmapBigGaps","TextordFpChopSnap","EdgesChildarea","EdgesBoxarea","TextordUnderlineThreshold","AmbigsDebugLevel","ClassifyDebugLevel","ClassifyNormMethod","MatcherDebugLevel","MatcherDebugFlags","ClassifyLearningDebugLevel","MatcherPermanentClassesMin","MatcherMinExamplesForPrototyping","MatcherSufficientExamplesForPrototyping","ClassifyAdaptProtoThreshold","ClassifyAdaptFeatureThreshold","ClassifyClassPrunerThreshold","ClassifyClassPrunerMultiplier","ClassifyCpCutoffStrength","ClassifyIntegerMatcherMultiplier","DawgDebugLevel","HyphenDebugLevel","StopperSmallwordSize","StopperDebugLevel","TesseditTruncateWordchoiceLog","MaxPermuterAttempts","RepairUnchoppedBlobs","ChopDebug","ChopSplitLength","ChopSameDistance","ChopMinOutlinePoints","ChopSeamPileSize","ChopInsideAngle","ChopMinOutlineArea","ChopCenteredMaxwidth","ChopXyWeight","WordrecDebugLevel","WordrecMaxJoinChunks","SegsearchDebugLevel","SegsearchMaxPainPoints","SegsearchMaxFutileClassifications","LanguageModelDebugLevel","LanguageModelNgramOrder","LanguageModelViterbiListMaxNumPrunable","LanguageModelViterbiListMaxSize","LanguageModelMinCompoundLength","WordrecDisplaySegmentations","TesseditPagesegMode","TesseditOcrEngineMode","PagesegDevanagariSplitStrategy","OcrDevanagariSplitStrategy","BidiDebug","ApplyboxDebug","ApplyboxPage","TesseditBigramDebug","DebugNoiseRemoval","NoiseMaxperblob","NoiseMaxperword","DebugXHtLevel","QualityMinInitialAlphasReqd","TesseditTessAdaptionMode","MultilangDebugLevel","ParagraphDebugLevel","TesseditPreserveMinWdLen","CrunchRatingMax","CrunchPotIndicators","CrunchLeaveLcStrings","CrunchLeaveUcStrings","CrunchLongRepetitions","CrunchDebug","FixspNonNoiseLimit","FixspDoneMode","DebugFixSpaceLevel","XHtAcceptanceTolerance","XHtMinChange","SuperscriptDebug","JpgQuality","UserDefinedDpi","MinCharactersToTry","SuspectLevel","SuspectShortWords","TesseditRejectMode","TesseditImageBorder","MinSaneXHtPixels","TesseditPageNumber","TesseditParallelize","LstmChoiceMode","TospDebugLevel","TospEnoughSpaceSamplesForMedian","TospRedoKernLimit","TospFewSamples","TospShortRow","TospSanityMethod","TextordMaxNoiseSize","TextordBaselineDebug","TextordNoiseSizefraction","TextordNoiseTranslimit","TextordNoiseSncount","UseAmbigsForAdaption","AllowBlobDivision","PrioritizeDivision","ClassifyEnableLearning","TessCnMatching","TessBnMatching","ClassifyEnableAdaptiveMatcher","ClassifyUsePreAdaptedTemplates","ClassifySaveAdaptedTemplates","ClassifyEnableAdaptiveDebugger","ClassifyNonlinearNorm","DisableCharacterFragments","ClassifyDebugCharacterFragments","MatcherDebugSeparateWindows","ClassifyBlnNumericMode","LoadSystemDawg","LoadFreqDawg","LoadUnambigDawg","LoadPuncDawg","LoadNumberDawg","LoadBigramDawg","UseOnlyFirstUft8Step","StopperNoAcceptableChoices","SegmentNonalphabeticScript","SaveDocWords","MergeFragmentsInMatrix","WordrecEnableAssoc","ForceWordAssoc","ChopEnable","ChopVerticalCreep","ChopNewSeamPile","AssumeFixedPitchCharSegment","WordrecSkipNoTruthWords","WordrecDebugBlamer","WordrecRunBlamer","SaveAltChoices","LanguageModelNgramOn","LanguageModelNgramUseOnlyFirstUft8Step","LanguageModelNgramSpaceDelimitedLanguage","LanguageModelUseSigmoidalCertainty","TesseditResegmentFromBoxes","TesseditResegmentFromLineBoxes","TesseditTrainFromBoxes","TesseditMakeBoxesFromBoxes","TesseditTrainLineRecognizer","TesseditDumpPagesegImages","TesseditDoInvert","TesseditAmbigsTraining","TesseditAdaptionDebug","ApplyboxLearnCharsAndCharFragsMode","ApplyboxLearnNgramsMode","TesseditDisplayOutwords","TesseditDumpChoices","TesseditTimingDebug","TesseditFixFuzzySpaces","TesseditUnrejAnyWd","TesseditFixHyphens","TesseditEnableDocDict","TesseditDebugFonts","TesseditDebugBlockRejection","TesseditEnableBigramCorrection","TesseditEnableDictCorrection","EnableNoiseRemoval","TesseditMinimalRejPass1","TesseditTestAdaption","TestPt","ParagraphTextBased","LstmUseMatrix","TesseditGoodQualityUnrej","TesseditUseRejectSpaces","TesseditPreserveBlkRejPerfectWds","TesseditPreserveRowRejPerfectWds","TesseditDontBlkrejGoodWds","TesseditDontRowrejGoodWds","TesseditRowRejGoodDocs","TesseditRejectBadQualWds","TesseditDebugDocRejection","TesseditDebugQualityMetrics","BlandUnrej","UnlvTildeCrunching","HocrFontInfo","HocrCharBoxes","CrunchEarlyMergeTessFails","CrunchEarlyConvertBadUnlvChs","CrunchTerribleGarbage","CrunchLeaveOkStrings","CrunchAcceptOk","CrunchLeaveAcceptStrings","CrunchIncludeNumerals","TesseditPreferJoinedPunct","TesseditWriteBlockSeparators","TesseditWriteRepCodes","TesseditWriteUnlv","TesseditCreateTxt","TesseditCreateHocr","TesseditCreateAlto","TesseditCreateLstmbox","TesseditCreateTsv","TesseditCreateWordstrbox","TesseditCreatePdf","TextonlyPdf","SuspectConstrain1Il","TesseditMinimalRejection","TesseditZeroRejection","TesseditWordForWord","TesseditZeroKelvinRejection","TesseditRejectionDebug","TesseditFlip0O","RejTrustDocDawg","Rej1IlUseDictWord","Rej1IlTrustPermuterType","RejUseTessAccepted","RejUseTessBlanks","RejUseGoodPerm","RejUseSensibleWd","RejAlphasInNumberPerm","TesseditCreateBoxfile","TesseditWriteImages","InteractiveDisplayMode","TesseditOverridePermuter","TesseditUsePrimaryParamsModel","TextordTabfindShowVlines","TextordUseCjkFpModel","PolyAllowDetailedFx","TesseditInitConfigOnly","TextordEquationDetect","TextordTabfindVerticalText","TextordTabfindForceVerticalText","PreserveInterwordSpaces","PagesegApplyMusicMask","TextordSingleHeightMode","TospOldToMethod","TospOldToConstrainSpKn","TospOnlyUsePropRows","TospForceWordbreakOnPunct","TospUsePreChopping","TospOldToBugFix","TospBlockUseCertSpaces","TospRowUseCertSpaces","TospNarrowBlobsNotCert","TospRowUseCertSpaces1","TospRecoveryIsolatedRowStats","TospOnlySmallGapsForKern","TospAllFlipsFuzzy","TospFuzzyLimitAll","TospStatsUseXhtGaps","TospUseXhtGaps","TospOnlyUseXhtGaps","TospRule9TestPunct","TospFlipFuzzKnToSp","TospFlipFuzzSpToKn","TospImproveThresh","TextordNoRejects","TextordShowBlobs","TextordShowBoxes","TextordNoiseRejwords","TextordNoiseRejrows","TextordNoiseDebug","ClassifyLearnDebugStr","UserWordsFile","UserWordsSuffix","UserPatternsFile","UserPatternsSuffix","OutputAmbigWordsFile","WordToDebug","TesseditCharBlacklist","TesseditCharWhitelist","TesseditCharUnblacklist","TesseditWriteParamsToFile","ApplyboxExposurePattern","ChsLeadingPunct","ChsTrailingPunct1","ChsTrailingPunct2","OutlinesOdd","Outlines2","NumericPunctuation","UnrecognisedChar","OkRepeatedChNonAlphanumWds","ConflictSetIl1","FileType","TesseditLoadSublangs","PageSeparator","ClassifyCharNormRange","ClassifyMaxRatingRatio","ClassifyMaxCertaintyMargin","MatcherGoodThreshold","MatcherReliableAdaptiveResult","MatcherPerfectThreshold","MatcherBadMatchPad","MatcherRatingMargin","MatcherAvgNoiseSize","MatcherClusteringMaxAngleDelta","ClassifyMisfitJunkPenalty","RatingScale","CertaintyScale","TesseditClassMissScale","ClassifyAdaptedPruningFactor","ClassifyAdaptedPruningThreshold","ClassifyCharacterFragmentsGarbageCertaintyThreshold","SpeckleLargeMaxSize","SpeckleRatingPenalty","XheightPenaltySubscripts","XheightPenaltyInconsistent","SegmentPenaltyDictFrequentWord","SegmentPenaltyDictCaseOk","SegmentPenaltyDictCaseBad","SegmentPenaltyDictNonword","SegmentPenaltyGarbage","StopperNondictCertaintyBase","StopperPhase2CertaintyRejectionOffset","StopperCertaintyPerChar","StopperAllowableCharacterBadness","DocDictPendingThreshold","DocDictCertaintyThreshold","TesseditCertaintyThreshold","ChopSplitDistKnob","ChopOverlapKnob","ChopCenterKnob","ChopSharpnessKnob","ChopWidthChangeKnob","ChopOkSplit","ChopGoodSplit","SegsearchMaxCharWhRatio","LanguageModelNgramSmallProb","LanguageModelNgramNonmatchScore","LanguageModelNgramScaleFactor","LanguageModelNgramRatingFactor","LanguageModelPenaltyNonFreqDictWord","LanguageModelPenaltyNonDictWord","LanguageModelPenaltyPunc","LanguageModelPenaltyCase","LanguageModelPenaltyScript","LanguageModelPenaltyChartype","LanguageModelPenaltyFont","LanguageModelPenaltySpacing","LanguageModelPenaltyIncrement","NoiseCertBasechar","NoiseCertDisjoint","NoiseCertPunc","NoiseCertFactor","QualityRejPc","QualityBlobPc","QualityOutlinePc","QualityCharPc","TestPtX","TestPtY","TesseditRejectDocPercent","TesseditRejectBlockPercent","TesseditRejectRowPercent","TesseditWholeWdRejRowPercent","TesseditGoodDocStillRowrejWd","QualityRowrejPc","CrunchTerribleRating","CrunchPoorGarbageCert","CrunchPoorGarbageRate","CrunchPotPoorRate","CrunchPotPoorCert","CrunchDelRating","CrunchDelCert","CrunchDelMinHt","CrunchDelMaxHt","CrunchDelMinWidth","CrunchDelHighWord","CrunchDelLowWord","CrunchSmallOutlinesSize","FixspSmallOutlinesSize","SuperscriptWorseCertainty","SuperscriptBetteredCertainty","SuperscriptScaledownRatio","SubscriptMaxYTop","SuperscriptMinYBottom","SuspectRatingPerCh","SuspectAcceptRating","TesseditLowerFlipHyphen","TesseditUpperFlipHyphen","RejWholeOfMostlyRejectWordFract","MinOrientationMargin","TextordTabfindVerticalTextRatio","TextordTabfindAlignedGapFraction","TospOldSpKnThFactor","TospThresholdBias1","TospThresholdBias2","TospNarrowFraction","TospNarrowAspectRatio","TospWideFraction","TospWideAspectRatio","TospFuzzySpaceFactor","TospFuzzySpaceFactor1","TospFuzzySpaceFactor2","TospGapFactor","TospKernGapFactor1","TospKernGapFactor2","TospKernGapFactor3","TospIgnoreBigGaps","TospIgnoreVeryBigGaps","TospRepSpace","TospEnoughSmallGaps","TospTableKnSpRatio","TospTableXhtSpRatio","TospTableFuzzyKnSpRatio","TospFuzzyKnFraction","TospFuzzySpFraction","TospMinSaneKnSp","TospInitGuessKnMult","TospInitGuessXhtMult","TospMaxSaneKnThresh","TospFlipCaution","TospLargeKerning","TospDontFoolWithSmallKerns","TospNearLhEdge","TospSillyKnSpGap","TospPassWideFuzzSpToContext","TextordNoiseAreaRatio","TextordInitialxIle","TextordInitialascIle","TextordNoiseSizelimit","TextordNoiseNormratio","TextordNoiseSyfract","TextordNoiseSxfract","TextordNoiseHfract","TextordNoiseRowratio","TextordBlshiftMaxshift","TextordBlshiftXfraction","LepTess","new","set_image","set_image_from_mem","get_source_y_resolution","get_image_dimensions","set_source_resolution","set_fallback_source_resolution","recognize","set_rectangle","get_utf8_text","get_hocr_text","get_alto_text","get_tsv_text","get_lstm_box_text","get_word_str_box_text","mean_text_conf","get_regions","get_component_boxes","set_variable","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","clone","clone","clone","clone","clone","clone","clone","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","drop","as_ref","eq","ne","fmt","from","from","next","clone","eq","ne","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","source","new","create_valid","as_cstr"],"q":["leptess","leptess::capileptess","leptess::leptonica","","","","","","","","","leptess::leptonica::PixError","leptess::leptonica","leptess::leptonica::PixError","leptess::leptonica","","","","","","","leptess","leptess::tesseract","","","","","","","","","","","","","","","","","","","","","","","leptessleptess::capileptess::leptonica","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leptess::tesseract","","","","","","","","","","","","","","","","","","","","","","","leptess","","","","","","","","","","","","","","","","leptess::capileptess::leptonica","","","","","","","","leptess","leptess::tesseract","","","leptess","leptess::leptonica","leptess::tesseract","","","leptess","leptess::leptonica","leptess::tesseract","","leptess::leptonica","","","leptess"],"dow level wrapper for Leptonica C API","","","Wrapper around Leptonicaâ€™s <code>Box</code> structure","","","","","","","","","","Read an image from a local file.","Like pix_read, but reads the image from memory instead of â€¦","","","","","","Low level wrapper for Tesseract C API","","","","","","","","","Provide an image for Tesseract to recognize.","Get the dimensions of the currently loaded image, or None â€¦","","Override image resolution. Can be used to suppress â€œâ€¦","","","","","","","","","","","Get the given level kind of components (block, textline, â€¦","Enum representing different variable options accepted by â€¦","Number of Class Pruner Levels","Max pixel gap for broken pixed pitch","Block to do debug on","Max range test on pitch","Rows required to outvote a veto","Show stroke widths","Use new fast algorithm","Max advance fake generation","Max lost before fallback line used","For smooth factor","For smooth factor","coord of test pt","coord of test pt","Min blobs before gradient counted","Min blobs in each spline segment","Size of window for spline segmentation","Max number of blobs a big blob can overlap","Min credible pixel xheight","Number of linew fits to do","Show image blobs","Max allowed bending of chop cells","Max number of children inside a character outline","Max layers of nested children inside a character outline","Importance ratio for chucking outlines","Max holes allowed in blob","Min pixels for potential char in box","Max lensq/area for acceptable child outline","Debug level for split shiro-rekha process.","Show partition bounds, waiting if >1","Debug tab finding","Turn on output related to bugs in tab finding","Left edge of debug reporting rectangle","Top edge of debug reporting rectangle","Right edge of debug rectangle","Bottom edge of debug rectangle","Editor image X Pos","Editor image Y Pos","Add to image height for menu bar","Word bounding box colour","Blob bounding box colour","Correct text colour","Editor debug window X Pos","Editor debug window Y Pos","Editor debug window height","Editor debug window width","Word window X Pos","Word window Y Pos","Word window height","Word window width","Display splits","Debug old poly","More accurate approx on wide things","Display Blobs","Blob pause","Do fixed pitch chopping","Force proportional word segmentation on all rows","Chopper is being tested.","Chop underlines & put back","Display separate words","Display separate words","Display forced fixed pitch words","Moan about prop blocks","Moan about fixed pitch blocks","Dump stats when moaning","Do current test","Scale scores on big words","All doc is proportial text","Debug on fixed pitch test","Turn off dp fixed pitch algorithm","Do even faster pitch algorithm","Write full metric stuff","Draw row-level cuts","Draw page-level cuts","Use correct answer for fixed/prop","Attempt whole doc/block fixed pitch","Show table regions","Debug table marking steps in detail","Show page stats used in table finding","Enables the table recognizer for table layout and â€¦","Show tab candidates","Show tab vectors","Only run stroke widths","Use original wiseowl xheight","Debug old baseline generation","Debug baseline generation","Use para default mechanism","Split stepped splines","Merge suspect partitions","Improve correlation of heights","Fix bug in modes threshold for xheights","Make baselines for ocropus","Vigorously remove noise","Display row accumulation","Display page correlated rows","Display rows after expanding","Display rows after final fitting","Display blob bounds after pre-ass","Tests refer to land/port","Force parallel baselines","Force straight baselines","Use old baseline algorithm","Use old xheight algorithm","Use spline baseline","Prevent multiple baselines","Test xheight algorithms","Bias skew estimates with line length","Interpolate across gaps","Use test xheight mechanism","Print test blob information","Say which blocks have tables","Use large space at start and end of rows","Ensure gaps not less than 2quanta wide","Use the new outline complexity module","turn on debugging for this module","Remove boxy parents of char-like children","Draw fixed pitch cell boundaries","Whether to create a debug image for split shiro-rekha â€¦","Show partition bounds","Show blobs rejected as noise","Show column bounds","Show final block bounds","run table detection","If true, word delimiter spaces are assumed to have â€¦","Make debug windows printable","Save input bi image","Save special character image","Save the seed image","Save the merged image","Stream a filelist from stdin","File to send tprintf output to","Function used for calculation of dot product","Default font name to be used in training","Name of debugfile","Editor image window name","Editor debug window name","BL normalized word window","Title of output document (used for hOCR and PDF output)","Pico Feature Length","Norm adjust midpoint ...","Norm adjust curl ...","Slope below which lines are called horizontal","Slope above which lines are called vertical","Class Pruner Angle Pad Loose","Class Pruner Angle Pad Medium","CLass Pruner Angle Pad Tight","Class Pruner End Pad Loose","Class Pruner End Pad Medium","Class Pruner End Pad Tight","Class Pruner Side Pad Loose","Class Pruner Side Pad Medium","Class Pruner Side Pad Tight","Proto Pruner Angle Pad","Proto Prune End Pad","Proto Pruner Side Pad","Fraction of x to ignore","Smoothing gap stats","Smoothing width stats","Ile of blob widths for space est","Multiple of xheight","Max believable third space","Fraction of xheight","Fraction of xheight","Fraction of xheight","Max initial cluster size","Min initial cluster spacing","Fraction of valid gaps needed","Pitch sync threshold","Threshold for definite fixed","Threshold for definite prop","Fraction of xheight for sameness","Max initial cluster size","Min initial cluster spacing","Fraction of xheight","Fraction of xheight","Allowed size variance","Non-fuzzy spacing region","Min ratio space/nonspace","Min ratio space/nonspace","Pitch IQR/Gap IQR threshold","Xh fraction noise in pitch","Min width of decent blobs","Ding rate for mid-cuts","Ding rate for unbalanced char cells","max fraction of mean blob width allowed for vertical gaps â€¦","Fraction of box matches required to declare a line â€¦","Dist inside big blob for chopping","Fraction of cut for free cuts","Fraction of est allowed in calc","Max aspect ratio of a dot","X fraction for new partition","Fraction of line spacing for quad","Fraction of line spacing for outlier","Ile of gradients for page skew","Lag for skew on row accumulation","Max iqr/median for linespace","Max width of blobs to make rows","Max width before chopping","Factor to expand rows by in expand_rows","Fraction of linespace for good overlap","fraction of linesize for min xheight","* blob height for initial linesize","New row made if blob makes row this big","Fraction of neighbourhood","Multiple of line_size for underline","Min blob height/top to include blob top into xheight stats","Min pile height to make xheight","Min pile height to make ascheight","Min pile height to make descheight","Min cap/xheight","Max cap/xheight","Min desc/xheight","Max desc/xheight","Accepted variation","xht multiplier","Max distance of chop pt from vertex","Min area fraction of child outline","Min area fraction of grandchild for box","Fraction of width occupied","Debug level for unichar ambiguities","Classify debug level","Normalization Method   ...","Matcher Debug Level","Matcher Debug Flags","Learning Debug Level:","Min # of permanent classes","Reliable Config Threshold","Enable adaption even if the ambiguities have not been seen","Threshold for good protos during adaptive 0-255","Threshold for good features during adaptive 0-255","Class Pruner Threshold 0-255","Class Pruner Multiplier 0-255:","Class Pruner CutoffStrength:","Integer Matcher Multiplier  0-255:","Set to 1 for general debug info, to 2 for more details, â€¦","Debug level for hyphenated words.","Size of dict word to be treated as non-dict word","Stopper debug level","Max words to keep in list","Maximum number of different character choices to consider â€¦","Fix blobs that arenâ€™t chopped","Chop debug","Split Length","Same distance","Min Number of Points on Outline","Max number of seams in seam_pile","Min Inside Angle Bend","Min Outline Area","Width of (smaller) chopped blobs above which we donâ€™t â€¦","X / Y  length weight","Debug level for wordrec","Max number of broken pieces to associate","SegSearch debug level","Maximum number of pain points stored in the queue","Maximum number of pain point classifications per chunk â€¦","Language model debug level","Maximum order of the character ngram model","Maximum number of prunable (those for which PrunablePath(â€¦","Maximum size of viterbi lists recorded in BLOB_CHOICEs","Minimum length of compound words","Display Segmentations","Page seg mode: 0=osd only, 1=auto+osd, 2=auto_only, â€¦","Which OCR engine(s) to run (Tesseract, LSTM, both). â€¦","Whether to use the top-line splitting process for â€¦","Whether to use the top-line splitting process for â€¦","Debug level for BiDi","Debug level","Page number to apply boxes from","Amount of debug output for bigram correction.","Debug reassignment of small outlines","Max diacritics to apply to a blob","Max diacritics to apply to a word","Reestimate debug","alphas in a good word","Adaptation decision algorithm for tess","Print multilang debug info.","Print paragraph debug info.","Only preserve wds longer than this","For adj length in rating per ch","How many potential indicators needed","Donâ€™t crunch words with long lower case strings","Donâ€™t crunch words with long lower case strings","Crunch words with long repetitions","As it says","How many non-noise blbs either side?","What constitues done for spacing","Contextual fixspace debug","Max allowed deviation of blob top outside of font data","Min change in xht before actually trying it","Debug level for sub & superscript fixer","Set JPEG quality level","Specify DPI for input image","Specify minimum characters to try during OSD","Suspect marker level","Donâ€™t suspect dict wds longer than this","Rejection algorithm","Rej blbs near image edge limit","Reject any x-ht lt or eq than this","-1 -> All pages, else specific page to process","Run in parallel where possible","Allows to include alternative symbols choices in the hOCR â€¦","Debug data","or should we use mean","No.samples reqd to reestimate for row","No.gaps reqd with 1 large gap to treat as a table","No.gaps reqd with few cert spaces to use certs","How to avoid being silly","Pixel size of noise","Baseline debug level","Fraction of size for maxima","Transitions for normal blob","super norm blobs to save row","Use ambigs for deciding whether to adapt to a character","Use divisible blobs chopping","Prioritize blob division over chopping","Enable adaptive classifier","Character Normalized Matching","Baseline Normalized Matching","Enable adaptive classifier","Use pre-adapted classifier templates","Save adapted templates to a file","Enable match debugger","Non-linear stroke-density normalization","Do not include character fragments in the results of the â€¦","Bring up graphical debugging windows for fragments â€¦","Use two different windows for debugging the matching: One â€¦","Assume the input is numbers [0-9].","Load system word dawg.","Load frequent word dawg.","Load unambiguous word dawg.","Load dawg with punctuation patterns.","Load dawg with number patterns.","Load dawg with special word bigrams.","Use only the first UTF8 step of the given string when â€¦","Make AcceptableChoice() always return false. Useful when â€¦","Donâ€™t use any alphabetic-specific tricks. Set to true â€¦","Save Document Words","Merge the fragments in the ratings matrix and delete them â€¦","Associator Enable","force associator to run regardless of what enable_assoc isâ€¦","Chop enable","Vertical creep","Use new seam_pile","include fixed-pitch heuristics in char segmentation","Only run OCR for words that had truth recorded in â€¦","Print blamer debug messages","Try to set the blame for errors","Save alternative paths found during chopping and â€¦","Turn on/off the use of character ngram model","Use only the first UTF8 step of the given string when â€¦","Words are delimited by space","Use sigmoidal score for certainty","Take segmentation and labeling from box file","Conversion of word/line box file to char box file","Generate training data from boxed chars","Generate more boxes from boxed chars","Break input into lines and remap boxes if present","Dump intermediate images made during page segmentation","Try inverting the image in `LSTMRecognizeWord`","Perform training for ambiguities","Generate and print debug information for adaption","Learn both character fragments (as is done in the special â€¦","Each bounding box is assumed to contain ngrams. Only â€¦","Draw output words","Dump char choices","Print timing stats","Try to improve fuzzy spaces","Donâ€™t bother with word plausibility","Crunch double hyphens?","Add words to the document dictionary","Output font info per char","Block and Row stats","Enable correction based on the word bigram dictionary.","Enable single word correction based on the dictionary.","Remove and conditionally reassign small outlines when â€¦","Do minimal rejection on pass 1 output","Test adaption criteria","Test for point","Run paragraph detection on the post-text-recognition â€¦","Use ratings matrix/beam search with lstm","Reduce rejection on good docs","Reject spaces?","Only rej partially rejected words in block rejection","Only rej partially rejected words in row rejection","Use word segmentation quality metric","Use word segmentation quality metric","Apply row rejection to good docs","Reject all bad quality wds","Page stats","Output data to debug file","unrej potential with no checks","Mark v.bad words for tilde crunch","Add font info to hocr output","Add coordinates for each character to hocr output","Before word crunch?","Take out ~^ early?","As it says","Donâ€™t touch sensible strings","Use acceptability in okstring","Donâ€™t pot crunch sensible strings","Fiddle alpha figures","Reward punctuation joins","Write block separators in output","Write repetition char code","Write .unlv output file","Write .txt output file","Write .html hOCR output file","Write .xml ALTO file","Write .box file for LSTM training","Write .tsv output file","Write WordStr format .box output file","Write .pdf output file","Create PDF with only one invisible text layer","UNLV keep 1Il chars rejected","Only reject tess failures","Donâ€™t reject ANYTHING","Make output have exactly one word per WERD","Donâ€™t reject ANYTHING AT ALL","Adaption debug","Contextual 0O O0 flips","Use DOC dawg in 11l conf. detector","Use dictword test","Donâ€™t double check","Individual rejection control","Individual rejection control","Individual rejection control","Extend permuter check","Extend permuter check","Output text with boxes","Capture the image from the IPE","Run interactively?","According to dict_word","In multilingual mode use params model of the primary â€¦","Debug line finding","Use CJK fixed pitch model","Allow feature extractors to see the original outline","Only initialize with the config file. Useful if the â€¦","Turn on equation detector","Enable vertical detection","Force using vertical text page mode","Preserve multiple interword spaces","Detect music staff and remove intersecting components","Script has no xheight, so use a single mode","Space stats use prechopping?","Constrain relative values of inter and intra-word gaps â€¦","Block stats to use fixed pitch rows?","Force word breaks on punct to break long lines in nonâ€¦","Space stats use prechopping?","Fix suspected bug in old code","Only stat OBVIOUS spaces","Only stat OBVIOUS spaces","Only stat OBVIOUS spaces","Only stat OBVIOUS spaces","Use row alone when inadequate cert spaces","Better guess","Pass ANY flip to context?","Donâ€™t restrict kn->sp fuzzy limit to tables","Use within xht gap for wd breaks","Use within xht gap for wd breaks","Only use within xht gap for wd breaks","Donâ€™t chng kn to space next to punct","Default flip","Default flip","Enable improvement heuristic","Donâ€™t remove noise blobs","Display unsorted blobs","Display unsorted blobs","Reject noise-like words","Reject noise-like rows","Debug row garbage detector","Class str to debug learning","A filename of user-provided words.","A suffix of user-provided words located in tessdata.","A filename of user-provided patterns.","A suffix of user-provided patterns located in tessdata.","Output file for ambiguities found in the dictionary","Word for which stopper debug information should be â€¦","Blacklist of chars not to recognize","Whitelist of chars to recognize","List of chars to override tessedit_char_blacklist","Write all parameters to the given file.","Exposure value follows this pattern in the image filenameâ€¦","Leading punctuation","1st Trailing punctuation","2nd Trailing punctuation","Non standard number of outlines","Non standard number of outlines","Punct. chs expected WITHIN numbers","Output char for unidentified blobs","Allow NN to unrej","Il1 conflict set","Filename extension","List of languages to load with this one","Page separator (default is form feed control character)","Character Normalization Range ...","Veto ratio between classifier ratings","Veto difference between classifier certainties","Good Match (0-1)","Great Match (0-1)","Perfect Match (0-1)","Bad Match Pad (0-1)","New template margin (0-1)","Avg. noise blob length","Maximum angle delta for prototype clustering","Penalty to apply when a non-alnum is vertically out of â€¦","Rating scaling factor","Certainty scaling factor","Scale factor for features not used","Prune poor adapted results this much worse than best â€¦","Threshold at which classify_adapted_pruning_factor starts","Exclude fragments that do not look like whole characters â€¦","Max large speckle size","Penalty to add to worst rating for noise","Score penalty (0.1 = 10%) added if there are subscripts â€¦","Score penalty (0.1 = 10%) added if an xheight is â€¦","Score multiplier for word matches which have good case â€¦","Score multiplier for word matches that have good case â€¦","Default score multiplier for word matches, which may have â€¦","Score multiplier for glyph fragment segmentations which â€¦","Score multiplier for poorly cased strings that are not in â€¦","Certainty threshold for non-dict words","Reject certainty offset","Certainty to add for each dict char above small word size.","Max certaintly variation allowed in a word (in sigma)","Worst certainty for using pending dictionary","Worst certainty for words that can be inserted into the â€¦","Good blob limit","Split length adjustment","Split overlap adjustment","Split center adjustment","Split sharpness adjustment","Width change adjustment","OK split limit","Good split limit","Maximum character width-to-height ratio","To avoid overly small denominators use this as the floor â€¦","Average classifier score of a non-matching unichar.","Strength of the character ngram model relative to the â€¦","Factor to bring log-probs into the same range as ratings â€¦","Penalty for words not in the frequent word dictionary","Penalty for non-dictionary words","Penalty for inconsistent punctuation","Penalty for inconsistent case","Penalty for inconsistent script","Penalty for inconsistent character type","Penalty for inconsistent font","Penalty for inconsistent spacing","Penalty increment","Hingepoint for base char certainty","Hingepoint for disjoint certainty","Threshold for new punc char certainty","Scaling on certainty diff from Hingepoint","good_quality_doc lte rejection limit","good_quality_doc gte good blobs limit","good_quality_doc lte outline error limit","good_quality_doc gte good char limit","xcoord","ycoord","%rej allowed before rej whole doc","%rej allowed before rej whole block","%rej allowed before rej whole row","Number of row rejects in whole word rejects which â€¦","rej good doc wd if more than this fraction rejected","good_quality_doc gte good char limit","crunch rating lt this","crunch garbage cert lt this","crunch garbage rating lt this","POTENTIAL crunch rating lt this","POTENTIAL crunch cert lt this","POTENTIAL crunch rating lt this","POTENTIAL crunch cert lt this","Del if word ht lt xht x this","Del if word ht gt xht x this","Del if word width lt xht x this","Del if word gt xht x this above bl","Del if word gt xht x this below bl","Small if lt xht x this","Small if lt xht x this","How many times worse certainty does a superscript â€¦","What reduction in badness do we think sufficient to â€¦","A superscript scaled down more than this is unbelievably â€¦","Maximum top of a character measured as a multiple of xâ€¦","Minimum bottom of a character measured as a multiple of xâ€¦","Donâ€™t touch bad rating limit","Accept good rating limit","Aspect ratio dot/hyphen test","Aspect ratio dot/hyphen test","if >this fract","Min acceptable orientation margin","Fraction of textlines deemed vertical to use vertical â€¦","Fraction of height used as a minimum gap for aligned blobsâ€¦","Factor for defining space threshold in terms of space and â€¦","how far between kern and space?","how far between kern and space?","Fract of xheight for narrow","narrow if w/h less than this","Fract of xheight for wide","wide if w/h less than this","Fract of xheight for fuzz sp","Fract of xheight for fuzz sp","Fract of xheight for fuzz sp","gap ratio to flip sp->kern","gap ratio to flip kern->sp","gap ratio to flip kern->sp","gap ratio to flip kern->sp","xht multiplier","xht multiplier","rep gap multiplier for space","Fract of kerns reqd for isolated row stats","Min difference of kn & sp in table","Expect spaces bigger than this","Fuzzy if less than this","New fuzzy kn alg","New fuzzy sp alg","Donâ€™t trust spaces less than this time kn","Thresh guess - mult kn by this","Thresh guess - mult xht by this","Multiplier on kn to limit thresh","Donâ€™t autoflip kn to sp when large separation","Limit use of xht gap with large kns","Limit use of xht gap with odd small kns","Donâ€™t reduce box if the top left is non blank","Donâ€™t let sp minus kn get too small","How wide fuzzies need context","Fraction of bounding box for noise","Ile of sizes for xheight guess","Ile of sizes for xheight guess","Fraction of x for big t count","Dot to norm ratio for deletion","xh fract height error for norm blobs","xh fract width error for norm blobs","Height fraction to discard outlines as speckle noise","Dot to norm ratio for deletion","Max baseline shift","Min size of baseline shift","High level wrapper for Tesseract and Leptonica","","Set image to use for OCR.","","","","Override image resolution. Can be used to suppress â€œâ€¦","Override image resolution if not detected","","Restrict OCR to a specific region of the image.","Extract text from current selected region of the image. â€¦","Extract text from image as HTML with bounding box â€¦","Extract text from image as XML-formatted string with Alto â€¦","Extract text from image as TSV-formatted string.","Returns a box file for LSTM training from the internal â€¦","Extract text from image as a string formatted in the same â€¦","","","Get the given level kind of components (block, textline, â€¦","Set the value of an internal Tesseract parameteronvinience wrapper for [create_valid]","Wrapper for <code>boxCreateValid</code>","Get the variableâ€™s name as used by Tesseract"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,3,3,0,4,4,0,0,5,5,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,8,8,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,11,11,0,12,12,0,0,0,13,0,0,0,0,0,0,0,0,14,14,0,0,15,0,0,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,0,19,19,0,20,20,0,21,21,0,22,22,0,0,23,23,0,24,24,0,0,0,25,25,0,26,26,26,0,27,27,27,0,28,28,28,0,29,29,0,0,30,30,0,31,31,0,0,0,0,0,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,33,33,33,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,34,34,0,0,0,0,0,0,0,0,0,0,0,35,35,35,35,35,35,0,0,36,36,36,0,0,37,37,37,37,37,37,0,0,38,38,38,0,0,39,39,39,0,0,40,40,40,40,0,0,41,41,41,41,0,0,0,0,0,0,0,0,0,0,0,0,42,42,42,42,0,0,43,43,43,43,0,0,44,44,44,0,0,45,45,45,45,0,0,46,46,0,0,0,0,0,0,0,0,0,0,0,0,47,47,47,47,47,0,0,0,0,0,0,48,48,48,48,0,0,49,49,0,0,0,0,50,50,50,50,50,50,0,0,0,0,51,51,51,51,0,0,0,0,0,0,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,0,0,0,0,0,0,53,53,53,53,53,53,53,53,53,0,0,54,54,54,54,54,54,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,0,0,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,0,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,62,62,62,62,62,62,0,0,63,63,63,0,0,64,64,64,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,66,66,66,66,0,0,67,67,67,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,68,68,68,68,0,0,69,69,69,69,0,0,70,70,70,70,70,0,0,71,71,71,71,0,0,72,72,72,0,0,73,73,73,73,73,0,0,74,74,74,0,0,75,75,75,75,0,0,76,76,76,76,76,76,76,76,0,0,77,77,77,77,77,77,77,0,0,78,78,78,78,0,0,79,79,79,79,79,79,79,0,0,80,80,80,80,80,80,80,80,80,80,0,0,81,81,81,81,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,0,83,83,83,83,83,83,83,0,0,84,84,84,84,84,84,84,0,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,0,0,0,0,0,0,0,0,0,0,0,0,86,86,86,86,86,86,86,86,0,0,0,0,0,0,87,87,87,87,87,87,0,0,0,0,0,0,0,88,88,88,88,88,88,88,88,0,0,0,0,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,0,91,91,0,92,92,92,93,92,94,0,0,0,95,95,95,0,0,0,0,0,96,0,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,91,91,91,91,91,91,91,110,110,110,110,110,110,110,92,92,92,92,92,92,92,92,95,95,95,95,95,95,95,111,111,111,111,111,111,111,111,96,96,96,96,96,96,96,96,112,112,112,112,112,112,112,112,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,106,107,103,109,104,105,108,107,104,109,106,103,108,105,46,68,17,71,33,11,65,59,34,39,51,84,45,79,41,44,22,6,49,82,69,47,14,7,56,16,74,63,43,78,35,57,100,40,15,77,81,10,38,72,83,64,85,75,54,42,37,101,1,89,52,9,62,67,90,61,12,8,20,73,53,76,88,60,13,55,86,36,102,32,80,87,58,70,66,101,84,57,13,56,31,78,35,54,83,62,38,29,100,82,46,16,30,24,50,51,26,6,53,3,48,2,59,34,60,1,85,41,9,89,25,61,70,65,21,43,4,18,32,33,7,63,75,12,19,40,74,28,45,11,64,20,88,37,27,69,47,66,52,71,58,5,15,87,22,49,14,67,90,8,68,77,72,86,76,36,81,102,73,39,55,23,44,42,17,80,79,10,110,110,110,110,110,92,92,111,98,96,96,112,98,92,96,112,97,98,92,96,112,92,110,110,98],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[["i32",15]]],[[["u64",15]]],[[]],[[]],[[["u64",15],["i32",15]],["i32",15]],[[["u64",15]]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u64",15]],["i32",15]],[[["u64",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i64",15]],[[["i32",15]],["i64",15]],[[],["i64",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["i64",15],["i32",15]],["i32",15]],[[],["i64",15]],[[]],[[["i64",15],["i32",15]],["i32",15]],[[],["i64",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],null,null,[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[]],[[]],[[],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u64",15]],[[],["f64",15]],[[],["i32",15]],[[],["i64",15]],[[],["i64",15]],[[],["f64",15]],[[],["f32",15]],[[],["u128",15]],[[["i32",15]],["i64",15]],[[["i32",15]],["u64",15]],[[["i32",15]],["i64",15]],[[["i32",15]],["u64",15]],[[["i32",15]],["i64",15]],[[["i32",15]],["u64",15]],[[["i64",15]]],[[],["i64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["i64",15]],[[["u32",15]]],[[["u32",15],["u64",15]]],[[]],null,null,null,null,null,null,null,null,[[],["i32",15]],[[["u32",15]],["i32",15]],[[["u32",15],["u64",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u32",15]]],[[],["i32",15]],[[],["f64",15]],[[],["f64",15]],[[],["i64",15]],[[],["i64",15]],[[],["i64",15]],[[],["i64",15]],[[["i64",15]]],[[]],[[]],null,null,null,null,null,null,[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i64",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]],["i32",15]],[[["u64",15]]],[[]],[[["option",4]],["i32",15]],[[["option",4]],["i32",15]],[[["option",4]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[],["i32",15]],[[]],null,[[["option",4],["u64",15]]],[[["option",4],["u64",15]]],[[["i32",15]],["i32",15]],[[["i64",15]],["i64",15]],[[["i64",15]],["i64",15]],[[["i32",15]],["div_t",3]],[[["i64",15]],["ldiv_t",3]],[[["i64",15]],["lldiv_t",3]],[[["f64",15],["i32",15]]],[[["f64",15],["i32",15]]],[[["f64",15],["i32",15]]],[[["u128",15],["i32",15]]],[[["u128",15],["i32",15]]],[[["u128",15],["i32",15]]],[[["f64",15],["i32",15],["u64",15]],["i32",15]],[[["f64",15],["i32",15],["u64",15]],["i32",15]],[[["u128",15],["i32",15],["u64",15]],["i32",15]],[[["u128",15],["i32",15],["u64",15]],["i32",15]],[[["u64",15]],["i32",15]],[[["u64",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["f32",15],["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u8",15]]],[[["u8",15]]],[[["f32",15],["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u32",15],["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u64",15]],["i32",15]],[[["u64",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u8",15]]],[[["u8",15]]],[[["f32",15],["i32",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["u32",15],["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["u32",15],["f32",15],["i32",15]]],[[["u32",15],["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["u32",15],["f32",15],["i32",15]]],[[["u32",15]]],[[["u32",15]]],[[["f32",15],["i32",15]]],[[]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[["i8",15]]],[[["i8",15]],["i32",15]],[[["i8",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["f32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["u32",15]]],[[["i32",15]]],[[]],[[["f32",15]]],[[["u32",15],["i32",15]]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[["i32",15]]],[[]],[[],["u64",15]],[[]],[[]],[[["u64",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u64",15]],["i32",15]],[[["u64",15]],["i32",15]],[[["u64",15]],["i32",15]],[[["u64",15]],["i32",15]],[[["i32",15]]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["u32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15]]],[[["u32",15]],["i32",15]],[[["u32",15]]],[[["u32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u32",15]]],[[["f32",15]]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[]],[[]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[]],[[]],[[["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["u64",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]]],[[],["f32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f64",15],["i32",15]]],[[]],[[]],[[]],[[],["i32",15]],[[["f64",15]],["i32",15]],[[["f64",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f64",15],["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f64",15],["i32",15]],["i32",15]],[[["f64",15],["i32",15]],["i32",15]],[[]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["f64",15]],["i32",15]],[[],["i32",15]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f64",15],["i32",15]],["i32",15]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15],["u64",15]]],[[["f64",15],["u64",15]],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[["f64",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15]]],[[["f32",15]]],[[["i32",15]],["i32",15]],[[["f32",15]]],[[["f32",15],["i32",15]]],[[["f32",15]]],[[["i32",15]]],[[["f32",15]]],[[]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15],["f32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["f64",15],["i32",15]],["i32",15]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[["i32",15]]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]]],[[["f32",15]],["i32",15]],[[["f32",15]]],[[["f64",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f64",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[["f32",15],["i32",15]]],[[["f32",15]]],[[["f32",15],["i32",15]]],[[["f32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15]]],[[["f32",15]]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[["f64",15],["i32",15]]],[[["f64",15],["i32",15]],["i32",15]],[[["u32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["u32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["u8",15]],["i32",15]],[[["f32",15],["u8",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u8",15],["i32",15]],["i32",15]],[[["u8",15],["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u8",15],["i32",15]],["i32",15]],[[["u8",15],["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u8",15],["i32",15]],["i32",15]],[[["f32",15],["u8",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u8",15],["i32",15]],["i32",15]],[[["f32",15],["u8",15],["i32",15]],["i32",15]],[[["u8",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["f32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["u32",15],["f32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u64",15]],["i32",15]],[[],["i32",15]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u32",15],["u64",15],["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15],["u64",15]]],[[["u64",15]],["i32",15]],[[["u64",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["rb_type",19]]],[[["rb_type",19]]],[[["rb_type",19]]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[["i32",15]]],[[["rb_type",19]]],[[["rb_type",19]]],[[["rb_type",19]]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["u32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["u32",15],["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[["f32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[]],[[["f32",15]]],[[["f32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]]],[[["i32",15]]],[[["f32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15]]],[[["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]]],[[["f32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15],["u64",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15],["u64",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]]],[[["i32",15],["u64",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]]],[[["option",4],["option",4]]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[]],[[],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["u32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u32",15],["i32",15]]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u32",15]],["i32",15]],[[["u32",15],["f32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u32",15],["i32",15]],["i32",15]],[[["u32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]],["i32",15]],[[["u32",15],["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u32",15],["i32",15]],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[["f32",15]]],[[["u32",15]],["i32",15]],[[["u32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["u32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[["f32",15]]],[[["u32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["u32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[]],[[],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[]],[[]],[[["u32",15],["i32",15]]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["f32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["u32",15],["f32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[["u32",15],["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["u64",15]],["i32",15]],[[]],[[["u64",15]]],[[]],[[["u64",15]]],[[["u64",15]],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[]],[[]],[[["f32",15]]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15]]],[[["i32",15]],["i32",15]],[[["u32",15],["f32",15]],["i32",15]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u32",15],["f32",15]],["u32",15]],[[["u32",15],["f32",15]],["u32",15]],[[]],[[["i32",15]],["f32",15]],[[["i32",15]]],[[["i32",15],["u64",15]]],[[["i32",15]]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[]],[[]],[[["f32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]]],[[["f32",15],["i32",15]]],[[]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["f32",15]]],[[["i32",15]]],[[["u16",15]]],[[["u32",15]]],[[]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[["u8",15]]],[[["i32",15],["u8",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[["i32",15]]],[[]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15],["f32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[["u64",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["u64",15]]],[[["f32",15]],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u64",15]]],[[["u64",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u8",15]]],[[["u8",15]]],[[["f32",15],["i32",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[]],[[]],[[["u64",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[]],[[]],[[["u64",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[],["i32",15]],[[]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15]],["i32",15]],[[["f32",15]],["f32",15]],[[],["i32",15]],[[["f32",15],["i32",15]]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[],["i32",15]],[[]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[]],[[]],[[["f32",15],["i32",15]],["i32",15]],[[]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["rb_type",19]]],[[["rb_type",19]]],[[["rb_type",19]]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15],["f32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15],["f32",15]]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u64",15]]],[[["u64",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[["u64",15]],["i32",15]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u64",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15]]],[[["f32",15],["i32",15]]],[[["u32",15],["f32",15]]],[[["f32",15],["u8",15]]],[[["f32",15],["i32",15]]],[[["u32",15],["f32",15]]],[[["f32",15],["u8",15]]],[[["u32",15],["f32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[]],[[]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[],["i32",15]],[[]],[[["i32",15]]],[[],["i32",15]],[[["f32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]]],[[["f32",15],["i32",15]]],[[["f32",15]]],[[["f32",15]]],[[]],[[]],[[["f32",15]]],[[]],[[]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[["f32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]]],[[["i32",15]]],[[["f32",15]]],[[["f32",15]]],[[]],[[["i32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]],["i32",15]],[[["f32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[]],[[],["i32",15]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["u32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15],["i32",15]]],[[],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u64",15]]],[[],["i32",15]],[[],["i32",15]],[[["u64",15]]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15],["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]],["i32",15]],[[["u32",15],["i32",15]],["i32",15]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15],["u64",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15],["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15]],["f32",15]],[[]],[[["option",4]]],[[]],[[],["i32",15]],[[["u16",15]],["u16",15]],[[["u16",15]],["u16",15]],[[["u32",15]],["u32",15]],[[["u32",15]],["u32",15]],[[["f32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["i32",15],["u64",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["f32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["f64",15],["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u64",15]],["i32",15]],[[["u32",15]],["u32",15]],[[["u32",15]],["u32",15]],[[]],[[]],[[],["f32",15]],[[]],[[],["f32",15]],[[]],[[]],[[],["f32",15]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[["u64",15]],["i32",15]],[[["u64",15]],["i32",15]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]],["i32",15]],[[["i32",15]]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]],["i32",15]],[[],["u64",15]],[[],["u64",15]],[[["u64",15]]],[[["u64",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[["u64",15]]],[[]],[[]],[[],["i32",15]],[[["u64",15]]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[["i32",15]],["i32",15]],[[]],[[["u64",15]],["i32",15]],[[["i32",15],["u64",15]],["i32",15]],[[]],[[["i32",15]],["i32",15]],[[["u32",15],["i32",15]]],[[["u32",15],["f32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["f32",15]]],[[["i32",15]]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[["u64",15]]],[[],["i32",15]],[[["u64",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15],["f32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u32",15],["i32",15]]],[[["i32",15]]],[[]],[[["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["f32",15],["i32",15]],["i32",15]],[[["u32",15],["i32",15]],["i32",15]],[[["u64",15]]],[[["u64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[],["i32",15]],[[["u32",15],["i32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[],["i32",15]],[[["u32",15],["i32",15],["u64",15]],["i32",15]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[]],[[["u32",15]]],[[],["u32",15]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[],["i32",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[],["i32",15]],[[]],[[["u32",15]],["i32",15]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["f64",15]]],[[]],[[]],[[]],[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[],["u32",15]],[[["u32",15]]],[[["u32",15],["i32",15]]],[[["u32",15]],["i32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["i32",15]],[[["u32",15]]],[[["u32",15]],["f32",15]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i32",15]],[[]],[[],["f32",15]],[[]],[[]],[[["option",4]]],[[]],[[]],[[["option",4]]],[[],["i32",15]],[[["i32",15]]],null,null,null,null,null,null,null,null,[[],["u32",15]],[[],["u32",15]],null,null,null,null,null,null,null,[[["path",3]],[["pixerror",4],["result",4],["pix",3]]],[[],[["pixerror",4],["result",4],["pix",3]]],null,null,[[],["usize",15]],[[["usize",15]],[["borrowedbox",3],["option",4]]],null,null,null,null,null,null,null,null,null,[[["option",4],["str",15]],[["result",4],["tessapi",3],["tessiniterror",3]]],[[["pix",3]]],[[],["option",4]],[[],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[]],[[],[["utf8error",3],["result",4],["string",3]]],[[["c_int",6]],[["utf8error",3],["result",4],["string",3]]],[[["c_int",6]],[["utf8error",3],["result",4],["string",3]]],[[["c_int",6]],[["utf8error",3],["result",4],["string",3]]],[[["c_int",6]],[["utf8error",3],["result",4],["string",3]]],[[["c_int",6]],[["utf8error",3],["result",4],["string",3]]],[[],["i32",15]],[[],[["option",4],["boxa",3]]],[[["bool",15],["tesspageiteratorlevel",6]],[["option",4],["boxa",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["option",4],["str",15]],[["result",4],["tessiniterror",3],["leptess",3]]],[[],[["result",4],["pixerror",4]]],[[],[["result",4],["pixerror",4]]],[[],["i32",15]],[[],["option",4]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[]],[[],[["utf8error",3],["result",4],["string",3]]],[[["c_int",6]],[["utf8error",3],["result",4],["string",3]]],[[["c_int",6]],[["utf8error",3],["result",4],["string",3]]],[[["c_int",6]],[["utf8error",3],["result",4],["string",3]]],[[["c_int",6]],[["utf8error",3],["result",4],["string",3]]],[[["c_int",6]],[["utf8error",3],["result",4],["string",3]]],[[],["i32",15]],[[],[["option",4],["boxa",3]]],[[["bool",15],["tesspageiteratorlevel",6]],[["option",4],["boxa",3]]],[[["variable",4],["str",15]],[["result",4],["tesssetvariableerror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["tessmutableiterator",3]],[[],["tessbaseapi",3]],[[],["etext_desc",3]],[[],["tessresultiterator",3]],[[],["tessresultrenderer",3]],[[],["tesschoiceiterator",3]],[[],["tesspageiterator",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["_io_codecvt",3]],[[],["l_rcha",3]],[[],["gplot",3]],[[],["fd_set",3]],[[],["l_dewarp",3]],[[],["pthread_barrierattr_t",19]],[[],["fpixa",3]],[[],["numa",3]],[[],["ccborda",3]],[[],["l_rch",3]],[[],["sel",3]],[[],["l_dnaa",3]],[[],["pthread_rwlockattr_t",19]],[[],["_io_marker",3]],[[],["l_recog",3]],[[],["l_ptraa",3]],[[],["__pthread_mutex_s",3]],[[],["pthread_barrier_t",19]],[[],["pthread_condattr_t",19]],[[],["l_rbtree_node",3]],[[],["l_stack",3]],[[],["pthread_mutex_t",19]],[[],["_io_file",3]],[[],["ccbord",3]],[[],["__mbstate_t__bindgen_ty_1",19]],[[],["rb_type",19]],[[],["__mbstate_t",3]],[[],["l_pdf_data",3]],[[],["l_walltimer",3]],[[],["jbclasser",3]],[[],["__fsid_t",3]],[[],["l_rdid",3]],[[],["l_bytea",3]],[[],["lldiv_t",3]],[[],["l_wshed",3]],[[],["pthread_attr_t",19]],[[],["jbdata",3]],[[],["box",3]],[[],["pix",3]],[[],["__pthread_cond_s__bindgen_ty_2",19]],[[],["l_heap",3]],[[],["_g_fpos_t",3]],[[],["__pthread_cond_s",3]],[[],["random_data",3]],[[],["drand48_data",3]],[[],["div_t",3]],[[],["sela",3]],[[],["pixacc",3]],[[],["timespec",3]],[[],["__pthread_cond_s__bindgen_ty_1",19]],[[],["sarray",3]],[[],["ptaa",3]],[[],["pthread_rwlock_t",19]],[[],["l_ptra",3]],[[],["timeval",3]],[[],["l_kernel",3]],[[],["__pthread_cond_s__bindgen_ty_1__bindgen_ty_1",3]],[[],["l_sudoku",3]],[[],["l_dna",3]],[[],["pthread_cond_t",19]],[[],["pixaa",3]],[[],["l_queue",3]],[[],["pixcolormap",3]],[[],["l_bmf",3]],[[],["boxa",3]],[[],["l_compressed_data",3]],[[],["_g_fpos64_t",3]],[[],["__pthread_internal_slist",3]],[[],["l_strcode",3]],[[],["__pthread_cond_s__bindgen_ty_2__bindgen_ty_1",3]],[[],["l_rbtree",3]],[[],["__pthread_internal_list",3]],[[],["rgba_quad",3]],[[],["__va_list_tag",3]],[[],["ldiv_t",3]],[[],["pixa",3]],[[],["fpix",3]],[[],["boxaa",3]],[[],["l_regparams",3]],[[],["pixtiling",3]],[[],["numaa",3]],[[],["pixacomp",3]],[[],["_io_wide_data",3]],[[],["pta",3]],[[],["l_dnahash",3]],[[],["l_dewarpa",3]],[[],["pthread_mutexattr_t",19]],[[],["doublelinkedlist",3]],[[],["l_bytebuffer",3]],[[],["__pthread_rwlock_arch_t",3]],[[],["pixcomp",3]],[[],["dpix",3]],[[],["__sigset_t",3]],[[]],[[],["box",3]],[[["box",3]],["bool",15]],[[["box",3]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["nulerror",3]]],[[["tryfrominterror",3]]],[[],["option",4]],[[],["variable",4]],[[["tessiniterror",3]],["bool",15]],[[["tessiniterror",3]],["bool",15]],[[["tesssetvariableerror",3]],["bool",15]],[[["variable",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["error",8],["option",4]]],[[["i32",15]],[["box",3],["boxcreatevaliderror",3],["result",4]]],[[["i32",15]],[["box",3],["boxcreatevaliderror",3],["result",4]]],[[],["cstr",3]]],"p":[[3,"__fsid_t"],[3,"__mbstate_t"],[19,"__mbstate_t__bindgen_ty_1"],[3,"_G_fpos_t"],[3,"_G_fpos64_t"],[3,"_IO_FILE"],[3,"div_t"],[3,"ldiv_t"],[3,"lldiv_t"],[3,"__sigset_t"],[3,"timeval"],[3,"timespec"],[3,"fd_set"],[3,"__pthread_internal_list"],[3,"__pthread_internal_slist"],[3,"__pthread_mutex_s"],[3,"__pthread_rwlock_arch_t"],[3,"__pthread_cond_s"],[19,"__pthread_cond_s__bindgen_ty_1"],[3,"__pthread_cond_s__bindgen_ty_1__bindgen_ty_1"],[19,"__pthread_cond_s__bindgen_ty_2"],[3,"__pthread_cond_s__bindgen_ty_2__bindgen_ty_1"],[19,"pthread_mutexattr_t"],[19,"pthread_condattr_t"],[19,"pthread_attr_t"],[19,"pthread_mutex_t"],[19,"pthread_cond_t"],[19,"pthread_rwlock_t"],[19,"pthread_rwlockattr_t"],[19,"pthread_barrier_t"],[19,"pthread_barrierattr_t"],[3,"random_data"],[3,"drand48_data"],[3,"L_WallTimer"],[3,"Numa"],[3,"Numaa"],[3,"L_Dna"],[3,"L_Dnaa"],[3,"L_DnaHash"],[3,"Sarray"],[3,"L_Bytea"],[3,"L_ByteBuffer"],[3,"L_Heap"],[3,"DoubleLinkedList"],[3,"L_Ptra"],[3,"L_Ptraa"],[3,"L_Queue"],[19,"Rb_Type"],[3,"L_Rbtree"],[3,"L_Rbtree_Node"],[3,"L_Stack"],[3,"L_Bmf"],[3,"CCBord"],[3,"CCBorda"],[3,"L_Dewarpa"],[3,"L_Dewarp"],[3,"GPlot"],[3,"L_Compressed_Data"],[3,"L_Pdf_Data"],[3,"JbClasser"],[3,"JbData"],[3,"Sel"],[3,"Sela"],[3,"L_Kernel"],[3,"Pix"],[3,"PixColormap"],[3,"RGBA_Quad"],[3,"Pixa"],[3,"Pixaa"],[3,"Box"],[3,"Boxa"],[3,"Boxaa"],[3,"Pta"],[3,"Ptaa"],[3,"Pixacc"],[3,"PixTiling"],[3,"FPix"],[3,"FPixa"],[3,"DPix"],[3,"PixComp"],[3,"PixaComp"],[3,"L_Recog"],[3,"L_Rch"],[3,"L_Rcha"],[3,"L_Rdid"],[3,"L_RegParams"],[3,"L_StrCode"],[3,"L_Sudoku"],[3,"L_WShed"],[3,"__va_list_tag"],[3,"Pix"],[4,"PixError"],[13,"InvalidPathNulByte"],[13,"MemoryTooLarge"],[3,"Boxa"],[3,"TessInitError"],[3,"TessApi"],[4,"Variable"],[3,"LepTess"],[3,"_IO_marker"],[3,"_IO_codecvt"],[3,"_IO_wide_data"],[3,"TessResultRenderer"],[3,"TessBaseAPI"],[3,"TessPageIterator"],[3,"TessResultIterator"],[3,"TessMutableIterator"],[3,"TessChoiceIterator"],[3,"ETEXT_DESC"],[3,"Box"],[3,"BoxaRefIterator"],[3,"TessSetVariableError"]]},\
"leptonica_plumbing":{"doc":"","t":[3,3,3,3,3,4,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BorrowedBox","BorrowedPix","Boxa","Pix","PixReadError","PixReadMemError","NullPtr","ImageSizeConversion","Box","BoxCreateValidError","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","drop","drop","drop","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","from","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","source","new","new","new","create_valid","new_from_pointer","create","get","read","read_mem"],"q":["leptonica_plumbing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Borrowed wrapper around Leptonicaâ€™s <code>Box</code> structure","Borrowed wrapper around Leptonicaâ€™s <code>Pix</code> structure","Wrapper around Leptonicaâ€™s <code>Boxa</code> structure","Wrapper around Leptonicaâ€™s <code>Pix</code> structure","Error returned by Pix::read","Error returned by Pix::read_mem","","","Wrapper around Leptonicaâ€™s <code>Box</code> structure","Error returned by Box::create_valid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new BorrowedBox from a pointer","Create a new BorrowedPix from a pointer","Convinience wrapper for [create_valid]","Wrapper for <code>boxCreateValid</code>","Create a new Boxa from a pointer","Wrapper for <code>boxaCreate</code>","Safely borrow the nth item","Wrapper for <code>pixRead</code>","Wrapper for <code>pixReadMem</code>"],"i":[0,0,0,0,0,0,1,1,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,4,6,7,2,3,4,6,7,7,1,2,2,3,3,4,4,6,6,1,1,2,3,4,5,6,7,1,8,5,1,8,1,2,3,4,4,6,6,6,7,7],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["box",3]],[[],["pix",3]],[[],["box",3]],[[],["boxa",3]],[[]],[[],["pix",3]],[[["tryfrominterror",3]]],[[["borrowedbox",3]],["bool",15]],[[["borrowedbox",3]],["bool",15]],[[["borrowedpix",3]],["bool",15]],[[["borrowedpix",3]],["bool",15]],[[["box",3]],["bool",15]],[[["box",3]],["bool",15]],[[["boxa",3]],["bool",15]],[[["boxa",3]],["bool",15]],[[["pixreadmemerror",4]],["bool",15]],[[["pixreadmemerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[]],[[]],[[["l_int32",6]],[["boxcreatevaliderror",3],["result",4]]],[[["l_int32",6]],[["boxcreatevaliderror",3],["result",4]]],[[]],[[["l_int32",6]],[["option",4],["boxa",3]]],[[["isize",15]],[["borrowedbox",3],["option",4]]],[[["cstr",3]],[["pixreaderror",3],["result",4]]],[[],[["result",4],["pixreadmemerror",4]]]],"p":[[4,"PixReadMemError"],[3,"BorrowedBox"],[3,"BorrowedPix"],[3,"Box"],[3,"BoxCreateValidError"],[3,"Boxa"],[3,"Pix"],[3,"PixReadError"]]},\
"leptonica_sys":{"doc":"","t":[7,7,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,7,7,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,12,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,12,12,19,12,12,3,12,12,6,3,12,12,6,6,6,3,3,3,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,6,6,6,17,17,17,6,6,6,6,6,3,12,12,3,12,12,3,12,12,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,12,6,3,12,12,3,12,12,6,6,3,12,6,6,6,6,6,3,12,12,6,3,12,6,3,12,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,19,12,12,3,12,12,19,12,12,3,12,12,6,19,12,12,19,12,12,6,6,19,12,12,19,12,12,12,19,12,12,12,19,12,12,12,19,12,12,6,19,12,12,19,12,12,3,12,12,12,12,12,12,12,3,12,12,12,12,12,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,17,17,6,17,17,6,6,3,12,12,12,12,6,17,17,17,17,17,17,17,6,3,12,12,12,12,12,12,6,3,12,12,12,6,3,12,12,12,12,12,12,6,3,12,12,12,6,3,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,6,17,17,6,17,17,17,6,17,17,6,3,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,6,3,12,12,12,12,6,3,12,12,6,17,17,6,17,17,17,6,17,17,6,3,12,12,12,12,12,6,17,17,17,6,19,12,12,12,12,6,3,12,12,6,6,6,3,12,12,12,12,12,12,6,6,6,3,12,12,12,12,6,17,17,17,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,6,17,17,6,17,17,6,3,12,12,12,12,12,12,12,12,12,6,3,12,12,12,12,12,12,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,17,17,17,17,17,6,17,17,17,17,17,17,6,17,17,17,17,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,17,17,17,6,17,17,6,17,17,17,17,17,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,17,17,17,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,3,12,12,12,12,12,12,12,12,12,12,6,17,17,6,17,17,17,6,3,12,12,12,12,12,12,6,3,12,12,12,6,3,12,12,12,12,12,6,17,17,6,17,17,17,6,17,17,6,17,17,17,6,17,17,17,17,17,6,17,17,6,17,17,6,17,17,17,17,17,17,17,17,6,17,17,17,17,17,6,17,17,6,17,17,17,6,17,17,17,6,17,3,12,12,12,12,12,12,12,12,12,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,6,17,17,17,17,6,17,17,17,17,17,17,17,17,17,17,6,17,17,17,17,17,17,17,17,6,3,12,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,6,3,12,12,12,12,12,6,3,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,12,12,12,12,6,3,12,12,12,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,12,12,12,6,3,12,12,12,12,12,12,12,12,12,12,6,3,12,12,12,12,12,6,17,17,17,17,17,6,17,17,6,17,17,6,17,17,17,17,17,17,17,17,17,17,17,6,17,17,17,17,17,6,17,17,6,17,17,17,6,17,17,17,17,6,17,17,17,17,17,6,17,17,17,17,17,17,6,17,17,17,6,17,17,17,17,17,17,17,17,6,17,17,17,17,17,17,17,6,17,17,17,6,17,17,6,17,17,6,17,17,17,17,17,17,6,17,17,6,17,17,6,17,17,6,17,17,6,17,17,17,17,6,17,17,6,17,17,17,17,17,17,6,17,17,17,17,17,17,17,6,17,17,6,17,17,17,17,17,6,17,17,17,6,17,17,17,17,17,6,17,17,6,17,17,17,17,17,17,17,17,17,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,17,17,17,17,17,17,6,17,17,6,17,17,17,17,6,17,17,6,17,17,17,17,17,6,17,17,6,17,17,6,17,17,6,17,17,6,17,17,6,17,17,6,17,17,17,17,6,17,17,17,6,17,17,6,17,17,17,17,17,17,17,17,6,17,17,17,17,17,17,6,17,17,6,17,17,17,17,17,6,17,6,17,17,6,17,17,17,6,17,17,6,6,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,3,12,12,12,12,12,12,12,6,3,12,12,12,12,12,12,12,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,17,17,17,17,17,17,6,17,17,6,3,12,12,12,12,12,12,12,12,6,17,17,17,6,3,12,12,12,12,12,12,6,17,17,17,17,6,3,12,12,12,12,12,12,12,12,6,17,17,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,6,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["stdin","stdout","stderr","remove","rename","renameat","tmpfile","tmpnam","tmpnam_r","tempnam","fclose","fflush","fflush_unlocked","fopen","freopen","fdopen","fmemopen","open_memstream","setbuf","setvbuf","setbuffer","setlinebuf","fprintf","printf","sprintf","vfprintf","vprintf","vsprintf","snprintf","vsnprintf","vdprintf","dprintf","fscanf","scanf","sscanf","fscanf1","scanf1","sscanf1","vfscanf","vscanf","vsscanf","vfscanf1","vscanf1","vsscanf1","fgetc","getc","getchar","getc_unlocked","getchar_unlocked","fgetc_unlocked","fputc","putc","putchar","fputc_unlocked","putc_unlocked","putchar_unlocked","getw","putw","fgets","__getdelim","getdelim","getline","fputs","puts","ungetc","fread","fwrite","fread_unlocked","fwrite_unlocked","fseek","ftell","rewind","fseeko","ftello","fgetpos","fsetpos","clearerr","feof","ferror","clearerr_unlocked","feof_unlocked","ferror_unlocked","perror","sys_nerr","sys_errlist","fileno","fileno_unlocked","popen","pclose","ctermid","flockfile","ftrylockfile","funlockfile","__uflow","__overflow","__ctype_get_mb_cur_max","atof","atoi","atol","atoll","strtod","strtof","strtold","strtol","strtoul","strtoq","strtouq","strtoll","strtoull","l64a","a64l","select","pselect","random","srandom","initstate","setstate","random_r","srandom_r","initstate_r","setstate_r","rand","srand","rand_r","drand48","erand48","lrand48","nrand48","mrand48","jrand48","srand48","seed48","lcong48","drand48_r","erand48_r","lrand48_r","nrand48_r","mrand48_r","jrand48_r","srand48_r","seed48_r","lcong48_r","malloc","calloc","realloc","reallocarray","free","alloca","valloc","posix_memalign","aligned_alloc","abort","atexit","at_quick_exit","on_exit","exit","quick_exit","_Exit","getenv","putenv","setenv","unsetenv","clearenv","mktemp","mkstemp","mkstemps","mkdtemp","system","realpath","bsearch","qsort","abs","labs","llabs","div","ldiv","lldiv","ecvt","fcvt","gcvt","qecvt","qfcvt","qgcvt","ecvt_r","fcvt_r","qecvt_r","qfcvt_r","mblen","mbtowc","wctomb","mbstowcs","wcstombs","rpmatch","getsubopt","getloadavg","LeptDebugOK","LeptMsgSeverity","gplotstylenames","gplotfileoutputs","pixCleanBackgroundToWhite","pixBackgroundNormSimple","pixBackgroundNorm","pixBackgroundNormMorph","pixBackgroundNormGrayArray","pixBackgroundNormRGBArrays","pixBackgroundNormGrayArrayMorph","pixBackgroundNormRGBArraysMorph","pixGetBackgroundGrayMap","pixGetBackgroundRGBMap","pixGetBackgroundGrayMapMorph","pixGetBackgroundRGBMapMorph","pixFillMapHoles","pixExtendByReplication","pixSmoothConnectedRegions","pixGetInvBackgroundMap","pixApplyInvBackgroundGrayMap","pixApplyInvBackgroundRGBMap","pixApplyVariableGrayMap","pixGlobalNormRGB","pixGlobalNormNoSatRGB","pixThresholdSpreadNorm","pixBackgroundNormFlex","pixContrastNorm","pixMinMaxTiles","pixSetLowContrast","pixLinearTRCTiled","pixAffineSampledPta","pixAffineSampled","pixAffinePta","pixAffine","pixAffinePtaColor","pixAffineColor","pixAffinePtaGray","pixAffineGray","pixAffinePtaWithAlpha","getAffineXformCoeffs","affineInvertXform","affineXformSampledPt","affineXformPt","linearInterpolatePixelColor","linearInterpolatePixelGray","gaussjordan","pixAffineSequential","createMatrix2dTranslate","createMatrix2dScale","createMatrix2dRotate","ptaTranslate","ptaScale","ptaRotate","boxaTranslate","boxaScale","boxaRotate","ptaAffineTransform","boxaAffineTransform","l_productMatVec","l_productMat2","l_productMat3","l_productMat4","l_getDataBit","l_setDataBit","l_clearDataBit","l_setDataBitVal","l_getDataDibit","l_setDataDibit","l_clearDataDibit","l_getDataQbit","l_setDataQbit","l_clearDataQbit","l_getDataByte","l_setDataByte","l_getDataTwoBytes","l_setDataTwoBytes","l_getDataFourBytes","l_setDataFourBytes","barcodeDispatchDecoder","barcodeFormatIsSupported","pixFindBaselines","pixDeskewLocal","pixGetLocalSkewTransform","pixGetLocalSkewAngles","bbufferCreate","bbufferDestroy","bbufferDestroyAndSaveData","bbufferRead","bbufferReadStream","bbufferExtendArray","bbufferWrite","bbufferWriteStream","pixBilateral","pixBilateralGray","pixBilateralExact","pixBilateralGrayExact","pixBlockBilateralExact","makeRangeKernel","pixBilinearSampledPta","pixBilinearSampled","pixBilinearPta","pixBilinear","pixBilinearPtaColor","pixBilinearColor","pixBilinearPtaGray","pixBilinearGray","pixBilinearPtaWithAlpha","getBilinearXformCoeffs","bilinearXformSampledPt","bilinearXformPt","pixOtsuAdaptiveThreshold","pixOtsuThreshOnBackgroundNorm","pixMaskedThreshOnBackgroundNorm","pixSauvolaBinarizeTiled","pixSauvolaBinarize","pixThresholdByConnComp","pixThresholdByHisto","pixExpandBinaryReplicate","pixExpandBinaryPower2","pixReduceBinary2","pixReduceRankBinaryCascade","pixReduceRankBinary2","makeSubsampleTab2x","pixBlend","pixBlendMask","pixBlendGray","pixBlendGrayInverse","pixBlendColor","pixBlendColorByChannel","pixBlendGrayAdapt","pixFadeWithGray","pixBlendHardLight","pixBlendCmap","pixBlendWithGrayMask","pixBlendBackgroundToColor","pixMultiplyByColor","pixAlphaBlendUniform","pixAddAlphaToBlend","pixSetAlphaOverWhite","pixLinearEdgeFade","bmfCreate","bmfDestroy","bmfGetPix","bmfGetWidth","bmfGetBaseline","pixaGetFont","pixaSaveFont","pixReadStreamBmp","pixReadMemBmp","pixWriteStreamBmp","pixWriteMemBmp","l_bootnum_gen1","l_bootnum_gen2","l_bootnum_gen3","l_bootnum_gen4","boxCreate","boxCreateValid","boxCopy","boxClone","boxDestroy","boxGetGeometry","boxSetGeometry","boxGetSideLocations","boxSetSideLocations","boxGetRefcount","boxChangeRefcount","boxIsValid","boxaCreate","boxaCopy","boxaDestroy","boxaAddBox","boxaExtendArray","boxaExtendArrayToSize","boxaGetCount","boxaGetValidCount","boxaGetBox","boxaGetValidBox","boxaFindInvalidBoxes","boxaGetBoxGeometry","boxaIsFull","boxaReplaceBox","boxaInsertBox","boxaRemoveBox","boxaRemoveBoxAndSave","boxaSaveValid","boxaInitFull","boxaClear","boxaaCreate","boxaaCopy","boxaaDestroy","boxaaAddBoxa","boxaaExtendArray","boxaaExtendArrayToSize","boxaaGetCount","boxaaGetBoxCount","boxaaGetBoxa","boxaaGetBox","boxaaInitFull","boxaaExtendWithInit","boxaaReplaceBoxa","boxaaInsertBoxa","boxaaRemoveBoxa","boxaaAddBox","boxaaReadFromFiles","boxaaRead","boxaaReadStream","boxaaReadMem","boxaaWrite","boxaaWriteStream","boxaaWriteMem","boxaRead","boxaReadStream","boxaReadMem","boxaWriteDebug","boxaWrite","boxaWriteStream","boxaWriteStderr","boxaWriteMem","boxPrintStreamInfo","boxContains","boxIntersects","boxaContainedInBox","boxaContainedInBoxCount","boxaContainedInBoxa","boxaIntersectsBox","boxaIntersectsBoxCount","boxaClipToBox","boxaCombineOverlaps","boxaCombineOverlapsInPair","boxOverlapRegion","boxBoundingRegion","boxOverlapFraction","boxOverlapArea","boxaHandleOverlaps","boxOverlapDistance","boxSeparationDistance","boxCompareSize","boxContainsPt","boxaGetNearestToPt","boxaGetNearestToLine","boxaFindNearestBoxes","boxaGetNearestByDirection","boxGetCenter","boxIntersectByLine","boxClipToRectangle","boxClipToRectangleParams","boxRelocateOneSide","boxaAdjustSides","boxaAdjustBoxSides","boxAdjustSides","boxaSetSide","boxSetSide","boxaAdjustWidthToTarget","boxaAdjustHeightToTarget","boxEqual","boxaEqual","boxSimilar","boxaSimilar","boxaJoin","boxaaJoin","boxaSplitEvenOdd","boxaMergeEvenOdd","boxaTransform","boxTransform","boxaTransformOrdered","boxTransformOrdered","boxaRotateOrth","boxRotateOrth","boxaShiftWithPta","boxaSort","boxaBinSort","boxaSortByIndex","boxaSort2d","boxaSort2dByIndex","boxaExtractAsNuma","boxaExtractAsPta","boxaExtractCorners","boxaGetRankVals","boxaGetMedianVals","boxaGetAverageSize","boxaaGetExtent","boxaaFlattenToBoxa","boxaaFlattenAligned","boxaEncapsulateAligned","boxaaTranspose","boxaaAlignBox","pixMaskConnComp","pixMaskBoxa","pixPaintBoxa","pixSetBlackOrWhiteBoxa","pixPaintBoxaRandom","pixBlendBoxaRandom","pixDrawBoxa","pixDrawBoxaRandom","boxaaDisplay","pixaDisplayBoxaa","pixSplitIntoBoxa","pixSplitComponentIntoBoxa","makeMosaicStrips","boxaCompareRegions","pixSelectLargeULComp","boxaSelectLargeULBox","boxaSelectRange","boxaaSelectRange","boxaSelectBySize","boxaMakeSizeIndicator","boxaSelectByArea","boxaMakeAreaIndicator","boxaSelectByWHRatio","boxaMakeWHRatioIndicator","boxaSelectWithIndicator","boxaPermutePseudorandom","boxaPermuteRandom","boxaSwapBoxes","boxaConvertToPta","ptaConvertToBoxa","boxConvertToPta","ptaConvertToBox","boxaGetExtent","boxaGetCoverage","boxaaSizeRange","boxaSizeRange","boxaLocationRange","boxaGetSizes","boxaGetArea","boxaDisplayTiled","boxaSmoothSequenceMedian","boxaWindowedMedian","boxaModifyWithBoxa","boxaConstrainSize","boxaReconcileEvenOddHeight","boxaReconcilePairWidth","boxaSizeConsistency1","boxaSizeConsistency2","boxaReconcileAllByMedian","boxaReconcileSidesByMedian","boxaReconcileSizeByMedian","boxaPlotSides","boxaPlotSizes","boxaFillSequence","boxaSizeVariation","boxaMedianDimensions","l_byteaCreate","l_byteaInitFromMem","l_byteaInitFromFile","l_byteaInitFromStream","l_byteaCopy","l_byteaDestroy","l_byteaGetSize","l_byteaGetData","l_byteaCopyData","l_byteaAppendData","l_byteaAppendString","l_byteaJoin","l_byteaSplit","l_byteaFindEachSequence","l_byteaWrite","l_byteaWriteStream","ccbaCreate","ccbaDestroy","ccbCreate","ccbDestroy","ccbaAddCcb","ccbaGetCount","ccbaGetCcb","pixGetAllCCBorders","pixGetOuterBordersPtaa","pixGetOuterBorder","ccbaGenerateGlobalLocs","ccbaGenerateStepChains","ccbaStepChainsToPixCoords","ccbaGenerateSPGlobalLocs","ccbaGenerateSinglePath","getCutPathForHole","ccbaDisplayBorder","ccbaDisplaySPBorder","ccbaDisplayImage1","ccbaDisplayImage2","ccbaWrite","ccbaWriteStream","ccbaRead","ccbaReadStream","ccbaWriteSVG","ccbaWriteSVGString","pixaThinConnected","pixThinConnected","pixThinConnectedBySet","selaMakeThinSets","pixFindCheckerboardCorners","makeCheckerboardCornerSela","jbCorrelation","jbRankHaus","jbWordsInTextlines","pixGetWordsInTextlines","pixGetWordBoxesInTextlines","pixFindWordAndCharacterBoxes","boxaExtractSortedPattern","numaaCompareImagesByBoxes","pixColorContent","pixColorMagnitude","pixMaskOverColorPixels","pixMaskOverGrayPixels","pixMaskOverColorRange","pixColorFraction","pixFindColorRegions","pixNumSignificantGrayColors","pixColorsForQuantization","pixNumColors","pixConvertRGBToCmap","pixGetMostPopulatedColors","pixSimpleColorQuantize","pixGetRGBHistogram","makeRGBIndexTables","getRGBFromIndex","pixHasHighlightRed","pixColorGrayRegions","pixColorGray","pixColorGrayMasked","pixSnapColor","pixSnapColorCmap","pixLinearMapToTargetColor","pixelLinearMapToTargetColor","pixShiftByComponent","pixelShiftByComponent","pixelFractionalShift","pixcmapCreate","pixcmapCreateRandom","pixcmapCreateLinear","pixcmapCopy","pixcmapDestroy","pixcmapIsValid","pixcmapAddColor","pixcmapAddRGBA","pixcmapAddNewColor","pixcmapAddNearestColor","pixcmapUsableColor","pixcmapAddBlackOrWhite","pixcmapSetBlackAndWhite","pixcmapGetCount","pixcmapGetFreeCount","pixcmapGetDepth","pixcmapGetMinDepth","pixcmapClear","pixcmapGetColor","pixcmapGetColor32","pixcmapGetRGBA","pixcmapGetRGBA32","pixcmapResetColor","pixcmapSetAlpha","pixcmapGetIndex","pixcmapHasColor","pixcmapIsOpaque","pixcmapIsBlackAndWhite","pixcmapCountGrayColors","pixcmapGetRankIntensity","pixcmapGetNearestIndex","pixcmapGetNearestGrayIndex","pixcmapGetDistanceToColor","pixcmapGetRangeValues","pixcmapGrayToColor","pixcmapColorToGray","pixcmapConvertTo4","pixcmapConvertTo8","pixcmapRead","pixcmapReadStream","pixcmapReadMem","pixcmapWrite","pixcmapWriteStream","pixcmapWriteMem","pixcmapToArrays","pixcmapToRGBTable","pixcmapSerializeToMemory","pixcmapDeserializeFromMemory","pixcmapConvertToHex","pixcmapGammaTRC","pixcmapContrastTRC","pixcmapShiftIntensity","pixcmapShiftByComponent","pixColorMorph","pixOctreeColorQuant","pixOctreeColorQuantGeneral","makeRGBToIndexTables","getOctcubeIndexFromRGB","pixOctreeQuantByPopulation","pixOctreeQuantNumColors","pixOctcubeQuantMixedWithGray","pixFixedOctcubeQuant256","pixFewColorsOctcubeQuant1","pixFewColorsOctcubeQuant2","pixFewColorsOctcubeQuantMixed","pixFixedOctcubeQuantGenRGB","pixQuantFromCmap","pixOctcubeQuantFromCmap","pixOctcubeHistogram","pixcmapToOctcubeLUT","pixRemoveUnusedColors","pixNumberOccupiedOctcubes","pixMedianCutQuant","pixMedianCutQuantGeneral","pixMedianCutQuantMixed","pixFewColorsMedianCutQuantMixed","pixMedianCutHisto","pixColorSegment","pixColorSegmentCluster","pixAssignToNearestColor","pixColorSegmentClean","pixColorSegmentRemoveColors","pixConvertRGBToHSV","pixConvertHSVToRGB","convertRGBToHSV","convertHSVToRGB","pixcmapConvertRGBToHSV","pixcmapConvertHSVToRGB","pixConvertRGBToHue","pixConvertRGBToSaturation","pixConvertRGBToValue","pixMakeRangeMaskHS","pixMakeRangeMaskHV","pixMakeRangeMaskSV","pixMakeHistoHS","pixMakeHistoHV","pixMakeHistoSV","pixFindHistoPeaksHSV","displayHSVColorRange","pixConvertRGBToYUV","pixConvertYUVToRGB","convertRGBToYUV","convertYUVToRGB","pixcmapConvertRGBToYUV","pixcmapConvertYUVToRGB","pixConvertRGBToXYZ","fpixaConvertXYZToRGB","convertRGBToXYZ","convertXYZToRGB","fpixaConvertXYZToLAB","fpixaConvertLABToXYZ","convertXYZToLAB","convertLABToXYZ","pixConvertRGBToLAB","fpixaConvertLABToRGB","convertRGBToLAB","convertLABToRGB","pixEqual","pixEqualWithAlpha","pixEqualWithCmap","cmapEqual","pixUsesCmapColor","pixCorrelationBinary","pixDisplayDiffBinary","pixCompareBinary","pixCompareGrayOrRGB","pixCompareGray","pixCompareRGB","pixCompareTiled","pixCompareRankDifference","pixTestForSimilarity","pixGetDifferenceStats","pixGetDifferenceHistogram","pixGetPerceptualDiff","pixGetPSNR","pixaComparePhotoRegionsByHisto","pixComparePhotoRegionsByHisto","pixGenPhotoHistos","pixPadToCenterCentroid","pixCentroid8","pixDecideIfPhotoImage","compareTilesByHisto","pixCompareGrayByHisto","pixCropAlignedToCentroid","l_compressGrayHistograms","l_uncompressGrayHistograms","pixCompareWithTranslation","pixBestCorrelation","pixConnComp","pixConnCompPixa","pixConnCompBB","pixCountConnComp","nextOnPixelInRaster","pixSeedfillBB","pixSeedfill4BB","pixSeedfill8BB","pixSeedfill","pixSeedfill4","pixSeedfill8","convertFilesTo1bpp","pixBlockconv","pixBlockconvGray","pixBlockconvAccum","pixBlockconvGrayUnnormalized","pixBlockconvTiled","pixBlockconvGrayTile","pixWindowedStats","pixWindowedMean","pixWindowedMeanSquare","pixWindowedVariance","pixMeanSquareAccum","pixBlockrank","pixBlocksum","pixCensusTransform","pixConvolve","pixConvolveSep","pixConvolveRGB","pixConvolveRGBSep","fpixConvolve","fpixConvolveSep","pixConvolveWithBias","l_setConvolveSampling","pixAddGaussianNoise","gaussDistribSampling","pixCorrelationScore","pixCorrelationScoreThresholded","pixCorrelationScoreSimple","pixCorrelationScoreShifted","dewarpCreate","dewarpCreateRef","dewarpDestroy","dewarpaCreate","dewarpaCreateFromPixacomp","dewarpaDestroy","dewarpaDestroyDewarp","dewarpaInsertDewarp","dewarpaGetDewarp","dewarpaSetCurvatures","dewarpaUseBothArrays","dewarpaSetCheckColumns","dewarpaSetMaxDistance","dewarpRead","dewarpReadStream","dewarpReadMem","dewarpWrite","dewarpWriteStream","dewarpWriteMem","dewarpaRead","dewarpaReadStream","dewarpaReadMem","dewarpaWrite","dewarpaWriteStream","dewarpaWriteMem","dewarpBuildPageModel","dewarpFindVertDisparity","dewarpFindHorizDisparity","dewarpGetTextlineCenters","dewarpRemoveShortLines","dewarpFindHorizSlopeDisparity","dewarpBuildLineModel","dewarpaModelStatus","dewarpaApplyDisparity","dewarpaApplyDisparityBoxa","dewarpMinimize","dewarpPopulateFullRes","dewarpSinglePage","dewarpSinglePageInit","dewarpSinglePageRun","dewarpaListPages","dewarpaSetValidModels","dewarpaInsertRefModels","dewarpaStripRefModels","dewarpaRestoreModels","dewarpaInfo","dewarpaModelStats","dewarpaShowArrays","dewarpDebug","dewarpShowResults","l_dnaCreate","l_dnaCreateFromIArray","l_dnaCreateFromDArray","l_dnaMakeSequence","l_dnaDestroy","l_dnaCopy","l_dnaClone","l_dnaEmpty","l_dnaAddNumber","l_dnaInsertNumber","l_dnaRemoveNumber","l_dnaReplaceNumber","l_dnaGetCount","l_dnaSetCount","l_dnaGetDValue","l_dnaGetIValue","l_dnaSetValue","l_dnaShiftValue","l_dnaGetIArray","l_dnaGetDArray","l_dnaGetRefcount","l_dnaChangeRefcount","l_dnaGetParameters","l_dnaSetParameters","l_dnaCopyParameters","l_dnaRead","l_dnaReadStream","l_dnaWrite","l_dnaWriteStream","l_dnaaCreate","l_dnaaCreateFull","l_dnaaTruncate","l_dnaaDestroy","l_dnaaAddDna","l_dnaaGetCount","l_dnaaGetDnaCount","l_dnaaGetNumberCount","l_dnaaGetDna","l_dnaaReplaceDna","l_dnaaGetValue","l_dnaaAddNumber","l_dnaaRead","l_dnaaReadStream","l_dnaaWrite","l_dnaaWriteStream","l_dnaJoin","l_dnaaFlattenToDna","l_dnaConvertToNuma","numaConvertToDna","l_dnaUnionByAset","l_dnaRemoveDupsByAset","l_dnaIntersectionByAset","l_asetCreateFromDna","l_dnaDiffAdjValues","l_dnaHashCreate","l_dnaHashDestroy","l_dnaHashGetCount","l_dnaHashGetTotalCount","l_dnaHashGetDna","l_dnaHashAdd","l_dnaHashCreateFromDna","l_dnaRemoveDupsByHash","l_dnaMakeHistoByHash","l_dnaIntersectionByHash","l_dnaFindValByHash","pixMorphDwa_2","pixFMorphopGen_2","fmorphopgen_low_2","pixSobelEdgeFilter","pixTwoSidedEdgeFilter","pixMeasureEdgeSmoothness","pixGetEdgeProfile","pixGetLastOffPixelInRun","pixGetLastOnPixelInRun","encodeBase64","decodeBase64","encodeAscii85","decodeAscii85","reformatPacked64","pixGammaTRC","pixGammaTRCMasked","pixGammaTRCWithAlpha","numaGammaTRC","pixContrastTRC","pixContrastTRCMasked","numaContrastTRC","pixEqualizeTRC","numaEqualizeTRC","pixTRCMap","pixTRCMapGeneral","pixUnsharpMasking","pixUnsharpMaskingGray","pixUnsharpMaskingFast","pixUnsharpMaskingGrayFast","pixUnsharpMaskingGray1D","pixUnsharpMaskingGray2D","pixModifyHue","pixModifySaturation","pixMeasureSaturation","pixModifyBrightness","pixMosaicColorShiftRGB","pixColorShiftRGB","pixDarkenGray","pixMultConstantColor","pixMultMatrixColor","pixHalfEdgeByBandpass","fhmtautogen","fhmtautogen1","fhmtautogen2","pixHMTDwa_1","pixFHMTGen_1","fhmtgen_low_1","pixItalicWords","pixOrientCorrect","pixOrientDetect","makeOrientDecision","pixUpDownDetect","pixUpDownDetectGeneral","pixOrientDetectDwa","pixUpDownDetectDwa","pixUpDownDetectGeneralDwa","pixMirrorDetect","pixMirrorDetectDwa","pixFlipFHMTGen","fmorphautogen","fmorphautogen1","fmorphautogen2","pixMorphDwa_1","pixFMorphopGen_1","fmorphopgen_low_1","fpixCreate","fpixCreateTemplate","fpixClone","fpixCopy","fpixResizeImageData","fpixDestroy","fpixGetDimensions","fpixSetDimensions","fpixGetWpl","fpixSetWpl","fpixGetRefcount","fpixChangeRefcount","fpixGetResolution","fpixSetResolution","fpixCopyResolution","fpixGetData","fpixSetData","fpixGetPixel","fpixSetPixel","fpixaCreate","fpixaCopy","fpixaDestroy","fpixaAddFPix","fpixaGetCount","fpixaChangeRefcount","fpixaGetFPix","fpixaGetFPixDimensions","fpixaGetData","fpixaGetPixel","fpixaSetPixel","dpixCreate","dpixCreateTemplate","dpixClone","dpixCopy","dpixResizeImageData","dpixDestroy","dpixGetDimensions","dpixSetDimensions","dpixGetWpl","dpixSetWpl","dpixGetRefcount","dpixChangeRefcount","dpixGetResolution","dpixSetResolution","dpixCopyResolution","dpixGetData","dpixSetData","dpixGetPixel","dpixSetPixel","fpixRead","fpixReadStream","fpixReadMem","fpixWrite","fpixWriteStream","fpixWriteMem","fpixEndianByteSwap","dpixRead","dpixReadStream","dpixReadMem","dpixWrite","dpixWriteStream","dpixWriteMem","dpixEndianByteSwap","fpixPrintStream","pixConvertToFPix","pixConvertToDPix","fpixConvertToPix","fpixDisplayMaxDynamicRange","fpixConvertToDPix","dpixConvertToPix","dpixConvertToFPix","fpixGetMin","fpixGetMax","dpixGetMin","dpixGetMax","fpixScaleByInteger","dpixScaleByInteger","fpixLinearCombination","fpixAddMultConstant","dpixLinearCombination","dpixAddMultConstant","fpixSetAllArbitrary","dpixSetAllArbitrary","fpixAddBorder","fpixRemoveBorder","fpixAddMirroredBorder","fpixAddContinuedBorder","fpixAddSlopeBorder","fpixRasterop","fpixRotateOrth","fpixRotate180","fpixRotate90","fpixFlipLR","fpixFlipTB","fpixAffinePta","fpixAffine","fpixProjectivePta","fpixProjective","linearInterpolatePixelFloat","fpixThresholdToPix","pixComponentFunction","pixReadStreamGif","pixReadMemGif","pixWriteStreamGif","pixWriteMemGif","gplotCreate","gplotDestroy","gplotAddPlot","gplotSetScaling","gplotMakeOutputPix","gplotMakeOutput","gplotGenCommandFile","gplotGenDataFiles","gplotSimple1","gplotSimple2","gplotSimpleN","gplotSimplePix1","gplotSimplePix2","gplotSimplePixN","gplotSimpleXY1","gplotSimpleXY2","gplotSimpleXYN","gplotGeneralPix1","gplotGeneralPix2","gplotGeneralPixN","gplotRead","gplotWrite","generatePtaLine","generatePtaWideLine","generatePtaBox","generatePtaBoxa","generatePtaHashBox","generatePtaHashBoxa","generatePtaaBoxa","generatePtaaHashBoxa","generatePtaPolyline","generatePtaGrid","convertPtaLineTo4cc","generatePtaFilledCircle","generatePtaFilledSquare","generatePtaLineFromPt","locatePtRadially","pixRenderPlotFromNuma","makePlotPtaFromNuma","pixRenderPlotFromNumaGen","makePlotPtaFromNumaGen","pixRenderPta","pixRenderPtaArb","pixRenderPtaBlend","pixRenderLine","pixRenderLineArb","pixRenderLineBlend","pixRenderBox","pixRenderBoxArb","pixRenderBoxBlend","pixRenderBoxa","pixRenderBoxaArb","pixRenderBoxaBlend","pixRenderHashBox","pixRenderHashBoxArb","pixRenderHashBoxBlend","pixRenderHashMaskArb","pixRenderHashBoxa","pixRenderHashBoxaArb","pixRenderHashBoxaBlend","pixRenderPolyline","pixRenderPolylineArb","pixRenderPolylineBlend","pixRenderGridArb","pixRenderRandomCmapPtaa","pixRenderPolygon","pixFillPolygon","pixRenderContours","fpixAutoRenderContours","fpixRenderContours","pixGeneratePtaBoundary","pixErodeGray","pixDilateGray","pixOpenGray","pixCloseGray","pixErodeGray3","pixDilateGray3","pixOpenGray3","pixCloseGray3","pixDitherToBinary","pixDitherToBinarySpec","ditherToBinaryLineLow","pixThresholdToBinary","thresholdToBinaryLineLow","pixVarThresholdToBinary","pixAdaptThresholdToBinary","pixAdaptThresholdToBinaryGen","pixGenerateMaskByValue","pixGenerateMaskByBand","pixDitherTo2bpp","pixDitherTo2bppSpec","pixThresholdTo2bpp","pixThresholdTo4bpp","pixThresholdOn8bpp","pixThresholdGrayArb","makeGrayQuantIndexTable","makeGrayQuantTableArb","pixGenerateMaskByBand32","pixGenerateMaskByDiscr32","pixGrayQuantFromHisto","pixGrayQuantFromCmap","lheapCreate","lheapDestroy","lheapAdd","lheapRemove","lheapGetCount","lheapGetElement","lheapSort","lheapSortStrictOrder","lheapPrint","jbRankHausInit","jbCorrelationInit","jbCorrelationInitWithoutComponents","jbAddPages","jbAddPage","jbAddPageComponents","jbClassifyRankHaus","pixHaustest","pixRankHaustest","jbClassifyCorrelation","jbGetComponents","pixWordMaskByDilation","pixWordBoxesByDilation","jbAccumulateComposites","jbTemplatesFromComposites","jbClasserCreate","jbClasserDestroy","jbDataSave","jbDataDestroy","jbDataWrite","jbDataRead","jbDataRender","jbGetULCorners","jbGetLLCorners","readHeaderJp2k","freadHeaderJp2k","readHeaderMemJp2k","fgetJp2kResolution","pixReadJp2k","pixReadStreamJp2k","pixWriteJp2k","pixWriteStreamJp2k","pixReadMemJp2k","pixWriteMemJp2k","pixReadJpeg","pixReadStreamJpeg","readHeaderJpeg","freadHeaderJpeg","fgetJpegResolution","fgetJpegComment","pixWriteJpeg","pixWriteStreamJpeg","pixReadMemJpeg","readHeaderMemJpeg","readResolutionMemJpeg","pixWriteMemJpeg","pixSetChromaSampling","kernelCreate","kernelDestroy","kernelCopy","kernelGetElement","kernelSetElement","kernelGetParameters","kernelSetOrigin","kernelGetSum","kernelGetMinMax","kernelNormalize","kernelInvert","create2dFloatArray","kernelRead","kernelReadStream","kernelWrite","kernelWriteStream","kernelCreateFromString","kernelCreateFromFile","kernelCreateFromPix","kernelDisplayInPix","parseStringForNumbers","makeFlatKernel","makeGaussianKernel","makeGaussianKernelSep","makeDoGKernel","getImagelibVersions","listDestroy","listAddToHead","listAddToTail","listInsertBefore","listInsertAfter","listRemoveElement","listRemoveFromHead","listRemoveFromTail","listFindElement","listFindTail","listGetCount","listReverse","listJoin","l_amapCreate","l_amapFind","l_amapInsert","l_amapDelete","l_amapDestroy","l_amapGetFirst","l_amapGetNext","l_amapGetLast","l_amapGetPrev","l_amapSize","l_asetCreate","l_asetFind","l_asetInsert","l_asetDelete","l_asetDestroy","l_asetGetFirst","l_asetGetNext","l_asetGetLast","l_asetGetPrev","l_asetSize","generateBinaryMaze","pixSearchBinaryMaze","pixSearchGrayMaze","pixDilate","pixErode","pixHMT","pixOpen","pixClose","pixCloseSafe","pixOpenGeneralized","pixCloseGeneralized","pixDilateBrick","pixErodeBrick","pixOpenBrick","pixCloseBrick","pixCloseSafeBrick","selectComposableSels","selectComposableSizes","pixDilateCompBrick","pixErodeCompBrick","pixOpenCompBrick","pixCloseCompBrick","pixCloseSafeCompBrick","resetMorphBoundaryCondition","getMorphBorderPixelColor","pixExtractBoundary","pixMorphSequenceMasked","pixMorphSequenceByComponent","pixaMorphSequenceByComponent","pixMorphSequenceByRegion","pixaMorphSequenceByRegion","pixUnionOfMorphOps","pixIntersectionOfMorphOps","pixSelectiveConnCompFill","pixRemoveMatchedPattern","pixDisplayMatchedPattern","pixaExtendByMorph","pixaExtendByScaling","pixSeedfillMorph","pixRunHistogramMorph","pixTophat","pixHDome","pixFastTophat","pixMorphGradient","pixaCentroids","pixCentroid","pixDilateBrickDwa","pixErodeBrickDwa","pixOpenBrickDwa","pixCloseBrickDwa","pixDilateCompBrickDwa","pixErodeCompBrickDwa","pixOpenCompBrickDwa","pixCloseCompBrickDwa","pixDilateCompBrickExtendDwa","pixErodeCompBrickExtendDwa","pixOpenCompBrickExtendDwa","pixCloseCompBrickExtendDwa","getExtendedCompositeParameters","pixMorphSequence","pixMorphCompSequence","pixMorphSequenceDwa","pixMorphCompSequenceDwa","morphSequenceVerify","pixGrayMorphSequence","pixColorMorphSequence","numaCreate","numaCreateFromIArray","numaCreateFromFArray","numaCreateFromString","numaDestroy","numaCopy","numaClone","numaEmpty","numaAddNumber","numaInsertNumber","numaRemoveNumber","numaReplaceNumber","numaGetCount","numaSetCount","numaGetFValue","numaGetIValue","numaSetValue","numaShiftValue","numaGetIArray","numaGetFArray","numaGetRefcount","numaChangeRefcount","numaGetParameters","numaSetParameters","numaCopyParameters","numaConvertToSarray","numaRead","numaReadStream","numaReadMem","numaWriteDebug","numaWrite","numaWriteStream","numaWriteStderr","numaWriteMem","numaaCreate","numaaCreateFull","numaaTruncate","numaaDestroy","numaaAddNuma","numaaGetCount","numaaGetNumaCount","numaaGetNumberCount","numaaGetPtrArray","numaaGetNuma","numaaReplaceNuma","numaaGetValue","numaaAddNumber","numaaRead","numaaReadStream","numaaReadMem","numaaWrite","numaaWriteStream","numaaWriteMem","numaArithOp","numaLogicalOp","numaInvert","numaSimilar","numaAddToNumber","numaGetMin","numaGetMax","numaGetSum","numaGetPartialSums","numaGetSumOnInterval","numaHasOnlyIntegers","numaSubsample","numaMakeDelta","numaMakeSequence","numaMakeConstant","numaMakeAbsValue","numaAddBorder","numaAddSpecifiedBorder","numaRemoveBorder","numaCountNonzeroRuns","numaGetNonzeroRange","numaGetCountRelativeToZero","numaClipToInterval","numaMakeThresholdIndicator","numaUniformSampling","numaReverse","numaLowPassIntervals","numaThresholdEdges","numaGetSpanValues","numaGetEdgeValues","numaInterpolateEqxVal","numaInterpolateArbxVal","numaInterpolateEqxInterval","numaInterpolateArbxInterval","numaFitMax","numaDifferentiateInterval","numaIntegrateInterval","numaSortGeneral","numaSortAutoSelect","numaSortIndexAutoSelect","numaChooseSortType","numaSort","numaBinSort","numaGetSortIndex","numaGetBinSortIndex","numaSortByIndex","numaIsSorted","numaSortPair","numaInvertMap","numaPseudorandomSequence","numaRandomPermutation","numaGetRankValue","numaGetMedian","numaGetBinnedMedian","numaGetMeanDevFromMedian","numaGetMedianDevFromMedian","numaGetMode","numaJoin","numaaJoin","numaaFlattenToNuma","numaErode","numaDilate","numaOpen","numaClose","numaTransform","numaSimpleStats","numaWindowedStats","numaWindowedMean","numaWindowedMeanSquare","numaWindowedVariance","numaWindowedMedian","numaConvertToInt","numaMakeHistogram","numaMakeHistogramAuto","numaMakeHistogramClipped","numaRebinHistogram","numaNormalizeHistogram","numaGetStatsUsingHistogram","numaGetHistogramStats","numaGetHistogramStatsOnInterval","numaMakeRankFromHistogram","numaHistogramGetRankFromVal","numaHistogramGetValFromRank","numaDiscretizeRankAndIntensity","numaGetRankBinValues","numaSplitDistribution","grayHistogramsToEMD","numaEarthMoverDistance","grayInterHistogramStats","numaFindPeaks","numaFindExtrema","numaFindLocForThreshold","numaCountReversals","numaSelectCrossingThreshold","numaCrossingsByThreshold","numaCrossingsByPeaks","numaEvalBestHaarParameters","numaEvalHaarSum","genConstrainedNumaInRange","pixGetRegionsBinary","pixGenHalftoneMask","pixGenerateHalftoneMask","pixGenTextlineMask","pixGenTextblockMask","pixFindPageForeground","pixSplitIntoCharacters","pixSplitComponentWithProfile","pixExtractTextlines","pixExtractRawTextlines","pixCountTextColumns","pixDecideIfText","pixFindThreshFgExtent","pixDecideIfTable","pixPrepare1bpp","pixEstimateBackground","pixFindLargeRectangles","pixFindLargestRectangle","pixFindRectangleInCC","pixAutoPhotoinvert","pixSetSelectCmap","pixColorGrayRegionsCmap","pixColorGrayCmap","pixColorGrayMaskedCmap","addColorizedGrayToCmap","pixSetSelectMaskedCmap","pixSetMaskedCmap","parseForProtos","partifyFiles","partifyPixac","boxaGetWhiteblocks","boxaPruneSortedOnOverlap","convertFilesToPdf","saConvertFilesToPdf","saConvertFilesToPdfData","selectDefaultPdfEncoding","convertUnscaledFilesToPdf","saConvertUnscaledFilesToPdf","saConvertUnscaledFilesToPdfData","convertUnscaledToPdfData","pixaConvertToPdf","pixaConvertToPdfData","convertToPdf","convertImageDataToPdf","convertToPdfData","convertImageDataToPdfData","pixConvertToPdf","pixWriteStreamPdf","pixWriteMemPdf","convertSegmentedFilesToPdf","convertNumberedMasksToBoxaa","convertToPdfSegmented","pixConvertToPdfSegmented","convertToPdfDataSegmented","pixConvertToPdfDataSegmented","concatenatePdf","saConcatenatePdf","ptraConcatenatePdf","concatenatePdfToData","saConcatenatePdfToData","pixConvertToPdfData","ptraConcatenatePdfToData","convertTiffMultipageToPdf","l_generateCIDataForPdf","l_generateFlateDataPdf","l_generateJpegData","l_generateJpegDataMem","l_generateCIData","pixGenerateCIData","l_generateFlateData","l_generateG4Data","cidConvertToPdfData","l_CIDataDestroy","l_pdfSetG4ImageMask","l_pdfSetDateAndVersion","setPixMemoryManager","pixCreate","pixCreateNoInit","pixCreateTemplate","pixCreateTemplateNoInit","pixCreateWithCmap","pixCreateHeader","pixClone","pixDestroy","pixCopy","pixResizeImageData","pixCopyColormap","pixSizesEqual","pixTransferAllData","pixSwapAndDestroy","pixGetWidth","pixSetWidth","pixGetHeight","pixSetHeight","pixGetDepth","pixSetDepth","pixGetDimensions","pixSetDimensions","pixCopyDimensions","pixGetSpp","pixSetSpp","pixCopySpp","pixGetWpl","pixSetWpl","pixGetRefcount","pixChangeRefcount","pixGetXRes","pixSetXRes","pixGetYRes","pixSetYRes","pixGetResolution","pixSetResolution","pixCopyResolution","pixScaleResolution","pixGetInputFormat","pixSetInputFormat","pixCopyInputFormat","pixSetSpecial","pixGetText","pixSetText","pixAddText","pixCopyText","pixGetColormap","pixSetColormap","pixDestroyColormap","pixGetData","pixSetData","pixExtractData","pixFreeData","pixGetLinePtrs","pixPrintStreamInfo","pixGetPixel","pixSetPixel","pixGetRGBPixel","pixSetRGBPixel","pixSetCmapPixel","pixGetRandomPixel","pixClearPixel","pixFlipPixel","setPixelLow","pixGetBlackOrWhiteVal","pixClearAll","pixSetAll","pixSetAllGray","pixSetAllArbitrary","pixSetBlackOrWhite","pixSetComponentArbitrary","pixClearInRect","pixSetInRect","pixSetInRectArbitrary","pixBlendInRect","pixSetPadBits","pixSetPadBitsBand","pixSetOrClearBorder","pixSetBorderVal","pixSetBorderRingVal","pixSetMirroredBorder","pixCopyBorder","pixAddBorder","pixAddBlackOrWhiteBorder","pixAddBorderGeneral","pixRemoveBorder","pixRemoveBorderGeneral","pixRemoveBorderToSize","pixAddMirroredBorder","pixAddRepeatedBorder","pixAddMixedBorder","pixAddContinuedBorder","pixShiftAndTransferAlpha","pixDisplayLayersRGBA","pixCreateRGBImage","pixGetRGBComponent","pixSetRGBComponent","pixGetRGBComponentCmap","pixCopyRGBComponent","composeRGBPixel","composeRGBAPixel","extractRGBValues","extractRGBAValues","extractMinMaxComponent","pixGetRGBLine","setLineDataVal","pixEndianByteSwapNew","pixEndianByteSwap","lineEndianByteSwap","pixEndianTwoByteSwapNew","pixEndianTwoByteSwap","pixGetRasterData","pixAlphaIsOpaque","pixSetupByteProcessing","pixCleanupByteProcessing","l_setAlphaMaskBorder","pixSetMasked","pixSetMaskedGeneral","pixCombineMasked","pixCombineMaskedGeneral","pixPaintThroughMask","pixCopyWithBoxa","pixPaintSelfThroughMask","pixMakeMaskFromVal","pixMakeMaskFromLUT","pixMakeArbMaskFromRGB","pixSetUnderTransparency","pixMakeAlphaFromMask","pixGetColorNearMaskBoundary","pixDisplaySelectedPixels","pixInvert","pixOr","pixAnd","pixXor","pixSubtract","pixZero","pixForegroundFraction","pixaCountPixels","pixCountPixels","pixCountPixelsInRect","pixCountByRow","pixCountByColumn","pixCountPixelsByRow","pixCountPixelsByColumn","pixCountPixelsInRow","pixGetMomentByColumn","pixThresholdPixelSum","makePixelSumTab8","makePixelCentroidTab8","pixAverageByRow","pixAverageByColumn","pixAverageInRect","pixAverageInRectRGB","pixVarianceByRow","pixVarianceByColumn","pixVarianceInRect","pixAbsDiffByRow","pixAbsDiffByColumn","pixAbsDiffInRect","pixAbsDiffOnLine","pixCountArbInRect","pixMirroredTiling","pixFindRepCloseTile","pixGetGrayHistogram","pixGetGrayHistogramMasked","pixGetGrayHistogramInRect","pixGetGrayHistogramTiled","pixGetColorHistogram","pixGetColorHistogramMasked","pixGetCmapHistogram","pixGetCmapHistogramMasked","pixGetCmapHistogramInRect","pixCountRGBColors","pixGetColorAmapHistogram","amapGetCountForColor","pixGetRankValue","pixGetRankValueMaskedRGB","pixGetRankValueMasked","pixGetPixelAverage","pixGetPixelStats","pixGetAverageMaskedRGB","pixGetAverageMasked","pixGetAverageTiledRGB","pixGetAverageTiled","pixRowStats","pixColumnStats","pixGetRangeValues","pixGetExtremeValue","pixGetMaxValueInRect","pixGetBinnedComponentRange","pixGetRankColorArray","pixGetBinnedColor","pixDisplayColorArray","pixRankBinByStrip","pixaGetAlignedStats","pixaExtractColumnFromEachPix","pixGetRowStats","pixGetColumnStats","pixSetPixelColumn","pixThresholdForFgBg","pixSplitDistributionFgBg","pixaFindDimensions","pixFindAreaPerimRatio","pixaFindPerimToAreaRatio","pixFindPerimToAreaRatio","pixaFindPerimSizeRatio","pixFindPerimSizeRatio","pixaFindAreaFraction","pixFindAreaFraction","pixaFindAreaFractionMasked","pixFindAreaFractionMasked","pixaFindWidthHeightRatio","pixaFindWidthHeightProduct","pixFindOverlapFraction","pixFindRectangleComps","pixConformsToRectangle","pixClipRectangles","pixClipRectangle","pixClipMasked","pixCropToMatch","pixCropToSize","pixResizeToMatch","pixSelectComponentBySize","pixFilterComponentBySize","pixMakeSymmetricMask","pixMakeFrameMask","pixMakeCoveringOfRectangles","pixFractionFgInMask","pixClipToForeground","pixTestClipToForeground","pixClipBoxToForeground","pixScanForForeground","pixClipBoxToEdges","pixScanForEdge","pixExtractOnLine","pixAverageOnLine","pixAverageIntensityProfile","pixReversalProfile","pixWindowedVarianceOnLine","pixMinMaxNearLine","pixRankRowTransform","pixRankColumnTransform","pixaCreate","pixaCreateFromPix","pixaCreateFromBoxa","pixaSplitPix","pixaDestroy","pixaCopy","pixaAddPix","pixaAddBox","pixaExtendArrayToSize","pixaGetCount","pixaChangeRefcount","pixaGetPix","pixaGetPixDimensions","pixaGetBoxa","pixaGetBoxaCount","pixaGetBox","pixaGetBoxGeometry","pixaSetBoxa","pixaGetPixArray","pixaVerifyDepth","pixaVerifyDimensions","pixaIsFull","pixaCountText","pixaSetText","pixaGetLinePtrs","pixaWriteStreamInfo","pixaReplacePix","pixaInsertPix","pixaRemovePix","pixaRemovePixAndSave","pixaRemoveSelected","pixaInitFull","pixaClear","pixaJoin","pixaInterleave","pixaaJoin","pixaaCreate","pixaaCreateFromPixa","pixaaDestroy","pixaaAddPixa","pixaaExtendArray","pixaaAddPix","pixaaAddBox","pixaaGetCount","pixaaGetPixa","pixaaGetBoxa","pixaaGetPix","pixaaVerifyDepth","pixaaVerifyDimensions","pixaaIsFull","pixaaInitFull","pixaaReplacePixa","pixaaClear","pixaaTruncate","pixaRead","pixaReadStream","pixaReadMem","pixaWriteDebug","pixaWrite","pixaWriteStream","pixaWriteMem","pixaReadBoth","pixaaReadFromFiles","pixaaRead","pixaaReadStream","pixaaReadMem","pixaaWrite","pixaaWriteStream","pixaaWriteMem","pixaccCreate","pixaccCreateFromPix","pixaccDestroy","pixaccFinal","pixaccGetPix","pixaccGetOffset","pixaccAdd","pixaccSubtract","pixaccMultConst","pixaccMultConstAccumulate","pixSelectBySize","pixaSelectBySize","pixaMakeSizeIndicator","pixSelectByPerimToAreaRatio","pixaSelectByPerimToAreaRatio","pixSelectByPerimSizeRatio","pixaSelectByPerimSizeRatio","pixSelectByAreaFraction","pixaSelectByAreaFraction","pixSelectByWidthHeightRatio","pixaSelectByWidthHeightRatio","pixaSelectByNumConnComp","pixaSelectWithIndicator","pixRemoveWithIndicator","pixAddWithIndicator","pixaSelectWithString","pixaRenderComponent","pixaSort","pixaBinSort","pixaSortByIndex","pixaSort2dByIndex","pixaSelectRange","pixaaSelectRange","pixaaScaleToSize","pixaaScaleToSizeVar","pixaScaleToSize","pixaScaleToSizeRel","pixaScale","pixaScaleBySampling","pixaRotate","pixaRotateOrth","pixaTranslate","pixaAddBorderGeneral","pixaaFlattenToPixa","pixaaSizeRange","pixaSizeRange","pixaClipToPix","pixaClipToForeground","pixaGetRenderingDepth","pixaHasColor","pixaAnyColormaps","pixaGetDepthInfo","pixaConvertToSameDepth","pixaEqual","pixaSetFullSizeBoxa","pixaDisplay","pixaDisplayRandomCmap","pixaDisplayLinearly","pixaDisplayOnLattice","pixaDisplayUnsplit","pixaDisplayTiled","pixaDisplayTiledInRows","pixaDisplayTiledInColumns","pixaDisplayTiledAndScaled","pixaDisplayTiledWithText","pixaDisplayTiledByIndex","pixaaDisplay","pixaaDisplayByPixa","pixaaDisplayTiledAndScaled","pixaConvertTo1","pixaConvertTo8","pixaConvertTo8Colormap","pixaConvertTo32","pixaConstrainedSelect","pixaSelectToPdf","pixaMakeFromTiledPixa","pixaMakeFromTiledPix","pixGetTileCount","pixaDisplayMultiTiled","pixaSplitIntoFiles","convertToNUpFiles","convertToNUpPixa","pixaConvertToNUpPixa","pixaCompareInPdf","pmsCreate","pmsDestroy","pmsCustomAlloc","pmsCustomDealloc","pmsGetAlloc","pmsGetLevelForAlloc","pmsGetLevelForDealloc","pmsLogInfo","pixAddConstantGray","pixMultConstantGray","pixAddGray","pixSubtractGray","pixMultiplyGray","pixThresholdToValue","pixInitAccumulate","pixFinalAccumulate","pixFinalAccumulateThreshold","pixAccumulate","pixMultConstAccumulate","pixAbsDifference","pixAddRGB","pixMinOrMax","pixMaxDynamicRange","pixMaxDynamicRangeRGB","linearScaleRGBVal","logScaleRGBVal","makeLogBase2Tab","getLogBase2","pixcompCreateFromPix","pixcompCreateFromString","pixcompCreateFromFile","pixcompDestroy","pixcompCopy","pixcompGetDimensions","pixcompGetParameters","pixcompDetermineFormat","pixCreateFromPixcomp","pixacompCreate","pixacompCreateWithInit","pixacompCreateFromPixa","pixacompCreateFromFiles","pixacompCreateFromSA","pixacompDestroy","pixacompAddPix","pixacompAddPixcomp","pixacompReplacePix","pixacompReplacePixcomp","pixacompAddBox","pixacompGetCount","pixacompGetPixcomp","pixacompGetPix","pixacompGetPixDimensions","pixacompGetBoxa","pixacompGetBoxaCount","pixacompGetBox","pixacompGetBoxGeometry","pixacompGetOffset","pixacompSetOffset","pixaCreateFromPixacomp","pixacompJoin","pixacompInterleave","pixacompRead","pixacompReadStream","pixacompReadMem","pixacompWrite","pixacompWriteStream","pixacompWriteMem","pixacompConvertToPdf","pixacompConvertToPdfData","pixacompFastConvertToPdfData","pixacompWriteStreamInfo","pixcompWriteStreamInfo","pixacompDisplayTiledAndScaled","pixacompWriteFiles","pixcompWriteFile","pixThreshold8","pixRemoveColormapGeneral","pixRemoveColormap","pixAddGrayColormap8","pixAddMinimalGrayColormap8","pixConvertRGBToLuminance","pixConvertRGBToGray","pixConvertRGBToGrayFast","pixConvertRGBToGrayMinMax","pixConvertRGBToGraySatBoost","pixConvertRGBToGrayArb","pixConvertRGBToBinaryArb","pixConvertGrayToColormap","pixConvertGrayToColormap8","pixColorizeGray","pixConvertRGBToColormap","pixConvertCmapTo1","pixQuantizeIfFewColors","pixConvert16To8","pixConvertGrayToFalseColor","pixUnpackBinary","pixConvert1To16","pixConvert1To32","pixConvert1To2Cmap","pixConvert1To2","pixConvert1To4Cmap","pixConvert1To4","pixConvert1To8Cmap","pixConvert1To8","pixConvert2To8","pixConvert4To8","pixConvert8To16","pixConvertTo2","pixConvert8To2","pixConvertTo4","pixConvert8To4","pixConvertTo1Adaptive","pixConvertTo1","pixConvertTo1BySampling","pixConvertTo8","pixConvertTo8BySampling","pixConvertTo8Colormap","pixConvertTo16","pixConvertTo32","pixConvertTo32BySampling","pixConvert8To32","pixConvertTo8Or32","pixConvert24To32","pixConvert32To24","pixConvert32To16","pixConvert32To8","pixRemoveAlpha","pixAddAlphaTo1bpp","pixConvertLossless","pixConvertForPSWrap","pixConvertToSubpixelRGB","pixConvertGrayToSubpixelRGB","pixConvertColorToSubpixelRGB","l_setNeutralBoostVal","pixConnCompTransform","pixConnCompAreaTransform","pixConnCompIncrInit","pixConnCompIncrAdd","pixGetSortedNeighborValues","pixLocToColorTransform","pixTilingCreate","pixTilingDestroy","pixTilingGetCount","pixTilingGetSize","pixTilingGetTile","pixTilingNoStripOnPaint","pixTilingPaintTile","pixReadStreamPng","readHeaderPng","freadHeaderPng","readHeaderMemPng","fgetPngResolution","isPngInterlaced","fgetPngColormapInfo","pixWritePng","pixWriteStreamPng","pixSetZlibCompression","l_pngSetReadStrip16To8","pixReadMemPng","pixWriteMemPng","pixReadStreamPnm","readHeaderPnm","freadHeaderPnm","pixWriteStreamPnm","pixWriteStreamAsciiPnm","pixWriteStreamPam","pixReadMemPnm","readHeaderMemPnm","pixWriteMemPnm","pixWriteMemPam","pixProjectiveSampledPta","pixProjectiveSampled","pixProjectivePta","pixProjective","pixProjectivePtaColor","pixProjectiveColor","pixProjectivePtaGray","pixProjectiveGray","pixProjectivePtaWithAlpha","getProjectiveXformCoeffs","projectiveXformSampledPt","projectiveXformPt","convertFilesToPS","sarrayConvertFilesToPS","convertFilesFittedToPS","sarrayConvertFilesFittedToPS","writeImageCompressedToPSFile","convertSegmentedPagesToPS","pixWriteSegmentedPageToPS","pixWriteMixedToPS","convertToPSEmbed","pixaWriteCompressedToPS","pixWriteCompressedToPS","pixWritePSEmbed","pixWriteStreamPS","pixWriteStringPS","generateUncompressedPS","convertJpegToPSEmbed","convertJpegToPS","convertG4ToPSEmbed","convertG4ToPS","convertTiffMultipageToPS","convertFlateToPSEmbed","convertFlateToPS","pixWriteMemPS","getResLetterPage","getResA4Page","l_psWriteBoundingBox","ptaCreate","ptaCreateFromNuma","ptaDestroy","ptaCopy","ptaCopyRange","ptaClone","ptaEmpty","ptaAddPt","ptaInsertPt","ptaRemovePt","ptaGetRefcount","ptaChangeRefcount","ptaGetCount","ptaGetPt","ptaGetIPt","ptaSetPt","ptaGetArrays","ptaRead","ptaReadStream","ptaReadMem","ptaWriteDebug","ptaWrite","ptaWriteStream","ptaWriteMem","ptaaCreate","ptaaDestroy","ptaaAddPta","ptaaGetCount","ptaaGetPta","ptaaGetPt","ptaaInitFull","ptaaReplacePta","ptaaAddPt","ptaaTruncate","ptaaRead","ptaaReadStream","ptaaReadMem","ptaaWriteDebug","ptaaWrite","ptaaWriteStream","ptaaWriteMem","ptaSubsample","ptaJoin","ptaaJoin","ptaReverse","ptaTranspose","ptaCyclicPerm","ptaSelectRange","ptaGetBoundingRegion","ptaGetRange","ptaGetInsideBox","pixFindCornerPixels","ptaContainsPt","ptaTestIntersection","ptaTransform","ptaPtInsidePolygon","l_angleBetweenVectors","ptaGetMinMax","ptaSelectByValue","ptaCropToMask","ptaGetLinearLSF","ptaGetQuadraticLSF","ptaGetCubicLSF","ptaGetQuarticLSF","ptaNoisyLinearLSF","ptaNoisyQuadraticLSF","applyLinearFit","applyQuadraticFit","applyCubicFit","applyQuarticFit","pixPlotAlongPta","ptaGetPixelsFromPix","pixGenerateFromPta","ptaGetBoundaryPixels","ptaaGetBoundaryPixels","ptaaIndexLabeledPixels","ptaGetNeighborPixLocs","numaConvertToPta1","numaConvertToPta2","ptaConvertToNuma","pixDisplayPta","pixDisplayPtaaPattern","pixDisplayPtaPattern","ptaReplicatePattern","pixDisplayPtaa","ptaSort","ptaGetSortIndex","ptaSortByIndex","ptaaSortByIndex","ptaGetRankValue","ptaSort2d","ptaEqual","ptaUnionByAset","ptaRemoveDupsByAset","ptaIntersectionByAset","l_asetCreateFromPta","ptaUnionByHash","ptaRemoveDupsByHash","ptaIntersectionByHash","ptaFindPtByHash","l_dnaHashCreateFromPta","ptraCreate","ptraDestroy","ptraAdd","ptraInsert","ptraRemove","ptraRemoveLast","ptraReplace","ptraSwap","ptraCompactArray","ptraReverse","ptraJoin","ptraGetMaxIndex","ptraGetActualCount","ptraGetPtrToItem","ptraaCreate","ptraaDestroy","ptraaGetSize","ptraaInsertPtra","ptraaGetPtra","ptraaFlattenToPtra","pixQuadtreeMean","pixQuadtreeVariance","pixMeanInRectangle","pixVarianceInRectangle","boxaaQuadtreeRegions","quadtreeGetParent","quadtreeGetChildren","quadtreeMaxLevels","fpixaDisplayQuadtree","lqueueCreate","lqueueDestroy","lqueueAdd","lqueueRemove","lqueueGetCount","lqueuePrint","pixRankFilter","pixRankFilterRGB","pixRankFilterGray","pixMedianFilter","pixRankFilterWithScaling","l_rbtreeCreate","l_rbtreeLookup","l_rbtreeInsert","l_rbtreeDelete","l_rbtreeDestroy","l_rbtreeGetFirst","l_rbtreeGetNext","l_rbtreeGetLast","l_rbtreeGetPrev","l_rbtreeGetCount","l_rbtreePrint","pixProcessBarcodes","pixExtractBarcodes","pixReadBarcodes","pixReadBarcodeWidths","pixLocateBarcodes","pixDeskewBarcode","pixExtractBarcodeWidths1","pixExtractBarcodeWidths2","pixExtractBarcodeCrossings","numaQuantizeCrossingsByWidth","numaQuantizeCrossingsByWindow","pixaReadFiles","pixaReadFilesSA","pixRead","pixReadWithHint","pixReadIndexed","pixReadStream","pixReadHeader","findFileFormat","findFileFormatStream","findFileFormatBuffer","fileFormatIsTiff","pixReadMem","pixReadHeaderMem","writeImageFileInfo","ioFormatTest","recogCreateFromRecog","recogCreateFromPixa","recogCreateFromPixaNoFinish","recogCreate","recogDestroy","recogGetCount","recogSetParams","recogGetClassIndex","recogStringToIndex","recogGetClassString","l_convertCharstrToInt","recogRead","recogReadStream","recogReadMem","recogWrite","recogWriteStream","recogWriteMem","recogExtractPixa","recogDecode","recogCreateDid","recogDestroyDid","recogDidExists","recogGetDid","recogSetChannelParams","recogIdentifyMultiple","recogSplitIntoCharacters","recogCorrelationBestRow","recogCorrelationBestChar","recogIdentifyPixa","recogIdentifyPix","recogSkipIdentify","rchaDestroy","rchDestroy","rchaExtract","rchExtract","recogProcessToIdentify","recogExtractNumbers","showExtractNumbers","recogTrainLabeled","recogProcessLabeled","recogAddSample","recogModifyTemplate","recogAverageSamples","pixaAccumulateSamples","recogTrainingFinished","recogFilterPixaBySize","recogSortPixaByClass","recogRemoveOutliers1","pixaRemoveOutliers1","recogRemoveOutliers2","pixaRemoveOutliers2","recogTrainFromBoot","recogPadDigitTrainingSet","recogIsPaddingNeeded","recogAddDigitPadTemplates","recogMakeBootDigitRecog","recogMakeBootDigitTemplates","recogShowContent","recogDebugAverages","recogShowAverageTemplates","recogShowMatchesInRange","recogShowMatch","regTestSetup","regTestCleanup","regTestCompareValues","regTestCompareStrings","regTestComparePix","regTestCompareSimilarPix","regTestCheckFile","regTestCompareFiles","regTestWritePixAndCheck","regTestWriteDataAndCheck","regTestGenLocalFilename","pixRasterop","pixRasteropVip","pixRasteropHip","pixTranslate","pixRasteropIP","pixRasteropFullImage","rasteropUniLow","rasteropLow","rasteropVipLow","rasteropHipLow","pixRotate","pixEmbedForRotation","pixRotateBySampling","pixRotateBinaryNice","pixRotateWithAlpha","pixRotateAM","pixRotateAMColor","pixRotateAMGray","pixRotateAMCorner","pixRotateAMColorCorner","pixRotateAMGrayCorner","pixRotateAMColorFast","pixRotateOrth","pixRotate180","pixRotate90","pixFlipLR","pixFlipTB","pixRotateShear","pixRotate2Shear","pixRotate3Shear","pixRotateShearIP","pixRotateShearCenter","pixRotateShearCenterIP","pixStrokeWidthTransform","pixRunlengthTransform","pixFindHorizontalRuns","pixFindVerticalRuns","pixFindMaxRuns","pixFindMaxHorizontalRunOnLine","pixFindMaxVerticalRunOnLine","runlengthMembershipOnLine","makeMSBitLocTab","sarrayCreate","sarrayCreateInitialized","sarrayCreateWordsFromString","sarrayCreateLinesFromString","sarrayDestroy","sarrayCopy","sarrayClone","sarrayAddString","sarrayRemoveString","sarrayReplaceString","sarrayClear","sarrayGetCount","sarrayGetArray","sarrayGetString","sarrayGetRefcount","sarrayChangeRefcount","sarrayToString","sarrayToStringRange","sarrayJoin","sarrayAppendRange","sarrayPadToSameSize","sarrayConvertWordsToLines","sarraySplitString","sarraySelectBySubstring","sarraySelectByRange","sarrayParseRange","sarrayRead","sarrayReadStream","sarrayReadMem","sarrayWrite","sarrayWriteStream","sarrayWriteMem","sarrayAppend","getNumberedPathnamesInDirectory","getSortedPathnamesInDirectory","convertSortedToNumberedPathnames","getFilenamesInDirectory","sarraySort","sarraySortByIndex","stringCompareLexical","sarrayUnionByAset","sarrayRemoveDupsByAset","sarrayIntersectionByAset","l_asetCreateFromSarray","sarrayRemoveDupsByHash","sarrayIntersectionByHash","sarrayFindStringByHash","l_dnaHashCreateFromSarray","sarrayGenerateIntegers","sarrayLookupCSKV","pixScale","pixScaleToSizeRel","pixScaleToSize","pixScaleToResolution","pixScaleGeneral","pixScaleLI","pixScaleColorLI","pixScaleColor2xLI","pixScaleColor4xLI","pixScaleGrayLI","pixScaleGray2xLI","pixScaleGray4xLI","pixScaleGray2xLIThresh","pixScaleGray2xLIDither","pixScaleGray4xLIThresh","pixScaleGray4xLIDither","pixScaleBySampling","pixScaleBySamplingToSize","pixScaleByIntSampling","pixScaleRGBToGrayFast","pixScaleRGBToBinaryFast","pixScaleGrayToBinaryFast","pixScaleSmooth","pixScaleSmoothToSize","pixScaleRGBToGray2","pixScaleAreaMap","pixScaleAreaMap2","pixScaleAreaMapToSize","pixScaleBinary","pixScaleToGray","pixScaleToGrayFast","pixScaleToGray2","pixScaleToGray3","pixScaleToGray4","pixScaleToGray6","pixScaleToGray8","pixScaleToGray16","pixScaleToGrayMipmap","pixScaleMipmap","pixExpandReplicate","pixScaleGrayMinMax","pixScaleGrayMinMax2","pixScaleGrayRankCascade","pixScaleGrayRank2","pixScaleAndTransferAlpha","pixScaleWithAlpha","pixSeedfillBinary","pixSeedfillBinaryRestricted","pixHolesByFilling","pixFillClosedBorders","pixExtractBorderConnComps","pixRemoveBorderConnComps","pixFillBgFromBorder","pixFillHolesToBoundingRect","pixSeedfillGray","pixSeedfillGrayInv","pixSeedfillGraySimple","pixSeedfillGrayInvSimple","pixSeedfillGrayBasin","pixDistanceFunction","pixSeedspread","pixLocalExtrema","pixSelectedLocalExtrema","pixFindEqualValues","pixSelectMinInConnComp","pixRemoveSeededComponents","selaCreate","selaDestroy","selCreate","selDestroy","selCopy","selCreateBrick","selCreateComb","create2dIntArray","selaAddSel","selaGetCount","selaGetSel","selGetName","selSetName","selaFindSelByName","selGetElement","selSetElement","selGetParameters","selSetOrigin","selGetTypeAtOrigin","selaGetBrickName","selaGetCombName","getCompositeParameters","selaGetSelnames","selFindMaxTranslations","selRotateOrth","selaRead","selaReadStream","selRead","selReadStream","selaWrite","selaWriteStream","selWrite","selWriteStream","selCreateFromString","selPrintToString","selaCreateFromFile","selCreateFromPta","selCreateFromPix","selReadFromColorImage","selCreateFromColorPix","selaCreateFromColorPixa","selDisplayInPix","selaDisplayInPix","selaAddBasic","selaAddHitMiss","selaAddDwaLinear","selaAddDwaCombs","selaAddCrossJunctions","selaAddTJunctions","sela4ccThin","sela8ccThin","sela4and8ccThin","selMakePlusSign","pixGenerateSelWithRuns","pixGenerateSelRandom","pixGenerateSelBoundary","pixGetRunCentersOnLine","pixGetRunsOnLine","pixSubsampleBoundaryPixels","adjacentOnPixelInRaster","pixDisplayHitMissSel","pixHShear","pixVShear","pixHShearCorner","pixVShearCorner","pixHShearCenter","pixVShearCenter","pixHShearIP","pixVShearIP","pixHShearLI","pixVShearLI","pixDeskewBoth","pixDeskew","pixFindSkewAndDeskew","pixDeskewGeneral","pixFindSkew","pixFindSkewSweep","pixFindSkewSweepAndSearch","pixFindSkewSweepAndSearchScore","pixFindSkewSweepAndSearchScorePivot","pixFindSkewOrthogonalRange","pixFindDifferentialSquareSum","pixFindNormalizedSquareSum","pixReadStreamSpix","readHeaderSpix","freadHeaderSpix","sreadHeaderSpix","pixWriteStreamSpix","pixReadMemSpix","pixWriteMemSpix","pixSerializeToMemory","pixDeserializeFromMemory","lstackCreate","lstackDestroy","lstackAdd","lstackRemove","lstackGetCount","lstackPrint","strcodeCreate","strcodeCreateFromFile","strcodeGenerate","strcodeFinalize","l_getStructStrFromFile","pixFindStrokeLength","pixFindStrokeWidth","pixaFindStrokeWidth","pixaModifyStrokeWidth","pixModifyStrokeWidth","pixaSetStrokeWidth","pixSetStrokeWidth","sudokuReadFile","sudokuReadString","sudokuCreate","sudokuDestroy","sudokuSolve","sudokuTestUniqueness","sudokuGenerate","sudokuOutput","pixAddSingleTextblock","pixAddTextlines","pixSetTextblock","pixSetTextline","pixaAddTextNumber","pixaAddTextlines","pixaAddPixWithText","bmfGetLineStrings","bmfGetWordWidths","bmfGetStringWidth","splitStringToParagraphs","pixReadTiff","pixReadStreamTiff","pixWriteTiff","pixWriteTiffCustom","pixWriteStreamTiff","pixWriteStreamTiffWA","pixReadFromMultipageTiff","pixaReadMultipageTiff","pixaWriteMultipageTiff","writeMultipageTiff","writeMultipageTiffSA","fprintTiffInfo","tiffGetCount","getTiffResolution","readHeaderTiff","freadHeaderTiff","readHeaderMemTiff","findTiffCompression","extractG4DataFromFile","pixReadMemTiff","pixReadMemFromMultipageTiff","pixaReadMemMultipageTiff","pixaWriteMemMultipageTiff","pixWriteMemTiff","pixWriteMemTiffCustom","setMsgSeverity","returnErrorInt","returnErrorFloat","returnErrorPtr","leptSetStderrHandler","lept_stderr","filesAreIdentical","convertOnLittleEnd16","convertOnBigEnd16","convertOnLittleEnd32","convertOnBigEnd32","fileCorruptByDeletion","fileCorruptByMutation","fileReplaceBytes","genRandomIntegerInRange","lept_roundftoi","l_hashStringToUint64","l_hashPtToUint64","l_hashFloat64ToUint64","findNextLargerPrime","lept_isPrime","convertIntToGrayCode","convertGrayCodeToInt","getLeptonicaVersion","startTimer","stopTimer","startTimerNested","stopTimerNested","l_getCurrentTime","startWallTimer","stopWallTimer","l_getFormattedDate","stringNew","stringCopy","stringCopySegment","stringReplace","stringLength","stringCat","stringConcatNew","stringJoin","stringJoinIP","stringReverse","strtokSafe","stringSplitOnToken","stringCheckForChars","stringRemoveChars","stringReplaceEachSubstr","stringReplaceSubstr","stringFindEachSubstr","stringFindSubstr","arrayReplaceEachSequence","arrayFindEachSequence","arrayFindSequence","reallocNew","l_binaryRead","l_binaryReadStream","l_binaryReadSelect","l_binaryReadSelectStream","l_binaryWrite","nbytesInFile","fnbytesInFile","l_binaryCopy","l_binaryCompare","fileCopy","fileConcatenate","fileAppendString","fopenReadStream","fopenWriteStream","fopenReadFromMemory","fopenWriteWinTempfile","lept_fopen","lept_fclose","lept_calloc","lept_free","lept_mkdir","lept_rmdir","lept_direxists","lept_rm_match","lept_rm","lept_rmfile","lept_mv","lept_cp","callSystemDebug","splitPathAtDirectory","splitPathAtExtension","pathJoin","appendSubdirs","convertSepCharsInPath","genPathname","makeTempDirname","modifyTrailingSlash","l_makeTempFilename","extractNumberFromFilename","pixSimpleCaptcha","pixRandomHarmonicWarp","pixWarpStereoscopic","pixStretchHorizontal","pixStretchHorizontalSampled","pixStretchHorizontalLI","pixQuadraticVShear","pixQuadraticVShearSampled","pixQuadraticVShearLI","pixStereoFromPair","wshedCreate","wshedDestroy","wshedApply","wshedBasins","wshedRenderFill","wshedRenderColors","pixaWriteWebPAnim","pixaWriteStreamWebPAnim","pixaWriteMemWebPAnim","pixReadStreamWebP","pixReadMemWebP","readHeaderWebP","readHeaderMemWebP","pixWriteWebP","pixWriteStreamWebP","pixWriteMemWebP","l_jpegSetQuality","setLeptDebugOK","pixaWriteFiles","pixWriteDebug","pixWrite","pixWriteAutoFormat","pixWriteStream","pixWriteImpliedFormat","pixChooseOutputFormat","getImpliedFileFormat","pixGetAutoFormat","getFormatExtension","pixWriteMem","l_fileDisplay","pixDisplay","pixDisplayWithTitle","pixMakeColorSquare","l_chooseDisplayProg","changeFormatForMissingLib","pixDisplayWrite","pixSaveTiled","pixSaveTiledOutline","pixSaveTiledWithText","zlibCompress","zlibUncompress","LIBLEPT_MAJOR_VERSION","LIBLEPT_MINOR_VERSION","LIBLEPT_PATCH_VERSION","_STDIO_H","_FEATURES_H","_DEFAULT_SOURCE","__GLIBC_USE_ISOC2X","__USE_ISOC11","__USE_ISOC99","__USE_ISOC95","__USE_POSIX_IMPLICITLY","_POSIX_SOURCE","_POSIX_C_SOURCE","__USE_POSIX","__USE_POSIX2","__USE_POSIX199309","__USE_POSIX199506","__USE_XOPEN2K","__USE_XOPEN2K8","_ATFILE_SOURCE","__USE_MISC","__USE_ATFILE","__USE_FORTIFY_LEVEL","__GLIBC_USE_DEPRECATED_GETS","__GLIBC_USE_DEPRECATED_SCANF","_STDC_PREDEF_H","__STDC_IEC_559__","__STDC_IEC_559_COMPLEX__","__STDC_ISO_10646__","__GNU_LIBRARY__","__GLIBC__","__GLIBC_MINOR__","_SYS_CDEFS_H","__glibc_c99_flexarr_available","__WORDSIZE","__WORDSIZE_TIME64_COMPAT32","__SYSCALL_WORDSIZE","__LONG_DOUBLE_USES_FLOAT128","__HAVE_GENERIC_SELECTION","__GLIBC_USE_LIB_EXT2","__GLIBC_USE_IEC_60559_BFP_EXT","__GLIBC_USE_IEC_60559_BFP_EXT_C2X","__GLIBC_USE_IEC_60559_FUNCS_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X","__GLIBC_USE_IEC_60559_TYPES_EXT","__GNUC_VA_LIST","_BITS_TYPES_H","__TIMESIZE","_BITS_TYPESIZES_H","__OFF_T_MATCHES_OFF64_T","__INO_T_MATCHES_INO64_T","__RLIM_T_MATCHES_RLIM64_T","__STATFS_MATCHES_STATFS64","__FD_SETSIZE","_BITS_TIME64_H","_____fpos_t_defined","____mbstate_t_defined","_____fpos64_t_defined","____FILE_defined","__FILE_defined","__struct_FILE_defined","_IO_EOF_SEEN","_IO_ERR_SEEN","_IO_USER_LOCK","_IOFBF","_IOLBF","_IONBF","BUFSIZ","EOF","SEEK_SET","SEEK_CUR","SEEK_END","P_tmpdir","_BITS_STDIO_LIM_H","L_tmpnam","TMP_MAX","FILENAME_MAX","L_ctermid","FOPEN_MAX","_STDLIB_H","WNOHANG","WUNTRACED","WSTOPPED","WEXITED","WCONTINUED","WNOWAIT","__WNOTHREAD","__WALL","__WCLONE","__ENUM_IDTYPE_T","__W_CONTINUED","__WCOREFLAG","__HAVE_FLOAT128","__HAVE_DISTINCT_FLOAT128","__HAVE_FLOAT64X","__HAVE_FLOAT64X_LONG_DOUBLE","__HAVE_FLOAT16","__HAVE_FLOAT32","__HAVE_FLOAT64","__HAVE_FLOAT32X","__HAVE_FLOAT128X","__HAVE_DISTINCT_FLOAT16","__HAVE_DISTINCT_FLOAT32","__HAVE_DISTINCT_FLOAT64","__HAVE_DISTINCT_FLOAT32X","__HAVE_DISTINCT_FLOAT64X","__HAVE_DISTINCT_FLOAT128X","__HAVE_FLOATN_NOT_TYPEDEF","__ldiv_t_defined","__lldiv_t_defined","RAND_MAX","EXIT_FAILURE","EXIT_SUCCESS","_SYS_TYPES_H","__clock_t_defined","__clockid_t_defined","__time_t_defined","__timer_t_defined","_BITS_STDINT_INTN_H","__BIT_TYPES_DEFINED__","_ENDIAN_H","_BITS_ENDIAN_H","__LITTLE_ENDIAN","__BIG_ENDIAN","__PDP_ENDIAN","_BITS_ENDIANNESS_H","__BYTE_ORDER","__FLOAT_WORD_ORDER","LITTLE_ENDIAN","BIG_ENDIAN","PDP_ENDIAN","BYTE_ORDER","_BITS_BYTESWAP_H","_BITS_UINTN_IDENTITY_H","_SYS_SELECT_H","__FD_ZERO_STOS","__sigset_t_defined","__timeval_defined","_STRUCT_TIMESPEC","FD_SETSIZE","_BITS_PTHREADTYPES_COMMON_H","_THREAD_SHARED_TYPES_H","_BITS_PTHREADTYPES_ARCH_H","__SIZEOF_PTHREAD_MUTEX_T","__SIZEOF_PTHREAD_ATTR_T","__SIZEOF_PTHREAD_RWLOCK_T","__SIZEOF_PTHREAD_BARRIER_T","__SIZEOF_PTHREAD_MUTEXATTR_T","__SIZEOF_PTHREAD_COND_T","__SIZEOF_PTHREAD_CONDATTR_T","__SIZEOF_PTHREAD_RWLOCKATTR_T","__SIZEOF_PTHREAD_BARRIERATTR_T","_THREAD_MUTEX_INTERNAL_H","__PTHREAD_MUTEX_HAVE_PREV","__have_pthread_attr_t","_ALLOCA_H","_STDINT_H","_BITS_WCHAR_H","_BITS_STDINT_UINTN_H","INT8_MIN","INT16_MIN","INT32_MIN","INT8_MAX","INT16_MAX","INT32_MAX","UINT8_MAX","UINT16_MAX","UINT32_MAX","INT_LEAST8_MIN","INT_LEAST16_MIN","INT_LEAST32_MIN","INT_LEAST8_MAX","INT_LEAST16_MAX","INT_LEAST32_MAX","UINT_LEAST8_MAX","UINT_LEAST16_MAX","UINT_LEAST32_MAX","INT_FAST8_MIN","INT_FAST16_MIN","INT_FAST32_MIN","INT_FAST8_MAX","INT_FAST16_MAX","INT_FAST32_MAX","UINT_FAST8_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","INTPTR_MIN","INTPTR_MAX","UINTPTR_MAX","PTRDIFF_MIN","PTRDIFF_MAX","SIG_ATOMIC_MIN","SIG_ATOMIC_MAX","SIZE_MAX","WINT_MIN","WINT_MAX","HAVE_LIBJPEG","HAVE_LIBTIFF","HAVE_LIBPNG","HAVE_LIBZ","HAVE_LIBGIF","HAVE_LIBUNGIF","HAVE_LIBWEBP","HAVE_LIBWEBP_ANIM","HAVE_LIBJP2K","USE_BMPIO","USE_PNMIO","USE_JP2KHEADER","USE_PDFIO","USE_PSIO","HAVE_FMEMOPEN","HAVE_FSTATAT","UNDEF","TRUE","FALSE","NUMA_VERSION_NUMBER","DNA_VERSION_NUMBER","SARRAY_VERSION_NUMBER","USE_INLINE_ACCESSORS","DEWARP_VERSION_NUMBER","GPLOT_VERSION_NUMBER","NUM_GPLOT_STYLES","NUM_GPLOT_OUTPUTS","JB_TEMPLATE_EXT","JB_DATA_EXT","SEL_VERSION_NUMBER","KERNEL_VERSION_NUMBER","PIX_SRC","PIX_DST","PIX_CLR","PIX_SET","PIX_PAINT","PIX_MASK","PIX_XOR","PIXAA_VERSION_NUMBER","PIXA_VERSION_NUMBER","BOXA_VERSION_NUMBER","BOXAA_VERSION_NUMBER","PTA_VERSION_NUMBER","FPIX_VERSION_NUMBER","DPIX_VERSION_NUMBER","PIXACOMP_VERSION_NUMBER","RECOG_VERSION_NUMBER","size_t","va_list","__gnuc_va_list","__u_char","__u_short","__u_int","__u_long","__int8_t","__uint8_t","__int16_t","__uint16_t","__int32_t","__uint32_t","__int64_t","__uint64_t","__int_least8_t","__uint_least8_t","__int_least16_t","__uint_least16_t","__int_least32_t","__uint_least32_t","__int_least64_t","__uint_least64_t","__quad_t","__u_quad_t","__intmax_t","__uintmax_t","__dev_t","__uid_t","__gid_t","__ino_t","__ino64_t","__mode_t","__nlink_t","__off_t","__off64_t","__pid_t","__fsid_t","__val","__clock_t","__rlim_t","__rlim64_t","__id_t","__time_t","__useconds_t","__suseconds_t","__daddr_t","__key_t","__clockid_t","__timer_t","__blksize_t","__blkcnt_t","__blkcnt64_t","__fsblkcnt_t","__fsblkcnt64_t","__fsfilcnt_t","__fsfilcnt64_t","__fsword_t","__ssize_t","__syscall_slong_t","__syscall_ulong_t","__loff_t","__caddr_t","__intptr_t","__socklen_t","__sig_atomic_t","__mbstate_t","__count","__value","__mbstate_t__bindgen_ty_1","__wch","__wchb","_G_fpos_t","__pos","__state","__fpos_t","_G_fpos64_t","__pos","__state","__fpos64_t","__FILE","FILE","_IO_marker","_IO_codecvt","_IO_wide_data","_IO_lock_t","_IO_FILE","_flags","_IO_read_ptr","_IO_read_end","_IO_read_base","_IO_write_base","_IO_write_ptr","_IO_write_end","_IO_buf_base","_IO_buf_end","_IO_save_base","_IO_backup_base","_IO_save_end","_markers","_chain","_fileno","_flags2","_old_offset","_cur_column","_vtable_offset","_shortbuf","_lock","_offset","_codecvt","_wide_data","_freeres_list","_freeres_buf","__pad5","_mode","_unused2","off_t","ssize_t","fpos_t","wchar_t","idtype_t_P_ALL","idtype_t_P_PID","idtype_t_P_PGID","idtype_t","_Float32","_Float64","_Float32x","_Float64x","div_t","quot","rem","ldiv_t","quot","rem","lldiv_t","quot","rem","u_char","u_short","u_int","u_long","quad_t","u_quad_t","fsid_t","loff_t","ino_t","dev_t","gid_t","mode_t","nlink_t","uid_t","pid_t","id_t","daddr_t","caddr_t","key_t","clock_t","clockid_t","time_t","timer_t","ulong","ushort","uint","u_int8_t","u_int16_t","u_int32_t","u_int64_t","register_t","__sigset_t","__val","sigset_t","timeval","tv_sec","tv_usec","timespec","tv_sec","tv_nsec","suseconds_t","__fd_mask","fd_set","__fds_bits","fd_mask","blksize_t","blkcnt_t","fsblkcnt_t","fsfilcnt_t","__pthread_internal_list","__prev","__next","__pthread_list_t","__pthread_internal_slist","__next","__pthread_slist_t","__pthread_mutex_s","__lock","__count","__owner","__nusers","__kind","__spins","__elision","__list","__pthread_rwlock_arch_t","__readers","__writers","__wrphase_futex","__writers_futex","__pad3","__pad4","__cur_writer","__shared","__rwelision","__pad1","__pad2","__flags","__pthread_cond_s","__bindgen_anon_1","__bindgen_anon_2","__g_refs","__g_size","__g1_orig_size","__wrefs","__g_signals","__pthread_cond_s__bindgen_ty_1","__wseq","__wseq32","__pthread_cond_s__bindgen_ty_1__bindgen_ty_1","__low","__high","__pthread_cond_s__bindgen_ty_2","__g1_start","__g1_start32","__pthread_cond_s__bindgen_ty_2__bindgen_ty_1","__low","__high","pthread_t","pthread_mutexattr_t","__size","__align","pthread_condattr_t","__size","__align","pthread_key_t","pthread_once_t","pthread_attr_t","__size","__align","pthread_mutex_t","__data","__size","__align","pthread_cond_t","__data","__size","__align","pthread_rwlock_t","__data","__size","__align","pthread_rwlockattr_t","__size","__align","pthread_spinlock_t","pthread_barrier_t","__size","__align","pthread_barrierattr_t","__size","__align","random_data","fptr","rptr","state","rand_type","rand_deg","rand_sep","end_ptr","drand48_data","__x","__old_x","__c","__init","__a","__compar_fn_t","int_least8_t","int_least16_t","int_least32_t","int_least64_t","uint_least8_t","uint_least16_t","uint_least32_t","uint_least64_t","int_fast8_t","int_fast16_t","int_fast32_t","int_fast64_t","uint_fast8_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","intmax_t","uintmax_t","l_intptr_t","l_uintptr_t","l_ok","l_int8","l_uint8","l_int16","l_uint16","l_int32","l_uint32","l_float32","l_float64","l_int64","l_uint64","L_NOT_FOUND","L_FOUND","_bindgen_ty_1","UNIX_PATH_SEPCHAR","WIN_PATH_SEPCHAR","_bindgen_ty_2","L_TIMER","L_WallTimer","start_sec","start_usec","stop_sec","stop_usec","L_WALLTIMER","L_SEVERITY_EXTERNAL","L_SEVERITY_ALL","L_SEVERITY_DEBUG","L_SEVERITY_INFO","L_SEVERITY_WARNING","L_SEVERITY_ERROR","L_SEVERITY_NONE","_bindgen_ty_3","Numa","nalloc","n","refcount","startx","delx","array","NUMA","Numaa","nalloc","n","numa","NUMAA","L_Dna","nalloc","n","refcount","startx","delx","array","L_DNA","L_Dnaa","nalloc","n","dna","L_DNAA","L_DnaHash","nbuckets","initsize","dna","L_DNAHASH","Sarray","nalloc","n","refcount","array","SARRAY","L_Bytea","nalloc","size","refcount","data","L_BYTEA","L_LINEAR_INTERP","L_QUADRATIC_INTERP","_bindgen_ty_4","L_CONTINUED_BORDER","L_SLOPE_BORDER","L_MIRRORED_BORDER","_bindgen_ty_5","L_INTEGER_VALUE","L_FLOAT_VALUE","_bindgen_ty_6","L_ByteBuffer","nalloc","n","nwritten","array","L_BBUFFER","L_Heap","nalloc","n","array","direction","L_HEAP","DoubleLinkedList","prev","next","data","DLLIST","L_Ptra","nalloc","imax","nactual","array","L_PTRA","L_Ptraa","nalloc","ptra","L_PTRAA","L_NO_COMPACTION","L_COMPACTION","_bindgen_ty_7","L_AUTO_DOWNSHIFT","L_MIN_DOWNSHIFT","L_FULL_DOWNSHIFT","_bindgen_ty_8","L_HANDLE_ONLY","L_REMOVE","_bindgen_ty_9","L_Queue","nalloc","nhead","nelem","array","stack","L_QUEUE","L_INT_TYPE","L_UINT_TYPE","L_FLOAT_TYPE","_bindgen_ty_10","Rb_Type","itype","utype","ftype","ptype","RB_TYPE","L_Rbtree","root","keytype","L_RBTREE","L_AMAP","L_ASET","L_Rbtree_Node","key","value","left","right","parent","color","L_RBTREE_NODE","L_AMAP_NODE","L_ASET_NODE","L_Stack","nalloc","n","array","auxstack","L_STACK","SPLIT_ON_LEADING_WHITE","SPLIT_ON_BLANK_LINE","SPLIT_ON_BOTH","_bindgen_ty_11","L_Bmf","pixa","size","directory","baseline1","baseline2","baseline3","lineheight","kernwidth","spacewidth","vertlinesep","fonttab","baselinetab","widthtab","L_BMF","CCB_LOCAL_COORDS","CCB_GLOBAL_COORDS","_bindgen_ty_12","CCB_SAVE_ALL_PTS","CCB_SAVE_TURNING_PTS","_bindgen_ty_13","CCBord","pix","boxa","start","refcount","local","global","step","splocal","spglobal","CCBORD","CCBorda","pix","w","h","n","nalloc","ccb","CCBORDA","L_Dewarpa","nalloc","maxpage","dewarp","dewarpcache","namodels","napages","redfactor","sampling","minlines","maxdist","max_linecurv","min_diff_linecurv","max_diff_linecurv","max_edgeslope","max_edgecurv","max_diff_edgecurv","useboth","check_columns","modelsready","L_DEWARPA","L_Dewarp","dewa","pixs","sampvdispar","samphdispar","sampydispar","fullvdispar","fullhdispar","fullydispar","namidys","nacurves","w","h","pageno","sampling","redfactor","minlines","nlines","mincurv","maxcurv","leftslope","rightslope","leftcurv","rightcurv","nx","ny","hasref","refpage","vsuccess","hsuccess","ysuccess","vvalid","hvalid","skip_horiz","debug","L_DEWARP","GPLOT_STYLE_GPLOT_LINES","GPLOT_STYLE_GPLOT_POINTS","GPLOT_STYLE_GPLOT_IMPULSES","GPLOT_STYLE_GPLOT_LINESPOINTS","GPLOT_STYLE_GPLOT_DOTS","GPLOT_STYLE","GPLOT_OUTPUT_GPLOT_NONE","GPLOT_OUTPUT_GPLOT_PNG","GPLOT_OUTPUT_GPLOT_PS","GPLOT_OUTPUT_GPLOT_EPS","GPLOT_OUTPUT_GPLOT_LATEX","GPLOT_OUTPUT_GPLOT_PNM","GPLOT_OUTPUT","GPLOT_SCALING_GPLOT_LINEAR_SCALE","GPLOT_SCALING_GPLOT_LOG_SCALE_X","GPLOT_SCALING_GPLOT_LOG_SCALE_Y","GPLOT_SCALING_GPLOT_LOG_SCALE_X_Y","GPLOT_SCALING","GPlot","rootname","cmdname","cmddata","datanames","plotdata","plotlabels","plotstyles","nplots","outname","outformat","scaling","title","xlabel","ylabel","GPLOT","IFF_UNKNOWN","IFF_BMP","IFF_JFIF_JPEG","IFF_PNG","IFF_TIFF","IFF_TIFF_PACKBITS","IFF_TIFF_RLE","IFF_TIFF_G3","IFF_TIFF_G4","IFF_TIFF_LZW","IFF_TIFF_ZIP","IFF_PNM","IFF_PS","IFF_GIF","IFF_JP2","IFF_WEBP","IFF_LPDF","IFF_TIFF_JPEG","IFF_DEFAULT","IFF_SPIX","_bindgen_ty_14","BMP_ID","TIFF_BIGEND_ID","TIFF_LITTLEEND_ID","_bindgen_ty_15","L_JPEG_READ_LUMINANCE","L_JPEG_FAIL_ON_BAD_DATA","_bindgen_ty_16","L_DEFAULT_ENCODE","L_JPEG_ENCODE","L_G4_ENCODE","L_FLATE_ENCODE","L_JP2K_ENCODE","_bindgen_ty_17","L_Compressed_Data","type_","datacomp","nbytescomp","data85","nbytes85","cmapdata85","cmapdatahex","ncolors","w","h","bps","spp","minisblack","predictor","nbytes","res","L_COMP_DATA","L_FIRST_IMAGE","L_NEXT_IMAGE","L_LAST_IMAGE","_bindgen_ty_18","L_Pdf_Data","title","n","ncmap","cida","id","obj1","obj2","obj3","obj4","obj5","poststream","trailer","xy","wh","mediabox","saprex","sacmap","objsize","objloc","xrefloc","L_PDF_DATA","JbClasser","safiles","method","components","maxwidth","maxheight","npages","baseindex","nacomps","sizehaus","rankhaus","thresh","weightfactor","naarea","w","h","nclass","keep_pixaa","pixaa","pixat","pixatd","dahash","nafgt","ptac","ptact","naclass","napage","ptaul","ptall","JBCLASSER","JbData","pix","npages","w","h","nclass","latticew","latticeh","naclass","napage","ptaul","JBDATA","JB_RANKHAUS","JB_CORRELATION","_bindgen_ty_19","JB_CONN_COMPS","JB_CHARACTERS","JB_WORDS","_bindgen_ty_20","Sel","sy","sx","cy","cx","data","name","SEL","Sela","n","nalloc","sel","SELA","L_Kernel","sy","sx","cy","cx","data","L_KERNEL","SYMMETRIC_MORPH_BC","ASYMMETRIC_MORPH_BC","_bindgen_ty_21","SEL_DONT_CARE","SEL_HIT","SEL_MISS","_bindgen_ty_22","L_RUN_OFF","L_RUN_ON","_bindgen_ty_23","L_HORIZ","L_VERT","L_BOTH_DIRECTIONS","_bindgen_ty_24","L_MORPH_DILATE","L_MORPH_ERODE","L_MORPH_OPEN","L_MORPH_CLOSE","L_MORPH_HMT","_bindgen_ty_25","L_LINEAR_SCALE","L_LOG_SCALE","_bindgen_ty_26","L_TOPHAT_WHITE","L_TOPHAT_BLACK","_bindgen_ty_27","L_ARITH_ADD","L_ARITH_SUBTRACT","L_ARITH_MULTIPLY","L_ARITH_DIVIDE","L_UNION","L_INTERSECTION","L_SUBTRACTION","L_EXCLUSIVE_OR","_bindgen_ty_28","L_CHOOSE_MIN","L_CHOOSE_MAX","L_CHOOSE_MAXDIFF","L_CHOOSE_MIN_BOOST","L_CHOOSE_MAX_BOOST","_bindgen_ty_29","L_BOUNDARY_BG","L_BOUNDARY_FG","_bindgen_ty_30","L_COMPARE_XOR","L_COMPARE_SUBTRACT","L_COMPARE_ABS_DIFF","_bindgen_ty_31","L_MAX_DIFF_FROM_AVERAGE_2","L_MAX_MIN_DIFF_FROM_2","L_MAX_DIFF","_bindgen_ty_32","ADDED_BORDER","Pix","w","h","d","spp","wpl","refcount","xres","yres","informat","special","text","colormap","data","PIX","PixColormap","array","depth","nalloc","n","PIXCMAP","RGBA_Quad","blue","green","red","alpha","RGBA_QUAD","COLOR_RED","COLOR_GREEN","COLOR_BLUE","L_ALPHA_CHANNEL","_bindgen_ty_33","L_RED_SHIFT","L_GREEN_SHIFT","L_BLUE_SHIFT","L_ALPHA_SHIFT","L_DRAW_RED","L_DRAW_GREEN","L_DRAW_BLUE","L_DRAW_SPECIFIED","L_DRAW_RGB","L_DRAW_RANDOM","_bindgen_ty_34","L_RED_WEIGHT","L_GREEN_WEIGHT","L_BLUE_WEIGHT","REMOVE_CMAP_TO_BINARY","REMOVE_CMAP_TO_GRAYSCALE","REMOVE_CMAP_TO_FULL_COLOR","REMOVE_CMAP_WITH_ALPHA","REMOVE_CMAP_BASED_ON_SRC","_bindgen_ty_35","Pixa","n","nalloc","refcount","pix","boxa","PIXA","Pixaa","n","nalloc","pixa","boxa","PIXAA","Box","x","y","w","h","refcount","BOX","Boxa","n","nalloc","refcount","box_","BOXA","Boxaa","n","nalloc","boxa","BOXAA","Pta","n","nalloc","refcount","x","y","PTA","Ptaa","n","nalloc","pta","PTAA","Pixacc","w","h","offset","pix","PIXACC","PixTiling","pix","nx","ny","w","h","xoverlap","yoverlap","strip","PIXTILING","FPix","w","h","wpl","refcount","xres","yres","data","FPIX","FPixa","n","nalloc","refcount","fpix","FPIXA","DPix","w","h","wpl","refcount","xres","yres","data","DPIX","PixComp","w","h","d","xres","yres","comptype","text","cmapflag","data","size","PIXC","PixaComp","n","nalloc","offset","pixc","boxa","PIXAC","L_NOCOPY","L_INSERT","L_COPY","L_CLONE","L_COPY_CLONE","_bindgen_ty_36","L_SHELL_SORT","L_BIN_SORT","_bindgen_ty_37","L_SORT_INCREASING","L_SORT_DECREASING","_bindgen_ty_38","L_SORT_BY_X","L_SORT_BY_Y","L_SORT_BY_RIGHT","L_SORT_BY_BOT","L_SORT_BY_WIDTH","L_SORT_BY_HEIGHT","L_SORT_BY_MIN_DIMENSION","L_SORT_BY_MAX_DIMENSION","L_SORT_BY_PERIMETER","L_SORT_BY_AREA","L_SORT_BY_ASPECT_RATIO","_bindgen_ty_39","L_BLEND_WITH_INVERSE","L_BLEND_TO_WHITE","L_BLEND_TO_BLACK","L_BLEND_GRAY","L_BLEND_GRAY_WITH_INVERSE","_bindgen_ty_40","L_PAINT_LIGHT","L_PAINT_DARK","_bindgen_ty_41","L_SET_PIXELS","L_CLEAR_PIXELS","L_FLIP_PIXELS","_bindgen_ty_42","L_SELECT_IF_LT","L_SELECT_IF_GT","L_SELECT_IF_LTE","L_SELECT_IF_GTE","_bindgen_ty_43","L_SELECT_BY_WIDTH","L_SELECT_BY_HEIGHT","L_SELECT_BY_MAX_DIMENSION","L_SELECT_BY_AREA","L_SELECT_BY_PERIMETER","_bindgen_ty_44","L_SELECT_WIDTH","L_SELECT_HEIGHT","L_SELECT_XVAL","L_SELECT_YVAL","L_SELECT_IF_EITHER","L_SELECT_IF_BOTH","_bindgen_ty_45","L_CHECK_WIDTH","L_CHECK_HEIGHT","L_CHECK_BOTH","_bindgen_ty_46","L_SELECT_RED","L_SELECT_GREEN","L_SELECT_BLUE","L_SELECT_MIN","L_SELECT_MAX","L_SELECT_AVERAGE","L_SELECT_HUE","L_SELECT_SATURATION","_bindgen_ty_47","L_LS_BYTE","L_MS_BYTE","L_AUTO_BYTE","L_CLIP_TO_FF","L_LS_TWO_BYTES","L_MS_TWO_BYTES","L_CLIP_TO_FFFF","_bindgen_ty_48","L_ROTATE_AREA_MAP","L_ROTATE_SHEAR","L_ROTATE_SAMPLING","_bindgen_ty_49","L_BRING_IN_WHITE","L_BRING_IN_BLACK","_bindgen_ty_50","L_SHEAR_ABOUT_CORNER","L_SHEAR_ABOUT_CENTER","_bindgen_ty_51","L_TR_SC_RO","L_SC_RO_TR","L_RO_TR_SC","L_TR_RO_SC","L_RO_SC_TR","L_SC_TR_RO","_bindgen_ty_52","L_FILL_WHITE","L_FILL_BLACK","_bindgen_ty_53","L_SET_WHITE","L_SET_BLACK","_bindgen_ty_54","L_GET_WHITE_VAL","L_GET_BLACK_VAL","_bindgen_ty_55","L_WHITE_IS_MAX","L_BLACK_IS_MAX","_bindgen_ty_56","DEFAULT_CLIP_LOWER_1","DEFAULT_CLIP_UPPER_1","DEFAULT_CLIP_LOWER_2","DEFAULT_CLIP_UPPER_2","_bindgen_ty_57","L_MANHATTAN_DISTANCE","L_EUCLIDEAN_DISTANCE","_bindgen_ty_58","L_NEGATIVE","L_NON_NEGATIVE","L_POSITIVE","L_NON_POSITIVE","L_ZERO","L_ALL","_bindgen_ty_59","L_MEAN_ABSVAL","L_MEDIAN_VAL","L_MODE_VAL","L_MODE_COUNT","L_ROOT_MEAN_SQUARE","L_STANDARD_DEVIATION","L_VARIANCE","_bindgen_ty_60","L_CHOOSE_CONSECUTIVE","L_CHOOSE_SKIP_BY","_bindgen_ty_61","L_TEXT_ORIENT_UNKNOWN","L_TEXT_ORIENT_UP","L_TEXT_ORIENT_LEFT","L_TEXT_ORIENT_DOWN","L_TEXT_ORIENT_RIGHT","_bindgen_ty_62","L_HORIZONTAL_EDGES","L_VERTICAL_EDGES","L_ALL_EDGES","_bindgen_ty_63","L_HORIZONTAL_LINE","L_POS_SLOPE_LINE","L_VERTICAL_LINE","L_NEG_SLOPE_LINE","L_OBLIQUE_LINE","_bindgen_ty_64","L_PORTRAIT_MODE","L_LANDSCAPE_MODE","_bindgen_ty_65","L_FROM_LEFT","L_FROM_RIGHT","L_FROM_TOP","L_FROM_BOT","L_SCAN_NEGATIVE","L_SCAN_POSITIVE","L_SCAN_BOTH","L_SCAN_HORIZONTAL","L_SCAN_VERTICAL","_bindgen_ty_66","L_ADJUST_SKIP","L_ADJUST_LEFT","L_ADJUST_RIGHT","L_ADJUST_LEFT_AND_RIGHT","L_ADJUST_TOP","L_ADJUST_BOT","L_ADJUST_TOP_AND_BOT","L_ADJUST_CHOOSE_MIN","L_ADJUST_CHOOSE_MAX","L_SET_LEFT","L_SET_RIGHT","L_SET_TOP","L_SET_BOT","L_GET_LEFT","L_GET_RIGHT","L_GET_TOP","L_GET_BOT","_bindgen_ty_67","L_USE_MINSIZE","L_USE_MAXSIZE","L_SUB_ON_LOC_DIFF","L_SUB_ON_SIZE_DIFF","L_USE_CAPPED_MIN","L_USE_CAPPED_MAX","_bindgen_ty_68","L_COMBINE","L_REMOVE_SMALL","_bindgen_ty_69","L_GEOMETRIC_UNION","L_GEOMETRIC_INTERSECTION","L_LARGEST_AREA","L_SMALLEST_AREA","_bindgen_ty_70","L_USE_ALL_BOXES","L_USE_SAME_PARITY_BOXES","_bindgen_ty_71","L_UPPER_LEFT","L_UPPER_RIGHT","L_LOWER_LEFT","L_LOWER_RIGHT","L_BOX_CENTER","_bindgen_ty_72","L_WARP_TO_LEFT","L_WARP_TO_RIGHT","_bindgen_ty_73","L_LINEAR_WARP","L_QUADRATIC_WARP","_bindgen_ty_74","L_INTERPOLATED","L_SAMPLED","_bindgen_ty_75","L_THIN_FG","L_THIN_BG","_bindgen_ty_76","L_HORIZONTAL_RUNS","L_VERTICAL_RUNS","_bindgen_ty_77","L_SOBEL_EDGE","L_TWO_SIDED_EDGE","_bindgen_ty_78","L_SUBPIXEL_ORDER_RGB","L_SUBPIXEL_ORDER_BGR","L_SUBPIXEL_ORDER_VRGB","L_SUBPIXEL_ORDER_VBGR","_bindgen_ty_79","L_HS_HISTO","L_HV_HISTO","L_SV_HISTO","_bindgen_ty_80","L_INCLUDE_REGION","L_EXCLUDE_REGION","_bindgen_ty_81","L_ADD_ABOVE","L_ADD_BELOW","L_ADD_LEFT","L_ADD_RIGHT","L_ADD_AT_TOP","L_ADD_AT_BOT","L_ADD_AT_LEFT","L_ADD_AT_RIGHT","_bindgen_ty_82","L_PLOT_AT_TOP","L_PLOT_AT_MID_HORIZ","L_PLOT_AT_BOT","L_PLOT_AT_LEFT","L_PLOT_AT_MID_VERT","L_PLOT_AT_RIGHT","_bindgen_ty_83","L_USE_INNER","L_USE_OUTER","_bindgen_ty_84","L_DISPLAY_WITH_XZGV","L_DISPLAY_WITH_XLI","L_DISPLAY_WITH_XV","L_DISPLAY_WITH_IV","L_DISPLAY_WITH_OPEN","_bindgen_ty_85","L_NO_CHROMA_SAMPLING_JPEG","_bindgen_ty_86","L_CLIP_TO_ZERO","L_TAKE_ABSVAL","_bindgen_ty_87","L_LESS_THAN_ZERO","L_EQUAL_TO_ZERO","L_GREATER_THAN_ZERO","_bindgen_ty_88","L_ADD_TRAIL_SLASH","L_REMOVE_TRAIL_SLASH","_bindgen_ty_89","alloc_fn","dealloc_fn","L_Recog","scalew","scaleh","linew","templ_use","maxarraysize","setsize","threshold","maxyshift","charset_type","charset_size","min_nopad","num_samples","minwidth_u","maxwidth_u","minheight_u","maxheight_u","minwidth","maxwidth","ave_done","train_done","max_wh_ratio","max_ht_ratio","min_splitw","max_splith","sa_text","dna_tochar","centtab","sumtab","pixaa_u","ptaa_u","naasum_u","pixaa","ptaa","naasum","pixa_u","pta_u","nasum_u","pixa","pta","nasum","pixa_tr","pixadb_ave","pixa_id","pixdb_ave","pixdb_range","pixadb_boot","pixadb_split","bmf","bmf_size","did","rch","rcha","L_RECOG","L_Rch","index","score","text","sample","xloc","yloc","width","L_RCH","L_Rcha","naindex","nascore","satext","nasample","naxloc","nayloc","nawidth","L_RCHA","L_Rdid","pixs","counta","delya","narray","size","setwidth","nasum","namoment","fullarrays","beta","gamma","trellisscore","trellistempl","natempl","naxloc","nadely","nawidth","boxa","nascore","natempl_r","nasample_r","naxloc_r","nadely_r","nawidth_r","nascore_r","L_RDID","L_UNKNOWN","L_ARABIC_NUMERALS","L_LC_ROMAN_NUMERALS","L_UC_ROMAN_NUMERALS","L_LC_ALPHA","L_UC_ALPHA","_bindgen_ty_90","L_USE_ALL_TEMPLATES","L_USE_AVERAGE_TEMPLATES","_bindgen_ty_91","L_RegParams","fp","testname","tempfile","mode","index","success","display","tstart","L_REGPARAMS","L_REG_GENERATE","L_REG_COMPARE","L_REG_DISPLAY","_bindgen_ty_92","L_StrCode","fileno","ifunc","function","data","descr","n","L_STRCODE","L_STR_TYPE","L_STR_NAME","L_STR_READER","L_STR_MEMREADER","_bindgen_ty_93","L_Sudoku","num","locs","current","init","state","nguess","finished","failure","L_SUDOKU","L_SUDOKU_INIT","L_SUDOKU_STATE","_bindgen_ty_94","L_WShed","pixs","pixm","mindepth","pixlab","pixt","lines8","linem1","linelab32","linet1","pixad","ptas","nasi","nash","namh","nalevels","nseeds","nother","lut","links","arraysize","debug","L_WSHED","__builtin_va_list","__va_list_tag","gp_offset","fp_offset","overflow_arg_area","reg_save_area","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt"],"q":["leptonica_sysdi":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,3,3,0,4,4,0,0,5,5,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,8,8,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,11,11,0,12,12,0,0,0,13,0,0,0,0,0,0,14,14,0,0,15,0,0,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,0,19,19,0,20,20,0,21,21,0,22,22,0,0,23,23,0,24,24,0,0,0,25,25,0,26,26,26,0,27,27,27,0,28,28,28,0,29,29,0,0,30,30,0,31,31,0,32,32,32,32,32,32,32,0,33,33,33,33,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,34,34,0,0,0,0,0,0,0,0,0,0,35,35,35,35,35,35,0,0,36,36,36,0,0,37,37,37,37,37,37,0,0,38,38,38,0,0,39,39,39,0,0,40,40,40,40,0,0,41,41,41,41,0,0,0,0,0,0,0,0,0,0,0,0,42,42,42,42,0,0,43,43,43,43,0,0,44,44,44,0,0,45,45,45,45,0,0,46,46,0,0,0,0,0,0,0,0,0,0,0,0,47,47,47,47,47,0,0,0,0,0,0,48,48,48,48,0,0,49,49,0,0,0,0,50,50,50,50,50,50,0,0,0,0,51,51,51,51,0,0,0,0,0,0,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,0,0,0,0,0,0,53,53,53,53,53,53,53,53,53,0,0,54,54,54,54,54,54,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,0,0,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,0,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,62,62,62,62,62,62,0,0,63,63,63,0,0,64,64,64,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,66,66,66,66,0,0,67,67,67,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,68,68,68,68,0,0,69,69,69,69,0,0,70,70,70,70,70,0,0,71,71,71,71,0,0,72,72,72,0,0,73,73,73,73,73,0,0,74,74,74,0,0,75,75,75,75,0,0,76,76,76,76,76,76,76,76,0,0,77,77,77,77,77,77,77,0,0,78,78,78,78,0,0,79,79,79,79,79,79,79,0,0,80,80,80,80,80,80,80,80,80,80,0,0,81,81,81,81,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,0,83,83,83,83,83,83,83,0,0,84,84,84,84,84,84,84,0,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,0,0,0,0,0,0,0,0,0,0,0,0,86,86,86,86,86,86,86,86,0,0,0,0,0,0,87,87,87,87,87,87,0,0,0,0,0,0,0,88,88,88,88,88,88,88,88,0,0,0,0,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,0,0,0,90,90,90,90,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,1,2,3,4,5,91,92,93,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,1,91,92,93,6,7,8,9,10,11,12,13,14,15,16,17,20,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["__fsid_t",3]],[[],["__mbstate_t",3]],[[],["__mbstate_t__bindgen_ty_1",19]],[[],["_g_fpos_t",3]],[[],["_g_fpos64_t",3]],[[],["_io_marker",3]],[[],["_io_codecvt",3]],[[],["_io_wide_data",3]],[[],["_io_file",3]],[[],["div_t",3]],[[],["ldiv_t",3]],[[],["lldiv_t",3]],[[],["__sigset_t",3]],[[],["timeval",3]],[[],["timespec",3]],[[],["fd_set",3]],[[],["__pthread_internal_list",3]],[[],["__pthread_internal_slist",3]],[[],["__pthread_mutex_s",3]],[[],["__pthread_rwlock_arch_t",3]],[[],["__pthread_cond_s",3]],[[],["__pthread_cond_s__bindgen_ty_1",19]],[[],["__pthread_cond_s__bindgen_ty_1__bindgen_ty_1",3]],[[],["__pthread_cond_s__bindgen_ty_2",19]],[[],["__pthread_cond_s__bindgen_ty_2__bindgen_ty_1",3]],[[],["pthread_mutexattr_t",19]],[[],["pthread_condattr_t",19]],[[],["pthread_attr_t",19]],[[],["pthread_mutex_t",19]],[[],["pthread_cond_t",19]],[[],["pthread_rwlock_t",19]],[[],["pthread_rwlockattr_t",19]],[[],["pthread_barrier_t",19]],[[],["pthread_barrierattr_t",19]],[[],["random_data",3]],[[],["drand48_data",3]],[[],["l_walltimer",3]],[[],["numa",3]],[[],["numaa",3]],[[],["l_dna",3]],[[],["l_dnaa",3]],[[],["l_dnahash",3]],[[],["sarray",3]],[[],["l_bytea",3]],[[],["l_bytebuffer",3]],[[],["l_heap",3]],[[],["doublelinkedlist",3]],[[],["l_ptra",3]],[[],["l_ptraa",3]],[[],["l_queue",3]],[[],["rb_type",19]],[[],["l_rbtree",3]],[[],["l_rbtree_node",3]],[[],["l_stack",3]],[[],["l_bmf",3]],[[],["ccbord",3]],[[],["ccborda",3]],[[],["l_dewarpa",3]],[[],["l_dewarp",3]],[[],["gplot",3]],[[],["l_compressed_data",3]],[[],["l_pdf_data",3]],[[],["jbclasser",3]],[[],["jbdata",3]],[[],["sel",3]],[[],["sela",3]],[[],["l_kernel",3]],[[],["pix",3]],[[],["pixcolormap",3]],[[],["rgba_quad",3]],[[],["pixa",3]],[[],["pixaa",3]],[[],["box",3]],[[],["boxa",3]],[[],["boxaa",3]],[[],["pta",3]],[[],["ptaa",3]],[[],["pixacc",3]],[[],["pixtiling",3]],[[],["fpix",3]],[[],["fpixa",3]],[[],["dpix",3]],[[],["pixcomp",3]],[[],["pixacomp",3]],[[],["l_recog",3]],[[],["l_rch",3]],[[],["l_rcha",3]],[[],["l_rdid",3]],[[],["l_regparams",3]],[[],["l_strcode",3]],[[],["l_sudoku",3]],[[],["l_wshed",3]],[[],["__va_list_tag",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[3,"__fsid_t"],[3,"__mbstate_t"],[19,"__mbstate_t__bindgen_ty_1"],[3,"_G_fpos_t"],[3,"_G_fpos64_t"],[3,"_IO_FILE"],[3,"div_t"],[3,"ldiv_t"],[3,"lldiv_t"],[3,"__sigset_t"],[3,"timeval"],[3,"timespec"],[3,"fd_set"],[3,"__pthread_internal_list"],[3,"__pthread_internal_slist"],[3,"__pthread_mutex_s"],[3,"__pthread_rwlock_arch_t"],[3,"__pthread_cond_s"],[19,"__pthread_cond_s__bindgen_ty_1"],[3,"__pthread_cond_s__bindgen_ty_1__bindgen_ty_1"],[19,"__pthread_cond_s__bindgen_ty_2"],[3,"__pthread_cond_s__bindgen_ty_2__bindgen_ty_1"],[19,"pthread_mutexattr_t"],[19,"pthread_condattr_t"],[19,"pthread_attr_t"],[19,"pthread_mutex_t"],[19,"pthread_cond_t"],[19,"pthread_rwlock_t"],[19,"pthread_rwlockattr_t"],[19,"pthread_barrier_t"],[19,"pthread_barrierattr_t"],[3,"random_data"],[3,"drand48_data"],[3,"L_WallTimer"],[3,"Numa"],[3,"Numaa"],[3,"L_Dna"],[3,"L_Dnaa"],[3,"L_DnaHash"],[3,"Sarray"],[3,"L_Bytea"],[3,"L_ByteBuffer"],[3,"L_Heap"],[3,"DoubleLinkedList"],[3,"L_Ptra"],[3,"L_Ptraa"],[3,"L_Queue"],[19,"Rb_Type"],[3,"L_Rbtree"],[3,"L_Rbtree_Node"],[3,"L_Stack"],[3,"L_Bmf"],[3,"CCBord"],[3,"CCBorda"],[3,"L_Dewarpa"],[3,"L_Dewarp"],[3,"GPlot"],[3,"L_Compressed_Data"],[3,"L_Pdf_Data"],[3,"JbClasser"],[3,"JbData"],[3,"Sel"],[3,"Sela"],[3,"L_Kernel"],[3,"Pix"],[3,"PixColormap"],[3,"RGBA_Quad"],[3,"Pixa"],[3,"Pixaa"],[3,"Box"],[3,"Boxa"],[3,"Boxaa"],[3,"Pta"],[3,"Ptaa"],[3,"Pixacc"],[3,"PixTiling"],[3,"FPix"],[3,"FPixa"],[3,"DPix"],[3,"PixComp"],[3,"PixaComp"],[3,"L_Recog"],[3,"L_Rch"],[3,"L_Rcha"],[3,"L_Rdid"],[3,"L_RegParams"],[3,"L_StrCode"],[3,"L_Sudoku"],[3,"L_WShed"],[3,"__va_list_tag"],[3,"_IO_marker"],[3,"_IO_codecvt"],[3,"_IO_wide_data"]]},\
"proc_macro2":{"doc":"A wrapper around the procedural macro API of the compilerâ€¦","t":[0,3,3,3,11,11,11,3,11,11,11,11,11,11,4,13,13,13,13,11,11,3,4,13,13,13,13,11,11,11,11,11,11,11,3,4,13,13,11,11,11,11,11,3,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["token_stream","IntoIter","TokenStream","LexError","new","is_empty","span","Span","call_site","mixed_site","resolved_at","located_at","unwrap","join","TokenTree","Group","Ident","Punct","Literal","span","set_span","Group","Delimiter","Parenthesis","Brace","Bracket","None","new","delimiter","stream","span","span_open","span_close","set_span","Punct","Spacing","Alone","Joint","new","as_char","spacing","span","set_span","Ident","new","span","set_span","Literal","u8_suffixed","u16_suffixed","u32_suffixed","u64_suffixed","u128_suffixed","usize_suffixed","i8_suffixed","i16_suffixed","i32_suffixed","i64_suffixed","i128_suffixed","isize_suffixed","u8_unsuffixed","u16_unsuffixed","u32_unsuffixed","u64_unsuffixed","u128_unsuffixed","usize_unsuffixed","i8_unsuffixed","i16_unsuffixed","i32_unsuffixed","i64_unsuffixed","i128_unsuffixed","isize_unsuffixed","f64_unsuffixed","f64_suffixed","f32_unsuffixed","f32_suffixed","string","character","byte_string","span","set_span","subspan","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","from","from","from","from","extend","extend","into_iter","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","cmp","eq","eq","eq","eq","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","from_str","from_iter","from_iter"],"q":["proc_macro2","proc_macro2::token_stream","proc_macro2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","proc_macro2::token_stream","","","","","","","","","","proc_macro2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","proc_macro2::token_stream","proc_macro2","","","","","","","","","proc_macro2::token_stream","proc_macro2","","","","","","","","","","","","","","","","","proc_macro2::token_stream","proc_macro2","","","","","","","","","",""],"d":["Public implementation details for the <code>TokenStream</code> type, â€¦","An iterator over <code>TokenStream</code>â€™s <code>TokenTree</code>s.","An abstract stream of tokens, or more concretely a â€¦","Error returned from <code>TokenStream::from_str</code>.","Returns an empty <code>TokenStream</code> containing no token trees.","Checks if this <code>TokenStream</code> is empty.","","A region of source code, along with macro expansion â€¦","The span of the invocation of the current procedural â€¦","The span located at the invocation of the procedural â€¦","Creates a new span with the same line/column information â€¦","Creates a new span with the same name resolution behavior â€¦","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Create a new span encompassing <code>self</code> and <code>other</code>.","A single token or a delimited sequence of token trees â€¦","A token stream surrounded by bracket delimiters.","An identifier.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","A literal character (<code>\'a\'</code>), string (<code>\\\"hello\\\"</code>), number (<code>2.3</code>â€¦","Returns the span of this tree, delegating to the <code>span</code> â€¦","Configures the span for <em>only this token</em>.","A delimited token stream.","Describes how a sequence of token trees is delimited.","<code>( ... )</code>","<code>{ ... }</code>","<code>[ ... ]</code>","<code>Ã˜ ... Ã˜</code>","Creates a new <code>Group</code> with the given delimiter and token â€¦","Returns the delimiter of this <code>Group</code>","Returns the <code>TokenStream</code> of tokens that are delimited in â€¦","Returns the span for the delimiters of this token stream, â€¦","Returns the span pointing to the opening delimiter of â€¦","Returns the span pointing to the closing delimiter of â€¦","Configures the span for this <code>Group</code>â€™s delimiters, but â€¦","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> â€¦","E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>\'</code> is <code>Joint</code> in <code>\'#</code>.","Creates a new <code>Punct</code> from the given character and spacing.","Returns the value of this punctuation character as <code>char</code>.","Returns the spacing of this punctuation character, â€¦","Returns the span for this punctuation character.","Configure the span for this punctuation character.","A word of Rust code, which may be a keyword or legal â€¦","Creates a new <code>Ident</code> with the given <code>string</code> as well as the â€¦","Returns the span of this <code>Ident</code>.","Configures the span of this <code>Ident</code>, possibly changing its â€¦","A literal string (<code>\\\"hello\\\"</code>), byte string (<code>b\\\"hello\\\"</code>), â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new suffixed integer literal with the specified â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed integer literal with the â€¦","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","String literal.","Character literal.","Byte string literal.","Returns the span encompassing this literal.","Configures the span associated for this literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,2,0,3,3,3,3,3,3,0,4,4,4,4,4,4,0,0,5,5,5,5,6,6,6,6,6,6,6,0,0,7,7,8,8,8,8,8,0,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,3,1,1,4,4,4,4,1,1,1,11,1,3,4,6,5,8,7,9,10,11,1,9,5,7,9,9,9,1,2,3,4,5,6,7,8,9,10,11,1,2,4,6,8,9,10,9,1,1,1],"f":[null,null,null,null,[[],["tokenstream",3]],[[],["bool",15]],[[],["span",3]],null,[[],["span",3]],[[],["span",3]],[[["span",3]],["span",3]],[[["span",3]],["span",3]],[[],["span",3]],[[["span",3]],[["span",3],["option",4]]],null,null,null,null,null,[[],["span",3]],[[["span",3]]],null,null,null,null,null,null,[[["delimiter",4],["tokenstream",3]],["group",3]],[[],["delimiter",4]],[[],["tokenstream",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[["span",3]]],null,null,null,null,[[["spacing",4],["char",15]],["punct",3]],[[],["char",15]],[[],["spacing",4]],[[],["span",3]],[[["span",3]]],null,[[["span",3],["str",15]],["ident",3]],[[],["span",3]],[[["span",3]]],null,[[["u8",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u128",15]],["literal",3]],[[["usize",15]],["literal",3]],[[["i8",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i128",15]],["literal",3]],[[["isize",15]],["literal",3]],[[["u8",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u128",15]],["literal",3]],[[["usize",15]],["literal",3]],[[["i8",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i128",15]],["literal",3]],[[["isize",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["f32",15]],["literal",3]],[[["f32",15]],["literal",3]],[[["str",15]],["literal",3]],[[["char",15]],["literal",3]],[[],["literal",3]],[[],["span",3]],[[["span",3]]],[[["usize",15],["rangebounds",8]],[["span",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["span",3]],["span",3]],[[["tokenstream",3]],["tokenstream",3]],[[["tokentree",4]]],[[["group",3]],["tokentree",4]],[[["ident",3]],["tokentree",4]],[[["punct",3]],["tokentree",4]],[[["literal",3]],["tokentree",4]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["intoiter",3]],[[],[["option",4],["tokentree",4]]],[[],["tokenstream",3]],[[],["span",3]],[[],["tokentree",4]],[[],["group",3]],[[],["delimiter",4]],[[],["punct",3]],[[],["spacing",4]],[[],["ident",3]],[[],["literal",3]],[[],["intoiter",3]],[[]],[[["ident",3]],["ordering",4]],[[["delimiter",4]],["bool",15]],[[["spacing",4]],["bool",15]],[[["ident",3]],["bool",15]],[[],["bool",15]],[[["ident",3]],[["option",4],["ordering",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["str",15]],[["lexerror",3],["tokenstream",3],["result",4]]],[[["intoiterator",8]]],[[["intoiterator",8]]]],"p":[[3,"TokenStream"],[3,"LexError"],[3,"Span"],[4,"TokenTree"],[4,"Delimiter"],[3,"Group"],[4,"Spacing"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"IntoIter"]]},\
"quote":{"doc":"githubâ€‚crates-ioâ€‚docs-rs","t":[8,10,10,10,10,8,10,11,8,10,11,11,14,14,14,11,11,11],"n":["TokenStreamExt","append","append_all","append_separated","append_terminated","IdentFragment","fmt","span","ToTokens","to_tokens","to_token_stream","into_token_stream","format_ident","quote","quote_spanned","span","to_token_stream","into_token_stream"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["TokenStream extension trait with methods for appending â€¦","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Specialized formatting trait used by <code>format_ident!</code>.","Format this value as an identifier fragment.","Span associated with this <code>IdentFragment</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","Write <code>self</code> to the given <code>TokenStream</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Formatting macro for constructing <code>Ident</code>s.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens â€¦","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object."],"i":[0,1,1,1,1,0,2,2,0,3,3,3,0,0,0,2,3,3],"f":[null,[[]],[[]],[[]],[[]],null,[[["formatter",3]],["result",6]],[[],[["option",4],["span",3]]],null,[[["tokenstream",3]]],[[],["tokenstream",3]],[[],["tokenstream",3]],null,null,null,[[],[["option",4],["span",3]]],[[],["tokenstream",3]],[[],["tokenstream",3]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"syn":{"doc":"githubâ€‚crates-ioâ€‚docs-rs","tn":["token","Token","Underscore","spans","Abstract","span","As","span","Async","span","Auto","span","Await","span","Become","span","Box","span","Break","span","Const","span","Continue","span","Crate","span","Default","span","Do","span","Dyn","span","Else","span","Enum","span","Extern","span","Final","span","Fn","span","For","span","If","span","Impl","span","In","span","Let","span","Loop","span","Macro","span","Match","span","Mod","span","Move","span","Mut","span","Override","span","Priv","span","Pub","span","Ref","span","Return","span","SelfType","span","SelfValue","span","Static","span","Struct","span","Super","span","Trait","span","Try","span","Type","span","Typeof","span","Union","span","Unsafe","span","Unsized","span","Use","span","Virtual","span","Where","span","While","span","Yield","span","Add","spans","AddEq","spans","And","spans","AndAnd","spans","AndEq","spans","At","spans","Bang","spans","Caret","spans","CaretEq","spans","Colon","spans","Colon2","spans","Comma","spans","Div","spans","DivEq","spans","Dollar","spans","Dot","spans","Dot2","spans","Dot3","spans","DotDotEq","spans","Eq","spans","EqEq","spans","Ge","spans","Gt","spans","Le","spans","Lt","spans","MulEq","spans","Ne","spans","Or","spans","OrEq","spans","OrOr","spans","Pound","spans","Question","spans","RArrow","spans","LArrow","spans","Rem","spans","RemEq","spans","FatArrow","spans","Semi","spans","Shl","spans","ShlEq","spans","Shr","spans","ShrEq","spans","Star","spans","Sub","spans","SubEq","spans","Tilde","spans","Brace","span","surround","Bracket","span","surround","Paren","span","surround","Group","span","surround","buffer","TokenBuffer","new","new2","begin","Cursor","empty","eof","group","ident","punct","literal","lifetime","token_stream","token_tree","span","ext","IdentExt","parse_any","peek_any","unraw","punctuated","Punctuated","new","is_empty","len","first","first_mut","last","last_mut","iter","iter_mut","pairs","pairs_mut","into_pairs","push_value","push_punct","pop","trailing_punct","empty_or_trailing","push","insert","clear","parse_terminated","parse_terminated_with","parse_separated_nonempty","parse_separated_nonempty_with","Pairs","PairsMut","IntoPairs","IntoIter","Iter","IterMut","Pair","Punctuated","End","into_value","value","value_mut","punct","new","into_tuple","spanned","Spanned","span","parse","discouraged","Speculative","advance_to","Error","Result","Lookahead1","Peek","Parse","parse","ParseStream","ParseBuffer","StepCursor","error","parse","call","peek","peek2","peek3","parse_terminated","is_empty","lookahead1","fork","error","step","span","cursor","Parser","Output","parse2","parse","parse_str","Nothing","new","new_spanned","span","to_compile_error","into_compile_error","combine","Ident","AttrStyle","Outer","Inner","Attribute","pound_token","style","bracket_token","path","tokens","AttributeArgs","Meta","Path","List","NameValue","MetaList","path","paren_token","nested","MetaNameValue","path","eq_token","lit","NestedMeta","Meta","Lit","Field","attrs","vis","ident","colon_token","ty","Fields","Named","Unnamed","Unit","FieldsNamed","brace_token","named","FieldsUnnamed","paren_token","unnamed","Variant","attrs","ident","fields","discriminant","VisCrate","crate_token","VisPublic","pub_token","VisRestricted","pub_token","paren_token","in_token","path","Visibility","Public","Crate","Restricted","Inherited","Expr","Array","Assign","AssignOp","Async","Await","Binary","Block","Box","Break","Call","Cast","Closure","Continue","Field","ForLoop","Group","If","Index","Let","Lit","Loop","Macro","Match","MethodCall","Paren","Path","Range","Reference","Repeat","Return","Struct","Try","TryBlock","Tuple","Type","Unary","Unsafe","Verbatim","While","Yield","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","attrs","left","op","right","ExprBlock","ExprBox","ExprBreak","ExprCall","attrs","func","paren_token","args","ExprCast","attrs","expr","as_token","ty","ExprClosure","ExprContinue","ExprField","attrs","base","dot_token","member","ExprForLoop","ExprGroup","ExprIf","ExprIndex","attrs","expr","bracket_token","index","ExprLet","ExprLit","attrs","lit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","attrs","paren_token","expr","ExprPath","attrs","qself","path","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","attrs","op","expr","ExprUnsafe","ExprWhile","ExprYield","Index","index","span","Member","Named","Unnamed","BoundLifetimes","for_token","lt_token","lifetimes","gt_token","ConstParam","attrs","const_token","ident","colon_token","ty","eq_token","default","GenericParam","Type","Lifetime","Const","Generics","lt_token","params","gt_token","where_clause","LifetimeDef","attrs","lifetime","colon_token","bounds","PredicateEq","lhs_ty","eq_token","rhs_ty","PredicateLifetime","lifetime","colon_token","bounds","PredicateType","lifetimes","bounded_ty","colon_token","bounds","TraitBound","paren_token","modifier","lifetimes","path","TraitBoundModifier","None","Maybe","TypeParam","attrs","ident","colon_token","bounds","eq_token","default","TypeParamBound","Trait","Lifetime","WhereClause","where_token","predicates","WherePredicate","Type","Lifetime","Eq","ImplGenerics","Turbofish","TypeGenerics","Lifetime","apostrophe","ident","Lit","Str","ByteStr","Byte","Char","Int","Float","Bool","Verbatim","LitBool","value","span","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","StrStyle","Cooked","Raw","Macro","path","bang_token","delimiter","tokens","MacroDelimiter","Paren","Brace","Bracket","Data","Struct","Enum","Union","DataEnum","enum_token","brace_token","variants","DataStruct","struct_token","fields","semi_token","DataUnion","union_token","fields","DeriveInput","attrs","vis","ident","generics","data","BinOp","Add","Sub","Mul","Div","Rem","And","Or","BitXor","BitAnd","BitOr","Shl","Shr","Eq","Lt","Le","Ne","Ge","Gt","AddEq","SubEq","MulEq","DivEq","RemEq","BitXorEq","BitAndEq","BitOrEq","ShlEq","ShrEq","UnOp","Deref","Not","Neg","Abi","extern_token","name","BareFnArg","attrs","name","ty","ReturnType","Default","Type","Type","Array","BareFn","Group","ImplTrait","Infer","Macro","Never","Paren","Path","Ptr","Reference","Slice","TraitObject","Tuple","Verbatim","TypeArray","bracket_token","elem","semi_token","len","TypeBareFn","lifetimes","unsafety","abi","fn_token","paren_token","inputs","variadic","output","TypeGroup","group_token","elem","TypeImplTrait","impl_token","bounds","TypeInfer","underscore_token","TypeMacro","mac","TypeNever","bang_token","TypeParen","paren_token","elem","TypePath","qself","path","TypePtr","star_token","const_token","mutability","elem","TypeReference","and_token","lifetime","mutability","elem","TypeSlice","bracket_token","elem","TypeTraitObject","dyn_token","bounds","TypeTuple","paren_token","elems","Variadic","attrs","dots","AngleBracketedGenericArguments","colon2_token","lt_token","args","gt_token","Binding","ident","eq_token","ty","Constraint","ident","colon_token","bounds","GenericArgument","Lifetime","Type","Binding","Constraint","Const","ParenthesizedGenericArguments","paren_token","inputs","output","Path","leading_colon","segments","PathArguments","None","AngleBracketed","Parenthesized","PathSegment","ident","arguments","QSelf","lt_token","ty","position","as_token","gt_token","Error","Result","parse","parse2","parse_str","parenthesized","braced","bracketed","Token","parse_quote","parse_macro_input","custom_keyword","custom_punctuation","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","eq","eq","hash","cmp","fmt","clone","partial_cmp","fmt","span","fmt","to_tokens","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","parse_any","unraw","advance_to","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","next_back","next_back","next_back","next_back","next_back","next_back","len","len","len","len","len","len","extend","extend","extend","into_iter","into_iter","into_iter","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","cmp","eq","eq","eq","eq","partial_cmp","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","index","index_mut","hash","hash","hash","from_iter","from_iter","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","fmt","span","fmt","span","new","span","set_span","parse_meta","parse_args","parse_args_with","parse_outer","parse_inner","path","parse_named","parse_unnamed","iter","iter_mut","len","is_empty","type_params","type_params_mut","lifetimes","lifetimes_mut","const_params","const_params_mut","make_where_clause","split_for_impl","as_turbofish","new","new","span","set_span","new","suffix","span","set_span","new","value","parse","parse_with","span","set_span","suffix","new","value","span","set_span","suffix","new","value","span","set_span","suffix","new","value","span","set_span","suffix","new","base10_digits","base10_parse","suffix","span","set_span","new","base10_digits","base10_parse","suffix","span","set_span","new","value","span","set_span","parse_body","parse_body_with","without_plus","without_plus","without_plus","parse_mod_style","is_ident","get_ident","is_empty","peek","error"],"q":["syn","syn::tokensyn","syn::buffer","","","","","","","","","","","","","","","syn","syn::ext","","","","syn","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","syn::spanned","","syn","syn::parse","syn::parse::discouraged","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","synsyn::tokensynsyn::buffer","","","","","","","","","","","","","","","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","syn::parse","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","syn::punctuated","","","","","","","","","","","","","","syn::parse","syn","syn::punctuated","syn::parse","syn::punctuated","","","","","","","","","","","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","syn::buffer","syn::punctuated","","","","","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","syn::punctuated","syn","","","","syn::buffer","syn","syn::token","","","","","","","","","","","","","","","","","","","","","","syn::parse","syn::token","","","","","","","","","","","","","","","","","","","","","","syn::parse","","syn","","","syn::parse","","syn::punctuated","","syn","","","syn::punctuated","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::punctuated","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse",""],"d":["Tokens representing Rust punctuation, keywords, and â€¦","Marker trait for types that represent single tokens.","<code>_</code>","","<code>abstract</code>","","<code>as</code>","","<code>async</code>","","<code>auto</code>","","<code>await</code>","","<code>become</code>","","<code>box</code>","","<code>break</code>","","<code>const</code>","","<code>continue</code>","","<code>crate</code>","","<code>default</code>","","<code>do</code>","","<code>dyn</code>","","<code>else</code>","","<code>enum</code>","","<code>extern</code>","","<code>final</code>","","<code>fn</code>","","<code>for</code>","","<code>if</code>","","<code>impl</code>","","<code>in</code>","","<code>let</code>","","<code>loop</code>","","<code>macro</code>","","<code>match</code>","","<code>mod</code>","","<code>move</code>","","<code>mut</code>","","<code>override</code>","","<code>priv</code>","","<code>pub</code>","","<code>ref</code>","","<code>return</code>","","<code>Self</code>","","<code>self</code>","","<code>static</code>","","<code>struct</code>","","<code>super</code>","","<code>trait</code>","","<code>try</code>","","<code>type</code>","","<code>typeof</code>","","<code>union</code>","","<code>unsafe</code>","","<code>unsized</code>","","<code>use</code>","","<code>virtual</code>","","<code>where</code>","","<code>while</code>","","<code>yield</code>","","<code>+</code>","","<code>+=</code>","","<code>&</code>","","<code>&&</code>","","<code>&=</code>","","<code>@</code>","","<code>!</code>","","<code>^</code>","","<code>^=</code>","","<code>:</code>","","<code>::</code>","","<code>,</code>","","<code>/</code>","","<code>/=</code>","","<code>$</code>","","<code>.</code>","","<code>..</code>","","<code>...</code>","","<code>..=</code>","","<code>=</code>","","<code>==</code>","","<code>>=</code>","","<code>></code>","","<code><=</code>","","<code><</code>","","<code>*=</code>","","<code>!=</code>","","<code>|</code>","","<code>|=</code>","","<code>||</code>","","<code>#</code>","","<code>?</code>","","<code>-></code>","","<code><-</code>","","<code>%</code>","","<code>%=</code>","","<code>=></code>","","<code>;</code>","","<code><<</code>","","<code><<=</code>","","<code>>></code>","","<code>>>=</code>","","<code>*</code>","","<code>-</code>","","<code>-=</code>","","<code>~</code>","","<code>{...}</code>","","","<code>[...]</code>","","","<code>(...)</code>","","","None-delimited group","","","A stably addressed token buffer supporting efficient â€¦","A buffer that can be efficiently traversed multiple â€¦","Creates a <code>TokenBuffer</code> containing all the tokens from the â€¦","Creates a <code>TokenBuffer</code> containing all the tokens from the â€¦","Creates a cursor referencing the first token in the â€¦","A cheaply copyable cursor into a <code>TokenBuffer</code>.","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the â€¦","If the cursor is pointing at a <code>Group</code> with the given â€¦","If the cursor is pointing at a <code>Ident</code>, returns it along â€¦","If the cursor is pointing at an <code>Punct</code>, returns it along â€¦","If the cursor is pointing at a <code>Literal</code>, return it along â€¦","If the cursor is pointing at a <code>Lifetime</code>, returns it along â€¦","Copies all remaining tokens visible from this cursor into â€¦","If the cursor is pointing at a <code>TokenTree</code>, returns it â€¦","Returns the <code>Span</code> of the current token, or â€¦","Extension traits to provide parsing methods on foreign â€¦","Additional methods for <code>Ident</code> not provided by proc-macro2 â€¦","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: â€¦","Strips the raw marker <code>r#</code>, if any, from the beginning of â€¦","A punctuated sequence of syntax tree nodes separated by â€¦","A punctuated sequence of syntax tree nodes of type <code>T</code> â€¦","Creates an empty punctuated sequence.","Determines whether this punctuated sequence is empty, â€¦","Returns the number of syntax tree nodes in this â€¦","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns an iterator over borrowed syntax tree nodes of â€¦","Returns an iterator over mutably borrowed syntax tree â€¦","Returns an iterator over the contents of this sequence as â€¦","Returns an iterator over the contents of this sequence as â€¦","Returns an iterator over the contents of this sequence as â€¦","Appends a syntax tree node onto the end of this â€¦","Appends a trailing punctuation onto the end of this â€¦","Removes the last punctuated pair from this sequence, or â€¦","Determines whether this punctuated sequence ends with a â€¦","Returns true if either this <code>Punctuated</code> is empty, or it â€¦","Appends a syntax tree node onto the end of this â€¦","Inserts an element at position <code>index</code>.","Clears the sequence of all values and punctuation, making â€¦","Parses zero or more occurrences of <code>T</code> separated by â€¦","Parses zero or more occurrences of <code>T</code> using the given â€¦","Parses one or more occurrences of <code>T</code> separated by â€¦","Parses one or more occurrences of <code>T</code> using the given parse â€¦","An iterator over borrowed pairs of type <code>Pair<&T, &P></code>.","An iterator over mutably borrowed pairs of type â€¦","An iterator over owned pairs of type <code>Pair<T, P></code>.","An iterator over owned values of type <code>T</code>.","An iterator over borrowed values of type <code>&T</code>.","An iterator over mutably borrowed values of type <code>&mut T</code>.","A single syntax tree node of type <code>T</code> followed by its â€¦","","","Extracts the syntax tree node from this punctuated pair, â€¦","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated â€¦","Borrows the punctuation from this punctuated pair, unless â€¦","Creates a punctuated pair out of a syntax tree node and â€¦","Produces this punctuated pair as a tuple of syntax tree â€¦","A trait that can provide the <code>Span</code> of the complete â€¦","A trait that can provide the <code>Span</code> of the complete â€¦","Returns a <code>Span</code> covering the complete contents of this â€¦","Parsing interface for parsing a token stream into a â€¦","Extensions to the parsing API with niche applicability.","Extensions to the <code>ParseStream</code> API to support speculative â€¦","Advance this parse stream to the position of a forked â€¦","Error returned when a Syn parser cannot parse the input â€¦","The result of a Syn parser.","Support for checking the next token in a stream to decide â€¦","Types that can be parsed by looking at just one token.","Parsing interface implemented by all types that can be â€¦","","Input to a Syn parser function.","Cursor position within a buffered token stream.","Cursor state associated with speculative parsing.","Triggers an error at the current position of the parse â€¦","Parses a syntax tree node of type <code>T</code>, advancing the â€¦","Calls the given parser function to parse a syntax tree â€¦","Looks at the next token in the parse stream to determine â€¦","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Parses zero or more occurrences of <code>T</code> separated by â€¦","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this â€¦","Forks a parse stream so that parsing tokens out of either â€¦","Triggers an error at the current position of the parse â€¦","Speculatively parses tokens from this parse stream, â€¦","Returns the <code>Span</code> of the next token in the parse stream, orâ€¦","Provides low-level access to the token representation â€¦","Parser that can parse Rust tokens into a particular â€¦","","Parse a proc-macro2 token stream into the chosen syntax â€¦","Parse tokens of source code into the chosen syntax tree â€¦","Parse a string of Rust code into the chosen syntax tree â€¦","An empty syntax tree node that consumes no tokens when â€¦","Usually the <code>ParseStream::error</code> method will be used â€¦","Creates an error with the specified message spanning the â€¦","The source location of the error.","Render the error as an invocation of <code>compile_error!</code>.","Render the error as an invocation of <code>compile_error!</code>.","Add another error message to self such that when â€¦","A word of Rust code, which may be a keyword or legal â€¦","Distinguishes between attributes that decorate an item â€¦","","","An attribute like <code>#[repr(transparent)]</code>.","","","","","","Conventional argument type associated with an invocation â€¦","Content of a compile-time structured attribute.","","A structured list within an attribute, like â€¦","A name-value pair within an attribute, like â€¦","A structured list within an attribute, like â€¦","","","","A name-value pair within an attribute, like â€¦","","","","Element of a compile-time attribute list.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> â€¦","A Rust literal, like the <code>\\\"new_name\\\"</code> in â€¦","A field of a struct or enum variant.","Attributes tagged on the field.","Visibility of the field.","Name of the field, if any.","","Type of the field.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as â€¦","Unnamed fields of a tuple struct or tuple variant such as â€¦","Unit struct or unit variant such as <code>None</code>.","Named fields of a struct or struct variant such as â€¦","","","Unnamed fields of a tuple struct or tuple variant such as â€¦","","","An enum variant.","Attributes tagged on the variant.","Name of the variant.","Content stored in the variant.","Explicit discriminant: <code>Variant = 1</code>","A crate-level visibility: <code>crate</code>.","","A public visibility level: <code>pub</code>.","","A visibility level restricted to some path: <code>pub(self)</code> or â€¦","","","","","The visibility level of an item: inherited or <code>pub</code> or â€¦","A public visibility level: <code>pub</code>.","A crate-level visibility: <code>crate</code>.","A visibility level restricted to some path: <code>pub(self)</code> or â€¦","An inherited visibility, which usually means private.","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional â€¦","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple â€¦","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: â€¦","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","A method call expression: <code>x.foo::<T>(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic â€¦","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&a</code> or <code>&mut a</code>.","An array literal constructed from one repeated element: â€¦","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","Tokens in expression position not interpreted by Syn.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","","","","","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional â€¦","A function call expression: <code>invoke(a, b)</code>.","","","","","A cast expression: <code>foo as f64</code>.","","","","","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple â€¦","","","","","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: â€¦","A square bracketed indexing expression: <code>vector[2]</code>.","","","","","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","","","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","A method call expression: <code>x.foo::<T>(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","","","","A path like <code>std::mem::replace</code> possibly containing generic â€¦","","","","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&a</code> or <code>&mut a</code>.","An array literal constructed from one repeated element: â€¦","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","","","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","The index of an unnamed tuple struct field.","","","A struct or tuple struct field accessed in a struct â€¦","A named field like <code>self.x</code>.","An unnamed field like <code>self.0</code>.","A set of bound lifetimes: <code>for<\'a, \'b, \'c></code>.","","","","","A const generic parameter: <code>const LENGTH: usize</code>.","","","","","","","","A generic type parameter, lifetime, or const generic: â€¦","A generic type parameter: <code>T: Into<String></code>.","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","Lifetimes and type parameters attached to a declaration â€¦","","","","","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","","","","","An equality predicate in a <code>where</code> clause (unsupported).","","","","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","","","","A type predicate in a <code>where</code> clause: â€¦","Any lifetimes from a <code>for</code> binding","The type being bounded","","Trait and lifetime bounds (<code>Clone+Send+\'static</code>)","A trait used as a bound on a type parameter.","","","The <code>for<\'a></code> in <code>for<\'a> Foo<&\'a T></code>","The <code>Foo<&\'a T></code> in <code>for<\'a> Foo<&\'a T></code>","A modifier on a trait bound, currently only used for the <code>?</code>â€¦","","","A generic type parameter: <code>T: Into<String></code>.","","","","","","","A trait or lifetime used as a bound on a type parameter.","","","A <code>where</code> clause in a definition: â€¦","","","A single predicate in a <code>where</code> clause: <code>T: Deserialize<\'de></code>.","A type predicate in a <code>where</code> clause: â€¦","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","An equality predicate in a <code>where</code> clause (unsupported).","Returned by <code>Generics::split_for_impl</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","Returned by <code>Generics::split_for_impl</code>.","A Rust lifetime: <code>\'a</code>.","","","A Rust literal such as a string or integer or boolean.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A byte literal: <code>b\'f\'</code>.","A character literal: <code>\'a\'</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A raw token literal not interpreted by Syn.","A boolean literal: <code>true</code> or <code>false</code>.","","","A byte literal: <code>b\'f\'</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A character literal: <code>\'a\'</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","The style of a string literal, either plain quoted or a â€¦","An ordinary string like <code>\\\"data\\\"</code>.","A raw string like <code>r##\\\"data\\\"##</code>.","A macro invocation: <code>println!(\\\"{}\\\", mac)</code>.","","","","","A grouping token that surrounds a macro body: <code>m!(...)</code> or â€¦","","","","The storage of a struct, enum or union data structure.","A struct input to a <code>proc_macro_derive</code> macro.","An enum input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","An enum input to a <code>proc_macro_derive</code> macro.","","","","A struct input to a <code>proc_macro_derive</code> macro.","","","","An untagged union input to a <code>proc_macro_derive</code> macro.","","","Data structure sent to a <code>proc_macro_derive</code> macro.","Attributes tagged on the whole struct or enum.","Visibility of the struct or enum.","Name of the struct or enum.","Generics required to complete the definition.","Data within the struct or enum.","A binary operator: <code>+</code>, <code>+=</code>, <code>&</code>.","The <code>+</code> operator (addition)","The <code>-</code> operator (subtraction)","The <code>*</code> operator (multiplication)","The <code>/</code> operator (division)","The <code>%</code> operator (modulus)","The <code>&&</code> operator (logical and)","The <code>||</code> operator (logical or)","The <code>^</code> operator (bitwise xor)","The <code>&</code> operator (bitwise and)","The <code>|</code> operator (bitwise or)","The <code><<</code> operator (shift left)","The <code>>></code> operator (shift right)","The <code>==</code> operator (equality)","The <code><</code> operator (less than)","The <code><=</code> operator (less than or equal to)","The <code>!=</code> operator (not equal to)","The <code>>=</code> operator (greater than or equal to)","The <code>></code> operator (greater than)","The <code>+=</code> operator","The <code>-=</code> operator","The <code>*=</code> operator","The <code>/=</code> operator","The <code>%=</code> operator","The <code>^=</code> operator","The <code>&=</code> operator","The <code>|=</code> operator","The <code><<=</code> operator","The <code>>>=</code> operator","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","The <code>*</code> operator for dereferencing","The <code>!</code> operator for logical inversion","The <code>-</code> operator for negation","The binary interface of a function: <code>extern \\\"C\\\"</code>.","","","An argument in a function type: the <code>usize</code> in â€¦","","","","Return type of a function signature.","Return type is not specified.","A particular type is returned.","The possible types that a Rust value could have.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -> bool</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a â€¦","Indication that a type should be inferred by the â€¦","A macro in the type position.","The never type: <code>!</code>.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a â€¦","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> â€¦","A tuple type: <code>(A, B, C, String)</code>.","Tokens in type position not interpreted by Syn.","A fixed size array type: <code>[T; n]</code>.","","","","","A bare function type: <code>fn(usize) -> bool</code>.","","","","","","","","","A type contained within invisible delimiters.","","","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a â€¦","","","Indication that a type should be inferred by the â€¦","","A macro in the type position.","","The never type: <code>!</code>.","","A parenthesized type equivalent to the inner type.","","","A path like <code>std::slice::Iter</code>, optionally qualified with a â€¦","","","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","","","","","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","","","","","A dynamically sized slice type: <code>[T]</code>.","","","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> â€¦","","","A tuple type: <code>(A, B, C, String)</code>.","","","The variadic argument of a foreign function.","","","Angle bracketed arguments of a path segment: the <code><K, V></code> â€¦","","","","","A binding (equality constraint) on an associated type: â€¦","","","","An associated type bound: <code>Iterator<Item: Display></code>.","","","","An individual generic argument, like <code>\'a</code>, <code>T</code>, or <code>Item = T</code>.","A lifetime argument.","A type argument.","A binding (equality constraint) on an associated type: â€¦","An associated type bound: <code>Iterator<Item: Display></code>.","A const expression. Must be inside of a block.","Arguments of a function path segment: the <code>(A, B) -> C</code> in â€¦","","<code>(A, B)</code>","<code>C</code>","A path at which a named item is exported (e.g. â€¦","","","Angle bracketed or parenthesized arguments of a path â€¦","","The <code><\'a, T></code> in <code>std::slice::iter<\'a, T></code>.","The <code>(A, B) -> C</code> in <code>Fn(A, B) -> C</code>.","A segment of a path together with any path arguments on â€¦","","","The explicit Self type in a qualified path: the <code>T</code> in â€¦","","","","","","Error returned when a Syn parser cannot parse the input â€¦","The result of a Syn parser.","Parse tokens of source code into the chosen syntax tree â€¦","Parse a proc-macro2 token stream into the chosen syntax â€¦","Parse a string of Rust code into the chosen syntax tree â€¦","Parse a set of parentheses and expose their content to â€¦","Parse a set of curly braces and expose their content to â€¦","Parse a set of square brackets and expose their content â€¦","A type-macro that expands to the name of the Rust type â€¦","Quasi-quotation macro that accepts input like the <code>quote!</code> â€¦","Parse the input TokenStream of a macro, triggering a â€¦","Define a type that supports parsing and printing a given â€¦","Define a type that supports parsing and printing a â€¦reates a new <code>Ident</code> with the given <code>string</code> as well as the â€¦","Returns the span of this <code>Ident</code>.","Configures the span of this <code>Ident</code>, possibly changing its â€¦","Parses the content of the attribute, consisting of the â€¦","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given â€¦","Parses zero or more outer attributes from the stream.","Parses zero or more inner attributes from the stream.","Returns the identifier that begins this structured meta â€¦","Parses a named (braced struct) field.","Parses an unnamed (tuple struct) field.","Get an iterator over the borrowed [<code>Field</code>] items in this â€¦","Get an iterator over the mutably borrowed [<code>Field</code>] items â€¦","Returns the number of fields.","Returns <code>true</code> if there are zero fields.","Returns an Iterator<Item = &TypeParam> over the type â€¦","Returns an Iterator<Item = &mut TypeParam> over the type â€¦","Returns an Iterator<Item = &LifetimeDef> over the â€¦","Returns an Iterator<Item = &mut LifetimeDef> over the â€¦","Returns an Iterator<Item = &ConstParam> over the constant â€¦","Returns an Iterator<Item = &mut ConstParam> over the â€¦","Initializes an empty <code>where</code>-clause if there is not one â€¦","Split a typeâ€™s generics into the pieces required for â€¦","Turn a typeâ€™s generics like <code><X, Y></code> into a turbofish â€¦","","Panics","","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","Parse a syntax tree node from the content of this string â€¦","Invoke parser on the content of this string literal.","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number type.","","","","","","","","","","","","","","Parse the tokens within the macro invocationâ€™s â€¦","Parse the tokens within the macro invocationâ€™s â€¦","In some positions, types may not contain the <code>+</code> character, â€¦","","","Parse a <code>Path</code> containing no path arguments on any of its â€¦","Determines whether this is a path of length 1 equal to â€¦","If this path consists of a single ident, returns the â€¦","","Looks at the next token in the parse stream to determine â€¦","Triggers an error at the current position of the parse â€¦"],"i":[0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,100,0,101,101,0,102,102,0,103,103,0,0,104,104,104,0,105,105,105,105,105,105,105,105,105,105,0,0,106,106,106,0,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,0,0,0,0,0,0,108,108,108,108,108,108,108,108,0,0,109,0,0,0,110,0,0,0,0,0,111,0,0,0,112,113,113,113,113,113,113,113,113,113,113,113,113,113,0,114,114,114,114,0,115,115,115,115,115,115,0,0,116,116,0,117,117,117,117,117,0,0,118,118,118,0,119,119,119,0,120,120,120,0,121,121,0,122,122,122,122,122,0,123,123,123,0,124,124,0,125,125,0,126,126,126,126,0,127,0,128,0,129,129,129,129,0,130,130,130,130,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,0,0,0,0,0,0,132,132,132,132,0,0,0,0,133,133,133,133,0,134,134,134,134,0,0,0,135,135,135,135,0,0,0,0,136,136,136,136,0,0,137,137,0,0,0,0,0,138,138,138,0,139,139,139,0,0,0,0,0,0,0,0,0,0,140,140,140,0,0,0,0,141,141,0,142,142,0,143,143,143,143,0,144,144,144,144,144,144,144,0,145,145,145,0,146,146,146,146,0,147,147,147,147,0,148,148,148,0,149,149,149,0,150,150,150,150,0,151,151,151,151,0,152,152,0,153,153,153,153,153,153,0,154,154,0,155,155,0,156,156,156,0,0,0,0,157,157,0,158,158,158,158,158,158,158,158,0,159,159,0,0,0,0,0,0,0,160,160,0,161,161,161,161,0,162,162,162,0,163,163,163,0,164,164,164,0,165,165,165,0,166,166,0,167,167,167,167,167,0,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,0,169,169,169,0,170,170,0,171,171,171,0,172,172,0,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,0,174,174,174,174,0,175,175,175,175,175,175,175,175,0,176,176,0,177,177,0,178,0,179,0,180,0,181,181,0,182,182,0,183,183,183,183,0,184,184,184,184,0,185,185,0,186,186,0,187,187,0,188,188,0,189,189,189,189,0,190,190,190,0,191,191,191,0,192,192,192,192,192,0,193,193,193,0,194,194,0,195,195,195,0,196,196,0,197,197,197,197,197,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,198,198,198,198,198,198,198,198,198,198,198,117,117,117,117,117,117,117,117,117,117,116,116,116,116,116,116,116,116,116,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,126,126,126,126,126,126,126,126,126,126,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,122,122,122,122,122,122,122,122,122,122,130,130,130,130,130,130,130,130,130,130,128,128,128,128,128,128,128,128,128,128,127,127,127,127,127,127,127,127,127,127,129,129,129,129,129,129,129,129,129,129,131,131,131,131,131,131,131,131,131,131,199,199,199,199,199,199,199,199,200,200,200,200,200,200,200,200,201,201,201,201,201,201,201,201,202,202,202,202,202,202,202,202,203,203,203,203,203,203,203,203,132,132,132,132,132,132,132,132,132,132,204,204,204,204,204,204,204,204,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,133,133,133,133,133,133,133,133,133,133,134,134,134,134,134,134,134,134,134,134,207,207,207,207,207,207,207,207,208,208,208,208,208,208,208,208,135,135,135,135,135,135,135,135,135,135,209,209,209,209,209,209,209,209,210,210,210,210,210,210,210,210,211,211,211,211,211,211,211,211,136,136,136,136,136,136,136,136,136,136,212,212,212,212,212,212,212,212,137,137,137,137,137,137,137,137,137,137,213,213,213,213,213,213,213,213,214,214,214,214,214,214,214,214,215,215,215,215,215,215,215,215,216,216,216,216,216,216,216,216,138,138,138,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,139,139,217,217,217,217,217,217,217,217,218,218,218,218,218,218,218,218,219,219,219,219,219,219,219,219,220,220,220,220,220,220,220,220,221,221,221,221,221,221,221,221,222,222,222,222,222,222,222,222,223,223,223,223,223,223,223,223,224,224,224,224,224,224,224,224,225,225,225,225,225,225,225,225,140,140,140,140,140,140,140,140,140,140,226,226,226,226,226,226,226,226,227,227,227,227,227,227,227,227,228,228,228,228,228,228,228,228,142,142,142,142,142,142,142,142,142,142,141,141,141,141,141,141,141,141,141,141,146,146,146,146,146,146,146,146,146,146,145,145,145,145,145,145,145,145,145,145,153,153,153,153,153,153,153,153,153,153,147,147,147,147,147,147,147,147,147,147,144,144,144,144,144,144,144,144,144,144,229,229,229,229,229,229,229,229,229,229,230,230,230,230,230,230,230,230,230,230,231,231,231,231,231,231,231,231,231,231,143,143,143,143,143,143,143,143,143,143,154,154,154,154,154,154,154,154,154,154,151,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,152,155,155,155,155,155,155,155,155,155,155,156,156,156,156,156,156,156,156,156,156,150,150,150,150,150,150,150,150,150,150,149,149,149,149,149,149,149,149,149,149,148,148,148,148,148,148,148,148,148,148,157,157,157,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,158,158,158,232,232,232,232,232,232,232,232,232,232,233,233,233,233,233,233,233,233,233,233,234,234,234,234,234,234,234,234,234,234,235,235,235,235,235,235,235,235,235,235,236,236,236,236,236,236,236,236,236,236,236,237,237,237,237,237,237,237,237,237,237,237,159,159,159,159,159,159,159,159,159,159,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,162,167,167,167,167,167,167,167,167,167,167,163,163,163,163,163,163,163,163,163,165,165,165,165,165,165,165,165,165,164,164,164,164,164,164,164,164,164,166,166,166,166,166,166,166,166,166,168,168,168,168,168,168,168,168,168,168,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,174,174,174,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,175,175,176,176,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,177,177,178,178,178,178,178,178,178,178,178,178,179,179,179,179,179,179,179,179,179,179,180,180,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,181,181,182,182,182,182,182,182,182,182,182,182,183,183,183,183,183,183,183,183,183,183,184,184,184,184,184,184,184,184,184,184,185,185,185,185,185,185,185,185,185,185,186,186,186,186,186,186,186,186,186,186,187,187,187,187,187,187,187,187,187,187,170,170,170,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,171,171,188,188,188,188,188,188,188,188,188,188,172,172,172,172,172,172,172,172,172,172,194,194,194,194,194,194,194,194,194,194,196,196,196,196,196,196,196,196,196,196,195,195,195,195,195,195,195,195,195,195,192,192,192,192,192,192,192,192,192,192,189,189,189,189,189,189,189,189,189,189,190,190,190,190,190,190,190,190,190,190,191,191,191,191,191,191,191,191,191,191,193,193,193,193,193,193,193,193,193,193,197,197,197,197,197,197,197,197,197,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,107,107,107,107,107,107,107,107,107,107,238,238,238,238,238,238,238,238,238,238,239,239,239,239,239,239,239,239,240,240,240,240,240,240,240,240,240,240,241,241,241,241,241,241,241,241,241,241,242,242,242,242,242,242,242,242,242,242,243,243,243,243,243,243,243,243,108,108,108,108,108,108,108,108,108,108,244,244,244,244,244,244,244,115,115,115,115,115,115,115,115,115,115,113,113,113,113,113,113,113,113,112,112,112,112,112,112,112,112,112,245,245,245,245,245,245,245,198,198,198,198,198,198,198,198,198,198,198,157,157,158,158,232,232,233,233,234,234,235,235,236,236,237,237,159,159,1,1,102,102,100,100,101,101,103,103,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,198,198,198,198,113,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,198,118,119,120,121,126,124,125,130,131,137,139,142,141,146,145,147,143,153,154,151,152,144,155,156,157,158,232,233,234,235,236,237,159,161,167,168,169,173,185,174,183,184,175,180,178,187,179,182,172,186,177,176,181,171,170,194,192,189,193,196,190,245,113,198,198,198,198,198,198,118,118,118,121,121,123,123,130,130,130,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,141,145,145,145,153,154,154,156,156,156,158,158,158,158,158,158,158,236,237,163,163,163,173,173,173,173,173,173,173,173,173,173,173,173,173,173,194,196,115,238,239,240,241,242,243,238,239,240,241,242,243,107,107,115,123,107,115,238,238,239,239,240,240,241,241,242,242,243,243,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,229,230,231,157,232,233,234,235,236,237,105,107,238,240,241,242,108,170,189,116,117,171,168,190,143,144,191,163,164,165,166,167,131,132,133,134,135,136,137,138,139,140,122,123,124,125,192,145,146,141,147,158,159,161,162,142,118,119,120,121,193,194,195,196,148,149,150,197,172,151,152,173,174,175,176,177,178,179,180,153,154,181,182,183,184,185,186,187,169,188,126,127,128,129,130,155,156,112,115,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,146,143,195,107,157,142,141,157,105,157,1,54,56,59,60,61,63,65,66,68,69,73,76,78,81,84,85,88,91,96,97,99,112,1,54,56,59,60,61,63,65,66,68,69,73,76,78,81,84,85,88,91,96,97,99,113,115,157,236,237,113,115,107,107,142,141,157,107,107,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,118,121,117,119,120,123,130,126,124,125,122,128,127,129,131,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,133,132,140,137,134,135,142,141,136,139,138,145,154,156,146,229,230,231,143,147,153,151,152,144,155,150,149,148,157,158,232,233,234,235,236,237,159,161,167,168,169,173,185,174,183,184,175,180,187,182,186,177,176,181,178,179,172,171,188,170,194,196,195,192,189,190,191,193,107,108,142,142,141,141,198,198,198,117,117,117,117,117,118,122,122,123,123,123,123,146,146,146,146,146,146,146,146,230,147,157,157,157,158,158,158,158,232,232,232,232,232,232,232,233,233,233,233,233,234,234,234,234,234,235,235,235,235,235,236,236,236,236,236,236,237,237,237,237,237,237,159,159,159,159,161,161,173,172,186,194,194,194,195,244,244],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]],["tokenbuffer",3]],[[["tokenstream",3]],["tokenbuffer",3]],[[],["cursor",3]],null,[[]],[[],["bool",15]],[[["delimiter",4]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["tokenstream",3]],[[],["option",4]],[[],["span",3]],null,null,[[["parsestream",6]],["result",6]],null,[[],["ident",3]],null,null,[[]],[[],["bool",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["iter",3]],[[],["itermut",3]],[[],["pairs",3]],[[],["pairsmut",3]],[[],["intopairs",3]],[[]],[[]],[[],[["option",4],["pair",4]]],[[],["bool",15]],[[],["bool",15]],[[]],[[["usize",15]]],[[]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[["option",4]]],[[]],null,null,[[],["span",3]],null,null,null,[[]],null,null,null,null,null,[[["parsestream",6]],["result",6]],null,null,null,[[["display",8]],["error",3]],[[],[["parse",8],["result",6]]],[[],["result",6]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[],[["result",6],["punctuated",3]]],[[],["bool",15]],[[],["lookahead1",3]],[[]],[[["display",8]],["error",3]],[[],["result",6]],[[],["span",3]],[[],["cursor",3]],null,null,[[["tokenstream",3]],["result",6]],[[["tokenstream",3]],["result",6]],[[["str",15]],["result",6]],null,[[["span",3],["display",8]]],[[["totokens",8],["display",8]]],[[],["span",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]],[["parse",8],["result",6]]],[[["tokenstream",3]],[["parse",8],["result",6]]],[[["str",15]],[["parse",8],["result",6]]],null,null,null,null,null,null,null,null,[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["ident",3]],["bool",15]],[[],["bool",15]],[[]],[[["ident",3]],["ordering",4]],[[["formatter",3]],[["result",4],["error",3]]],[[],["ident",3]],[[["ident",3]],[["ordering",4],["option",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[],[["span",3],["option",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["tokenstream",3]]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["parsestream",6]],["result",6]],[[],["ident",3]],[[]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[]],[[["selfvalue",3]],["ident",3]],[[["selftype",3]],["ident",3]],[[["super",3]],["ident",3]],[[["crate",3]],["ident",3]],[[["extern",3]],["ident",3]],[[["underscore",3]],["ident",3]],[[["path",3]],["meta",4]],[[["metalist",3]],["meta",4]],[[["metanamevalue",3]],["meta",4]],[[["meta",4]],["nestedmeta",4]],[[["lit",4]],["nestedmeta",4]],[[["fieldsnamed",3]],["fields",4]],[[["fieldsunnamed",3]],["fields",4]],[[["vispublic",3]],["visibility",4]],[[["viscrate",3]],["visibility",4]],[[["visrestricted",3]],["visibility",4]],[[["exprarray",3]],["expr",4]],[[["exprassign",3]],["expr",4]],[[["exprassignop",3]],["expr",4]],[[["exprasync",3]],["expr",4]],[[["exprawait",3]],["expr",4]],[[["exprbinary",3]],["expr",4]],[[["exprblock",3]],["expr",4]],[[["exprbox",3]],["expr",4]],[[["exprbreak",3]],["expr",4]],[[["exprcall",3]],["expr",4]],[[["exprcast",3]],["expr",4]],[[["exprclosure",3]],["expr",4]],[[["exprcontinue",3]],["expr",4]],[[["exprfield",3]],["expr",4]],[[["exprforloop",3]],["expr",4]],[[["exprgroup",3]],["expr",4]],[[["exprif",3]],["expr",4]],[[["exprindex",3]],["expr",4]],[[["exprlet",3]],["expr",4]],[[["exprlit",3]],["expr",4]],[[["exprloop",3]],["expr",4]],[[["exprmacro",3]],["expr",4]],[[["exprmatch",3]],["expr",4]],[[["exprmethodcall",3]],["expr",4]],[[["exprparen",3]],["expr",4]],[[["exprpath",3]],["expr",4]],[[["exprrange",3]],["expr",4]],[[["exprreference",3]],["expr",4]],[[["exprrepeat",3]],["expr",4]],[[["exprreturn",3]],["expr",4]],[[["exprstruct",3]],["expr",4]],[[["exprtry",3]],["expr",4]],[[["exprtryblock",3]],["expr",4]],[[["exprtuple",3]],["expr",4]],[[["exprtype",3]],["expr",4]],[[["exprunary",3]],["expr",4]],[[["exprunsafe",3]],["expr",4]],[[["exprwhile",3]],["expr",4]],[[["expryield",3]],["expr",4]],[[["usize",15]],["index",3]],[[["typeparam",3]],["genericparam",4]],[[["lifetimedef",3]],["genericparam",4]],[[["constparam",3]],["genericparam",4]],[[["ident",3]]],[[["traitbound",3]],["typeparambound",4]],[[["lifetime",3]],["typeparambound",4]],[[["predicatetype",3]],["wherepredicate",4]],[[["predicatelifetime",3]],["wherepredicate",4]],[[["predicateeq",3]],["wherepredicate",4]],[[["litstr",3]],["lit",4]],[[["litbytestr",3]],["lit",4]],[[["litbyte",3]],["lit",4]],[[["litchar",3]],["lit",4]],[[["litint",3]],["lit",4]],[[["litfloat",3]],["lit",4]],[[["litbool",3]],["lit",4]],[[["literal",3]]],[[["literal",3]]],[[["datastruct",3]],["data",4]],[[["dataenum",3]],["data",4]],[[["dataunion",3]],["data",4]],[[["typearray",3]],["type",4]],[[["typebarefn",3]],["type",4]],[[["typegroup",3]],["type",4]],[[["typeimpltrait",3]],["type",4]],[[["typeinfer",3]],["type",4]],[[["typemacro",3]],["type",4]],[[["typenever",3]],["type",4]],[[["typeparen",3]],["type",4]],[[["typepath",3]],["type",4]],[[["typeptr",3]],["type",4]],[[["typereference",3]],["type",4]],[[["typeslice",3]],["type",4]],[[["typetraitobject",3]],["type",4]],[[["typetuple",3]],["type",4]],[[]],[[]],[[["lexerror",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["optionlifetime",3]],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[["lifetime",3]],["bool",15]],[[],["bool",15]],[[["lifetime",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["formatter",3]],["result",6]],[[],[["option",4],["span",3]]],[[["formatter",3]],["result",6]],[[],[["option",4],["span",3]]],[[["span",3],["str",15]],["ident",3]],[[],["span",3]],[[["span",3]]],[[],[["result",6],["meta",4]]],[[],[["parse",8],["result",6]]],[[["parser",8]],["result",6]],[[["parsestream",6]],[["result",6],["vec",3]]],[[["parsestream",6]],[["result",6],["vec",3]]],[[],["path",3]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],[["field",3],["iter",3]]],[[],[["field",3],["itermut",3]]],[[],["usize",15]],[[],["bool",15]],[[],["typeparams",3]],[[],["typeparamsmut",3]],[[],["lifetimes",3]],[[],["lifetimesmut",3]],[[],["constparams",3]],[[],["constparamsmut",3]],[[],["whereclause",3]],[[]],[[],["turbofish",3]],[[["lifetime",3]]],[[["span",3],["str",15]]],[[],["span",3]],[[["span",3]]],[[["literal",3]]],[[],["str",15]],[[],["span",3]],[[["span",3]]],[[["span",3],["str",15]]],[[],["string",3]],[[],[["parse",8],["result",6]]],[[["parser",8]],["result",6]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["span",3]]],[[],[["vec",3],["u8",15]]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["span",3],["u8",15]]],[[],["u8",15]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["char",15],["span",3]]],[[],["char",15]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["span",3],["str",15]]],[[],["str",15]],[[],["result",6]],[[],["str",15]],[[],["span",3]],[[["span",3]]],[[["span",3],["str",15]]],[[],["str",15]],[[],["result",6]],[[],["str",15]],[[],["span",3]],[[["span",3]]],[[["bool",15],["span",3]]],[[],["bool",15]],[[],["span",3]],[[["span",3]]],[[],[["parse",8],["result",6]]],[[["parser",8]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],["bool",15]],[[],[["ident",3],["option",4]]],[[],["bool",15]],[[["peek",8]],["bool",15]],[[],["error",3]]],"p":[[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[3,"Punctuated"],[4,"Pair"],[8,"Spanned"],[8,"Speculative"],[8,"Parse"],[3,"StepCursor"],[3,"ParseBuffer"],[8,"Parser"],[3,"Error"],[4,"AttrStyle"],[3,"Attribute"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Field"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[4,"Visibility"],[4,"Expr"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"Index"],[4,"Member"],[3,"BoundLifetimes"],[3,"ConstParam"],[4,"GenericParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"TypeParam"],[4,"TypeParamBound"],[3,"WhereClause"],[4,"WherePredicate"],[3,"Lifetime"],[4,"Lit"],[3,"LitBool"],[4,"StrStyle"],[3,"Macro"],[4,"MacroDelimiter"],[4,"Data"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[4,"BinOp"],[4,"UnOp"],[3,"Abi"],[3,"BareFnArg"],[4,"ReturnType"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Variadic"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[4,"GenericArgument"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[4,"PathArguments"],[3,"PathSegment"],[3,"QSelf"],[3,"Ident"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprLet"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Lookahead1"],[3,"Nothing"]]},\
"tesseract_plumbing":{"doc":"","t":[3,3,3,3,3,3,3,3,3,4,13,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["TessBaseApi","TessBaseApiGetAltoTextError","TessBaseApiGetHocrTextError","TessBaseApiGetLstmBoxTextError","TessBaseApiGetTsvTextError","TessBaseApiGetUtf8TextError","TessBaseApiGetWordStrBoxTextError","TessBaseApiInitError","TessBaseApiRecogniseError","TessBaseApiSetImageSafetyError","DimensionsExceedMemory","DimensionsExceedImageSize","ImageWidthExceedsBytesPerLine","TessBaseApiSetVariableError","Text","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","drop","drop","as_ref","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","create","init_2","init_4","set_image_2","set_image","set_source_resolution","set_variable","recognize","get_utf8_text","get_hocr_text","get_input_image","get_source_y_resolution","set_rectangle","get_alto_text","get_tsv_text","get_lstm_box_text","get_word_str_box_text","mean_text_conf","get_component_images_1","new"],"q":["tesseract_plumbing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wrapper around <code>tesseract::TessBaseAPI</code>","","","","","","","","","","","","","","Wrapper around Tesseractâ€™s returned strings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for <code>Init-2</code>","Wrapper for <code>Init-4</code>","Wrapper for <code>SetImage-2</code>","Wrapper for <code>SetImage-1</code>","Wrapper for <code>SetSourceResolution</code>","Wrapper for <code>SetVariable</code>","Wrapper for <code>Recognize</code>","Wrapper for <code>GetUTF8Text</code>","Wrapper for <code>GetUTF8Text</code>","Wrapper for <code>TessBaseAPIGetInputImage</code>","Wrapper for <code>TessBaseAPIGetSourceYResolution</code>","Wrapper for <code>TessBaseAPISetRectangle</code>","Wrapper for <code>TessBaseAPIGetAltoText</code>","Wrapper for <code>TessBaseAPIGetTsvText</code>","Wrapper for <code>TessBaseAPIGetLSTMBoxText</code>","Wrapper for <code>TessBaseAPIGetWordStrBoxText</code>","Wrapper for <code>TessBaseAPIMeanTextConf</code>","Wrapper for <code>GetComponentImages 1/2</code>","Safety"],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,2,12,12,2,1,2,3,4,5,6,7,1,8,9,10,11,3,4,5,6,7,1,8,9,10,11,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["cstr",3]],[[]],[[["tessbaseapisetimagesafetyerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["cstr",3],["option",4]],[["tessbaseapiiniterror",3],["result",4]]],[[["cstr",3],["option",4],["tessocrenginemode",6]],[["tessbaseapiiniterror",3],["result",4]]],[[["pix",3]]],[[["c_int",6]],[["result",4],["tessbaseapisetimagesafetyerror",4]]],[[["c_int",6]]],[[["cstr",3]],[["tessbaseapisetvariableerror",3],["result",4]]],[[],[["result",4],["tessbaseapirecogniseerror",3]]],[[],[["text",3],["result",4],["tessbaseapigetutf8texterror",3]]],[[["c_int",6]],[["result",4],["text",3],["tessbaseapigethocrtexterror",3]]],[[],[["option",4],["borrowedpix",3]]],[[],["c_int",6]],[[["c_int",6]]],[[["c_int",6]],[["text",3],["result",4],["tessbaseapigetaltotexterror",3]]],[[["c_int",6]],[["result",4],["text",3],["tessbaseapigettsvtexterror",3]]],[[["c_int",6]],[["text",3],["result",4],["tessbaseapigetlstmboxtexterror",3]]],[[["c_int",6]],[["text",3],["result",4],["tessbaseapigetwordstrboxtexterror",3]]],[[],["c_int",6]],[[["tesspageiteratorlevel",6],["c_int",6]],[["boxa",3],["tessbaseapigetcomponentimageserror",3],["result",4]]],[[]]],"p":[[4,"TessBaseApiSetImageSafetyError"],[3,"TessBaseApi"],[3,"TessBaseApiInitError"],[3,"TessBaseApiSetVariableError"],[3,"TessBaseApiRecogniseError"],[3,"TessBaseApiGetHocrTextError"],[3,"TessBaseApiGetUtf8TextError"],[3,"TessBaseApiGetAltoTextError"],[3,"TessBaseApiGetTsvTextError"],[3,"TessBaseApiGetLstmBoxTextError"],[3,"TessBaseApiGetWordStrBoxTextError"],[3,"Text"]]},\
"tesseract_sys":{"doc":"","t":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,3,3,3,3,3,3,17,17,17,17,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,17,17,17,17,17,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,17,17,17,17,6,17,17,17,17,6,17,17,17,6,17,17,17,6,3,6,6,17,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["TessVersion","TessDeleteText","TessDeleteTextArray","TessDeleteIntArray","TessTextRendererCreate","TessHOcrRendererCreate","TessHOcrRendererCreate2","TessAltoRendererCreate","TessTsvRendererCreate","TessPDFRendererCreate","TessUnlvRendererCreate","TessBoxTextRendererCreate","TessLSTMBoxRendererCreate","TessWordStrBoxRendererCreate","TessDeleteResultRenderer","TessResultRendererInsert","TessResultRendererNext","TessResultRendererBeginDocument","TessResultRendererAddImage","TessResultRendererEndDocument","TessResultRendererExtention","TessResultRendererTitle","TessResultRendererImageNum","TessBaseAPICreate","TessBaseAPIDelete","TessBaseAPIGetOpenCLDevice","TessBaseAPISetInputName","TessBaseAPIGetInputName","TessBaseAPISetInputImage","TessBaseAPIGetInputImage","TessBaseAPIGetSourceYResolution","TessBaseAPIGetDatapath","TessBaseAPISetOutputName","TessBaseAPISetVariable","TessBaseAPISetDebugVariable","TessBaseAPIGetIntVariable","TessBaseAPIGetBoolVariable","TessBaseAPIGetDoubleVariable","TessBaseAPIGetStringVariable","TessBaseAPIPrintVariables","TessBaseAPIPrintVariablesToFile","TessBaseAPIInit1","TessBaseAPIInit2","TessBaseAPIInit3","TessBaseAPIInit4","TessBaseAPIGetInitLanguagesAsString","TessBaseAPIGetLoadedLanguagesAsVector","TessBaseAPIGetAvailableLanguagesAsVector","TessBaseAPIInitLangMod","TessBaseAPIInitForAnalysePage","TessBaseAPIReadConfigFile","TessBaseAPIReadDebugConfigFile","TessBaseAPISetPageSegMode","TessBaseAPIGetPageSegMode","TessBaseAPIRect","TessBaseAPIClearAdaptiveClassifier","TessBaseAPISetImage","TessBaseAPISetImage2","TessBaseAPISetSourceResolution","TessBaseAPISetRectangle","TessBaseAPIGetThresholdedImage","TessBaseAPIGetRegions","TessBaseAPIGetTextlines","TessBaseAPIGetTextlines1","TessBaseAPIGetStrips","TessBaseAPIGetWords","TessBaseAPIGetConnectedComponents","TessBaseAPIGetComponentImages","TessBaseAPIGetComponentImages1","TessBaseAPIGetThresholdedImageScaleFactor","TessBaseAPIAnalyseLayout","TessBaseAPIRecognize","TessBaseAPIRecognizeForChopTest","TessBaseAPIProcessPages","TessBaseAPIProcessPage","TessBaseAPIGetIterator","TessBaseAPIGetMutableIterator","TessBaseAPIGetUTF8Text","TessBaseAPIGetHOCRText","TessBaseAPIGetAltoText","TessBaseAPIGetTsvText","TessBaseAPIGetBoxText","TessBaseAPIGetLSTMBoxText","TessBaseAPIGetWordStrBoxText","TessBaseAPIGetUNLVText","TessBaseAPIMeanTextConf","TessBaseAPIAllWordConfidences","TessBaseAPIAdaptToWordStr","TessBaseAPIClear","TessBaseAPIEnd","TessBaseAPIIsValidWord","TessBaseAPIGetTextDirection","TessBaseAPIGetUnichar","TessBaseAPISetMinOrientationMargin","TessPageIteratorDelete","TessPageIteratorCopy","TessPageIteratorBegin","TessPageIteratorNext","TessPageIteratorIsAtBeginningOf","TessPageIteratorIsAtFinalElement","TessPageIteratorBoundingBox","TessPageIteratorBlockType","TessPageIteratorGetBinaryImage","TessPageIteratorGetImage","TessPageIteratorBaseline","TessPageIteratorOrientation","TessPageIteratorParagraphInfo","TessResultIteratorDelete","TessResultIteratorCopy","TessResultIteratorGetPageIterator","TessResultIteratorGetPageIteratorConst","TessResultIteratorGetChoiceIterator","TessResultIteratorNext","TessResultIteratorGetUTF8Text","TessResultIteratorConfidence","TessResultIteratorWordRecognitionLanguage","TessResultIteratorWordFontAttributes","TessResultIteratorWordIsFromDictionary","TessResultIteratorWordIsNumeric","TessResultIteratorSymbolIsSuperscript","TessResultIteratorSymbolIsSubscript","TessResultIteratorSymbolIsDropcap","TessChoiceIteratorDelete","TessChoiceIteratorNext","TessChoiceIteratorGetUTF8Text","TessChoiceIteratorConfidence","TessMonitorCreate","TessMonitorDelete","TessMonitorSetCancelFunc","TessMonitorSetCancelThis","TessMonitorGetCancelThis","TessMonitorSetProgressFunc","TessMonitorGetProgress","TessMonitorSetDeadlineMSecs","size_t","__off_t","__off64_t","FILE","_IO_lock_t","TessResultRenderer","TessBaseAPI","TessPageIterator","TessResultIterator","TessMutableIterator","TessChoiceIterator","TessOcrEngineMode_OEM_TESSERACT_ONLY","TessOcrEngineMode_OEM_LSTM_ONLY","TessOcrEngineMode_OEM_TESSERACT_LSTM_COMBINED","TessOcrEngineMode_OEM_DEFAULT","TessOcrEngineMode","TessPageSegMode_PSM_OSD_ONLY","TessPageSegMode_PSM_AUTO_OSD","TessPageSegMode_PSM_AUTO_ONLY","TessPageSegMode_PSM_AUTO","TessPageSegMode_PSM_SINGLE_COLUMN","TessPageSegMode_PSM_SINGLE_BLOCK_VERT_TEXT","TessPageSegMode_PSM_SINGLE_BLOCK","TessPageSegMode_PSM_SINGLE_LINE","TessPageSegMode_PSM_SINGLE_WORD","TessPageSegMode_PSM_CIRCLE_WORD","TessPageSegMode_PSM_SINGLE_CHAR","TessPageSegMode_PSM_SPARSE_TEXT","TessPageSegMode_PSM_SPARSE_TEXT_OSD","TessPageSegMode_PSM_RAW_LINE","TessPageSegMode_PSM_COUNT","TessPageSegMode","TessPageIteratorLevel_RIL_BLOCK","TessPageIteratorLevel_RIL_PARA","TessPageIteratorLevel_RIL_TEXTLINE","TessPageIteratorLevel_RIL_WORD","TessPageIteratorLevel_RIL_SYMBOL","TessPageIteratorLevel","TessPolyBlockType_PT_UNKNOWN","TessPolyBlockType_PT_FLOWING_TEXT","TessPolyBlockType_PT_HEADING_TEXT","TessPolyBlockType_PT_PULLOUT_TEXT","TessPolyBlockType_PT_EQUATION","TessPolyBlockType_PT_INLINE_EQUATION","TessPolyBlockType_PT_TABLE","TessPolyBlockType_PT_VERTICAL_TEXT","TessPolyBlockType_PT_CAPTION_TEXT","TessPolyBlockType_PT_FLOWING_IMAGE","TessPolyBlockType_PT_HEADING_IMAGE","TessPolyBlockType_PT_PULLOUT_IMAGE","TessPolyBlockType_PT_HORZ_LINE","TessPolyBlockType_PT_VERT_LINE","TessPolyBlockType_PT_NOISE","TessPolyBlockType_PT_COUNT","TessPolyBlockType","TessOrientation_ORIENTATION_PAGE_UP","TessOrientation_ORIENTATION_PAGE_RIGHT","TessOrientation_ORIENTATION_PAGE_DOWN","TessOrientation_ORIENTATION_PAGE_LEFT","TessOrientation","TessParagraphJustification_JUSTIFICATION_UNKNOWN","TessParagraphJustification_JUSTIFICATION_LEFT","TessParagraphJustification_JUSTIFICATION_CENTER","TessParagraphJustification_JUSTIFICATION_RIGHT","TessParagraphJustification","TessWritingDirection_WRITING_DIRECTION_LEFT_TO_RIGHT","TessWritingDirection_WRITING_DIRECTION_RIGHT_TO_LEFT","TessWritingDirection_WRITING_DIRECTION_TOP_TO_BOTTOM","TessWritingDirection","TessTextlineOrder_TEXTLINE_ORDER_LEFT_TO_RIGHT","TessTextlineOrder_TEXTLINE_ORDER_RIGHT_TO_LEFT","TessTextlineOrder_TEXTLINE_ORDER_TOP_TO_BOTTOM","TessTextlineOrder","ETEXT_DESC","TessCancelFunc","TessProgressFunc","kPointsPerInch","kMinCredibleResolution","kMaxCredibleResolution","kResolutionEstimationFactor","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","clone","clone","clone","clone","clone","fmt","fmt","fmt","fmt","fmt","fmt","fmt"],"q":["tesseract_sysdi":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["tessresultrenderer",3]],[[],["tessbaseapi",3]],[[],["tesspageiterator",3]],[[],["tessresultiterator",3]],[[],["tessmutableiterator",3]],[[],["tesschoiceiterator",3]],[[],["etext_desc",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[3,"TessResultRenderer"],[3,"TessBaseAPI"],[3,"TessPageIterator"],[3,"TessResultIterator"],[3,"TessMutableIterator"],[3,"TessChoiceIterator"],[3,"ETEXT_DESC"]]},\
"thiserror":{"doc":"githubâ€‚crates-ioâ€‚docs-rs","t":[24],"n":["Error"],"q":["thiserror"],"d":[""],"i":[0],"f":[null],"p":[]},\
"thiserror_impl":{"doc":"","t":[24],"n":["Error"],"q":["thiserror_impl"],"d":[""],"i":[0],"f":[null],"p":[]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser â€¦","t":[17,8,10,10],"n":["UNICODE_VERSION","UnicodeXID","is_xid_start","is_xid_continue"],"q":["unicode_xid","","",""],"d":["The version of Unicode that this version of unicode-xid â€¦","Methods for determining if a character is a valid â€¦","Returns whether the specified character satisfies the â€˜â€¦","Returns whether the specified <code>char</code> satisfies the â€˜â€¦"],"i":[0,0,1,1],"f":[null,null,[[],["bool",15]],[[],["bool",15]]],"p":[[8,"UnicodeXID"]]}\
}');
initSearch(searchIndex);